[
    {
        "functionName": "installed",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(Installing 'Gentle Wake Up' with settings: $settings)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.initialize()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "updated",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(Updating 'Gentle Wake Up' with settings: $settings)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.unschedule()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def controller = this.getController()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "controller",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(controller.label = app.label)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.initialize()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "appHandler",
        "arguments": "evt",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(appHandler evt: ${evt.value})",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(evt.value == touch)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "atomicState.running",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "statement": "return this.stop(appTouch)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "statement": "return this.start(appTouch)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "locationHandler",
        "arguments": "evt",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(locationHandler evt: ${evt.value})",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "modeStart",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return null",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def isSpecifiedMode = (evt.value == modeStart)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def modeStopIsTrue = (modeStop && (modeStop != false))",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(isSpecifiedMode && this.canStartAutomatically())",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.start(modeChange)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "IfStatement",
                                    "statement": "If statement",
                                    "condition": {
                                        "type": "BooleanExpression",
                                        "expression": "(isSpecifiedMode && modeStopIsTrue)",
                                        "children": [
                                            
                                        ]
                                    },
                                    "ifBlock": {
                                        "type": "BlockStatement",
                                        "statement": "Block statement",
                                        "children": [
                                            {
                                                "type": "ReturnStatement",
                                                "statement": "return this.stop(modeChange)",
                                                "children": [
                                                    
                                                ]
                                            }
                                        ]
                                    },
                                    "elseBlock": null,
                                    "children": [
                                        
                                    ]
                                },
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "stopDimmersHandler",
        "arguments": "evt",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.trace(stopDimmersHandler evt: ${evt.value})",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def percentComplete = this.completionPercentage()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "((percentComplete > 2) && (percentComplete < 98))",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(manualOverride == cancel)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "log.debug(STOPPING in stopDimmersHandler)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ReturnStatement",
                                                        "statement": "return this.stop(manualOverride)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": {
                                                "type": "IfStatement",
                                                "statement": "If statement",
                                                "condition": {
                                                    "type": "BooleanExpression",
                                                    "expression": "(manualOverride == jumpTo)",
                                                    "children": [
                                                        
                                                    ]
                                                },
                                                "ifBlock": {
                                                    "type": "BlockStatement",
                                                    "statement": "Block statement",
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "statement": "def end = this.dynamicEndLevel()",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "statement": "log.debug(Jumping to 99% complete in stopDimmersHandler)",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        {
                                                            "type": "ReturnStatement",
                                                            "statement": "return this.jumpTo(99)",
                                                            "children": [
                                                                
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "elseBlock": null,
                                                "children": [
                                                    
                                                ]
                                            },
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return log.debug(not stopping in stopDimmersHandler)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "scheduledStart",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "this.canStartAutomatically()",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.start(schedule)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "start",
        "arguments": "source",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.trace(START)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.sendStartEvent(source)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.setLevelsInState()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(atomicState.running = true)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(atomicState.runCounter = 0)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(atomicState.start = new java.util.Date().getTime())",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.schedule(0 * * * * ?, healthCheck)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.increment()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "stop",
        "arguments": "source",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.trace(STOP)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.sendStopEvent(source)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(atomicState.running = false)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(atomicState.start = 0)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(atomicState.runCounter = 0)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.unschedule(healthCheck)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "sendStartEvent",
        "arguments": "source",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.trace(sendStartEvent($source))",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def eventData = [name:sessionStatus, value:running, descriptionText:${app.label} has started dimming, displayed:true, linkText:app.label, isStateChange:true]",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(source == modeChange)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(eventData.descriptionText +=  because of a mode change)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "IfStatement",
                                    "statement": "If statement",
                                    "condition": {
                                        "type": "BooleanExpression",
                                        "expression": "(source == schedule)",
                                        "children": [
                                            
                                        ]
                                    },
                                    "ifBlock": {
                                        "type": "BlockStatement",
                                        "statement": "Block statement",
                                        "children": [
                                            {
                                                "type": "ExpressionStatement",
                                                "statement": "(eventData.descriptionText +=  as scheduled)",
                                                "children": [
                                                    
                                                ]
                                            }
                                        ]
                                    },
                                    "elseBlock": {
                                        "type": "IfStatement",
                                        "statement": "If statement",
                                        "condition": {
                                            "type": "BooleanExpression",
                                            "expression": "(source == appTouch)",
                                            "children": [
                                                
                                            ]
                                        },
                                        "ifBlock": {
                                            "type": "BlockStatement",
                                            "statement": "Block statement",
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "statement": "(eventData.descriptionText +=  because you pressed play on the app)",
                                                    "children": [
                                                        
                                                    ]
                                                }
                                            ]
                                        },
                                        "elseBlock": {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(source == controller)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(eventData.descriptionText +=  because you pressed play on the controller)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        "children": [
                                            
                                        ]
                                    },
                                    "children": [
                                        
                                    ]
                                },
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.sendControllerEvent(eventData)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "sendStopEvent",
        "arguments": "source",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.trace(sendStopEvent($source))",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def eventData = [name:sessionStatus, value:stopped, descriptionText:${app.label} has stopped dimming, displayed:true, linkText:app.label, isStateChange:true]",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(source == modeChange)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(eventData.descriptionText +=  because of a mode change)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(eventData.value += cancelled)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "IfStatement",
                                    "statement": "If statement",
                                    "condition": {
                                        "type": "BooleanExpression",
                                        "expression": "(source == schedule)",
                                        "children": [
                                            
                                        ]
                                    },
                                    "ifBlock": {
                                        "type": "BlockStatement",
                                        "statement": "Block statement",
                                        "children": [
                                            {
                                                "type": "ExpressionStatement",
                                                "statement": "(eventData.descriptionText = ${app.label} has finished dimming)",
                                                "children": [
                                                    
                                                ]
                                            }
                                        ]
                                    },
                                    "elseBlock": {
                                        "type": "IfStatement",
                                        "statement": "If statement",
                                        "condition": {
                                            "type": "BooleanExpression",
                                            "expression": "(source == appTouch)",
                                            "children": [
                                                
                                            ]
                                        },
                                        "ifBlock": {
                                            "type": "BlockStatement",
                                            "statement": "Block statement",
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "statement": "(eventData.descriptionText +=  because you pressed play on the app)",
                                                    "children": [
                                                        
                                                    ]
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "statement": "(eventData.value += cancelled)",
                                                    "children": [
                                                        
                                                    ]
                                                }
                                            ]
                                        },
                                        "elseBlock": {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(source == controller)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(eventData.descriptionText +=  because you pressed stop on the controller)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(eventData.value += cancelled)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": {
                                                "type": "IfStatement",
                                                "statement": "If statement",
                                                "condition": {
                                                    "type": "BooleanExpression",
                                                    "expression": "(source == settingsChange)",
                                                    "children": [
                                                        
                                                    ]
                                                },
                                                "ifBlock": {
                                                    "type": "BlockStatement",
                                                    "statement": "Block statement",
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "statement": "(eventData.descriptionText +=  because the settings have changed)",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "statement": "(eventData.value += cancelled)",
                                                            "children": [
                                                                
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "elseBlock": {
                                                    "type": "IfStatement",
                                                    "statement": "If statement",
                                                    "condition": {
                                                        "type": "BooleanExpression",
                                                        "expression": "(source == manualOverride)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    "ifBlock": {
                                                        "type": "BlockStatement",
                                                        "statement": "Block statement",
                                                        "children": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "statement": "(eventData.descriptionText +=  because the dimmer was manually turned off)",
                                                                "children": [
                                                                    
                                                                ]
                                                            },
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "statement": "(eventData.value += cancelled)",
                                                                "children": [
                                                                    
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "elseBlock": null,
                                                    "children": [
                                                        
                                                    ]
                                                },
                                                "children": [
                                                    
                                                ]
                                            },
                                            "children": [
                                                
                                            ]
                                        },
                                        "children": [
                                            
                                        ]
                                    },
                                    "children": [
                                        
                                    ]
                                },
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.sendTimeRemainingEvent(100)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.sendTimeRemainingEvent(0, false)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.sendControllerEvent(eventData)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "sendTimeRemainingEvent",
        "arguments": "percentComplete, displayed = true",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.trace(sendTimeRemainingEvent($percentComplete))",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def percentCompleteEventData = [name:percentComplete, value:(int) percentComplete, displayed:displayed, isStateChange:true]",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.sendControllerEvent(percentCompleteEventData)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def duration = this.sanitizeInt(duration, 30)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def timeRemaining = (duration - (duration * (percentComplete / 100)))",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def timeRemainingEventData = [name:timeRemaining, value:this.displayableTime(timeRemaining), displayed:displayed, isStateChange:true]",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.sendControllerEvent(timeRemainingEventData)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "sendControllerEvent",
        "arguments": "eventData",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def controller = this.getController()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "controller",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return controller.controllerEvent(eventData)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "getController",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def dni = state.controllerDni",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "dni",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "log.warn(no controller dni)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return null",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def controller = this.getChildDevice(dni)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "controller",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "log.warn(no controller)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return null",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(controller: $controller)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return controller",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "updateDimmers",
        "arguments": "percentComplete",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "dimmers.each({ java.lang.Object dimmer -> ... })",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.sendTimeRemainingEvent(percentComplete)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "speak",
        "arguments": "message",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def sound = this.textToSpeech(message)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def soundDuration = ((java.lang.Integer) sound.duration + 2)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(Playing ${sound.uri})",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "completionMusicPlayer.playTrack(sound.uri)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(Scheduled resume in $soundDuration sec)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.runIn(soundDuration, resumePlaying, [overwrite:true])",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "resumePlaying",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.trace(resumePlaying())",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def sonos = completionMusicPlayer",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "sonos",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def currentTrack = sonos.currentState(trackData).jsonValue",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(currentTrack.status == playing)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "statement": "return sonos.playTrack(currentTrack)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "statement": "return sonos.setTrack(currentTrack)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "setLevelsInState",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def startLevels = [:]",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "dimmers.each({ java.lang.Object dimmer -> ... })",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return (atomicState.startLevels = startLevels)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "canStartAutomatically",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def today = new java.util.Date().format(EEEE)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(today: $today, days: $days)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(days || days.contains(today))",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return true",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.trace(should not run)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return false",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "completionPercentage",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.trace(checkingTime)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "atomicState.running",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return null",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def now = new java.util.Date().getTime()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def timeElapsed = (now - atomicState.start)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def totalRunTime = (this.totalRunTimeMillis()) ? this.totalRunTimeMillis() : 1",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def percentComplete = ((timeElapsed / totalRunTime) * 100)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(percentComplete: $percentComplete)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return percentComplete",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "timeRemaining",
        "arguments": "percentComplete",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def normalizedPercentComplete = (percentComplete / 100)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def duration = this.sanitizeInt(duration, 30)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def timeElapsed = (duration * normalizedPercentComplete)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def timeRemaining = (duration - timeElapsed)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return timeRemaining",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "jumpTo",
        "arguments": "percentComplete",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def millisToEnd = this.millisToEnd(percentComplete)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def endTime = (new java.util.Date().getTime() + millisToEnd)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def duration = this.sanitizeInt(duration, 30)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def durationMillis = this.convertToMillis(duration)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def shiftedStart = (endTime - durationMillis)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(atomicState.start = shiftedStart)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.updateDimmers(percentComplete)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.sendTimeRemainingEvent(percentComplete)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "getHue",
        "arguments": "dimmer, level",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def start = (int) atomicState.startLevels[dimmer.id]",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def end = this.dynamicEndLevel()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(start > end)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.getDownHue(level)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.getUpHue(level)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "getUpHue",
        "arguments": "level",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.getBlueHue(level)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "getDownHue",
        "arguments": "level",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.getRedHue(level)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "fancyString",
        "arguments": "listOfStrings",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def fancify = { java.lang.Object list -> ... }",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return fancify.call(listOfStrings)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "fancyDeviceString",
        "arguments": "devices = []",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.fancyString(devices.collect({ ... }))",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "deviceLabel",
        "arguments": "device",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ReturnStatement",
                                "statement": "return (device.label) ? device.label : device.name",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "schedulingHrefDescription",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def descriptionParts = []",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "days",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(days == this.weekdays())",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(descriptionParts << On weekdays,)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": {
                                                "type": "IfStatement",
                                                "statement": "If statement",
                                                "condition": {
                                                    "type": "BooleanExpression",
                                                    "expression": "(days == this.weekends())",
                                                    "children": [
                                                        
                                                    ]
                                                },
                                                "ifBlock": {
                                                    "type": "BlockStatement",
                                                    "statement": "Block statement",
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "statement": "(descriptionParts << On weekends,)",
                                                            "children": [
                                                                
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "elseBlock": {
                                                    "type": "BlockStatement",
                                                    "statement": "Block statement",
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "statement": "(descriptionParts << On ${this.fancyString(days)},)",
                                                            "children": [
                                                                
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "children": [
                                                    
                                                ]
                                            },
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(descriptionParts << ${this.fancyDeviceString(dimmers)} will start dimming)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "startTime",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(descriptionParts << at ${this.humanReadableStartDate()})",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "modeStart",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "startTime",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(descriptionParts << or)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(descriptionParts << when ${location.name} enters '$modeStart' mode)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(descriptionParts.size() <= 1)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return null",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return descriptionParts.join( )",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "completionHrefDescription",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def descriptionParts = []",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def example = Switch1 will be turned on. Switch2, Switch3, and Switch4 will be dimmed to 50%. The message '<message>' will be spoken, sent as a text, and sent as a push notification. The mode will be changed to '<mode>'. The phrase '<phrase>' will be executed",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "completionSwitches",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def switchesList = []",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def dimmersList = []",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "completionSwitches.each({ ... })",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "switchesList",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(descriptionParts << ${this.fancyString(switchesList)} will be turned ${(completionSwitchesState) ? completionSwitchesState : on}.)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "dimmersList",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(descriptionParts << ${this.fancyString(dimmersList)} will be dimmed to $completionSwitchesLevel%.)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(completionMessage && ((completionPhoneNumber || completionPush) || completionMusicPlayer))",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def messageParts = []",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "completionMusicPlayer",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(messageParts << spoken)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "completionPhoneNumber",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(messageParts << sent as a text)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "completionPush",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(messageParts << sent as a push notification)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(descriptionParts << The message '$completionMessage' will be ${this.fancyString(messageParts)}.)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "completionMode",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(descriptionParts << The mode will be changed to '$completionMode'.)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "completionPhrase",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(descriptionParts << The phrase '$completionPhrase' will be executed.)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return descriptionParts.join( )",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "numbersPageHrefDescription",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def title = All dimmers will dim for ${(duration) ? duration : 30} minutes from ${this.startLevelLabel()} to ${this.endLevelLabel()}",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "colorize",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def colorDimmers = this.dimmersWithSetColorCommand()",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(colorDimmers == dimmers)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(title +=  and will gradually change color.)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(title += .\n${this.fancyDeviceString(colorDimmers)} will gradually change color.)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return title",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "hueSatToHex",
        "arguments": "h, s",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def convertedRGB = this.hslToRgb(h, s, 0.5)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.rgbToHex(convertedRGB)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "hslToRgb",
        "arguments": "h, s, l",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def r = <not implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression$1>",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def g = <not implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression$1>",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def b = <not implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression$1>",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(s == 0)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(r = (g = (b = l)))",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def hue2rgb = { java.lang.Object p, java.lang.Object q, java.lang.Object t -> ... }",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def q = ((l < 0.5)) ? (l * (1 + s)) : ((l + s) - (l * s))",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def p = ((2 * l) - q)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(r = hue2rgb.call(p, q, (h + (1 / 3))))",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(g = hue2rgb.call(p, q, h))",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(b = hue2rgb.call(p, q, (h - (1 / 3))))",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return [(r * 255), (g * 255), (b * 255)]",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "rgbToHex",
        "arguments": "red, green, blue",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def toHex = { ... }",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def rgbToHex = { java.lang.Object r, java.lang.Object g, java.lang.Object b -> ... }",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return rgbToHex.call(red, green, blue)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "usesOldSettings",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.hasEndLevel()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "hasStartLevel",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ReturnStatement",
                                "statement": "return ((startLevel != null) && (startLevel != ))",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    },
    {
        "functionName": "hasEndLevel",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ReturnStatement",
                                "statement": "return ((endLevel != null) && (endLevel != ))",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Dim your lights up slowly, allowing you to wake up more naturally."
    }
]