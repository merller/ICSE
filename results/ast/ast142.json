[
    {
        "functionName": "installed",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(Installed with settings: $settings)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.subscribeToEvents()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Play a weather report through your Speaker when the mode changes or other events occur"
    },
    {
        "functionName": "updated",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(Updated with settings: $settings)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.unsubscribe()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.unschedule()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.subscribeToEvents()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Play a weather report through your Speaker when the mode changes or other events occur"
    },
    {
        "functionName": "subscribeToEvents",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.subscribe(app, appTouchHandler)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.subscribe(contact, contact.open, eventHandler)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.subscribe(contactClosed, contact.closed, eventHandler)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.subscribe(acceleration, acceleration.active, eventHandler)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.subscribe(motion, motion.active, eventHandler)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.subscribe(mySwitch, switch.on, eventHandler)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.subscribe(mySwitchOff, switch.off, eventHandler)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.subscribe(arrivalPresence, presence.present, eventHandler)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.subscribe(departurePresence, presence.not present, eventHandler)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.subscribe(smoke, smoke.detected, eventHandler)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.subscribe(smoke, smoke.tested, eventHandler)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.subscribe(smoke, carbonMonoxide.detected, eventHandler)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.subscribe(water, water.wet, eventHandler)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.subscribe(button1, button.pushed, eventHandler)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "triggerModes",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.subscribe(location, modeChangeHandler)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "timeOfDay",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.schedule(timeOfDay, scheduledTimeHandler)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "song",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.saveSelectedSong()",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Play a weather report through your Speaker when the mode changes or other events occur"
    },
    {
        "functionName": "eventHandler",
        "arguments": "evt",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.trace(eventHandler($evt?.name: $evt?.value))",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "allOk",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "log.trace(allOk)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def lastTime = state[this.frequencyKey(evt)]",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "this.oncePerDayOk(lastTime)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "IfStatement",
                                                        "statement": "If statement",
                                                        "condition": {
                                                            "type": "BooleanExpression",
                                                            "expression": "frequency",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "ifBlock": {
                                                            "type": "BlockStatement",
                                                            "statement": "Block statement",
                                                            "children": [
                                                                {
                                                                    "type": "IfStatement",
                                                                    "statement": "If statement",
                                                                    "condition": {
                                                                        "type": "BooleanExpression",
                                                                        "expression": "((lastTime == null) || ((this.now() - lastTime) >= (frequency * 60000)))",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    "ifBlock": {
                                                                        "type": "BlockStatement",
                                                                        "statement": "Block statement",
                                                                        "children": [
                                                                            {
                                                                                "type": "ReturnStatement",
                                                                                "statement": "return this.takeAction(evt)",
                                                                                "children": [
                                                                                    
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    "elseBlock": {
                                                                        "type": "BlockStatement",
                                                                        "statement": "Block statement",
                                                                        "children": [
                                                                            {
                                                                                "type": "ReturnStatement",
                                                                                "statement": "return log.debug(Not taking action because $frequency minutes have not elapsed since last action)",
                                                                                "children": [
                                                                                    
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    "children": [
                                                                        
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "elseBlock": {
                                                            "type": "BlockStatement",
                                                            "statement": "Block statement",
                                                            "children": [
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "statement": "return this.takeAction(evt)",
                                                                    "children": [
                                                                        
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "statement": "return log.debug(Not taking action because it was already taken today)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Play a weather report through your Speaker when the mode changes or other events occur"
    },
    {
        "functionName": "modeChangeHandler",
        "arguments": "evt",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.trace(modeChangeHandler ${evt.name}: ${evt.value} ($triggerModes))",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(evt.value in triggerModes)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.eventHandler(evt)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Play a weather report through your Speaker when the mode changes or other events occur"
    },
    {
        "functionName": "scheduledTimeHandler",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.eventHandler(null)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Play a weather report through your Speaker when the mode changes or other events occur"
    },
    {
        "functionName": "appTouchHandler",
        "arguments": "evt",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.takeAction(evt)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Play a weather report through your Speaker when the mode changes or other events occur"
    }
]