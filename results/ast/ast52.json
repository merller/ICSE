[
    {
        "functionName": "installed",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.dpwMap = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.tpwMap = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.Rain = [0, 0, 0, 0, 0, 0, 0])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.daycount = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(atomicState.run = false)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.pauseTime = null)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(atomicState.startTime = null)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(atomicState.finishTime = null)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(Installed with settings: $settings)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.installSchedule()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "updated",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(Updated with settings: $settings)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.installSchedule()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "installSchedule",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "state.seasonAdj",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(state.seasonAdj = 100.0)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "state.weekseasonAdj",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(state.weekseasonAdj = 0)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(state.daysAvailable != 0)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(state.daysAvailable = 0)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.daysAvailable = this.daysAvailable())",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "atomicState.run",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.attemptRecovery()",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.unsubscribe()",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.resetEverything()",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.subscribe(app, appTouch)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.util.Random rand = new java.util.Random()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Long randomOffset = 0",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer randomSeconds = rand.nextInt(59)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(settings.isRain || settings.isSeason)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "this.schedule($randomSeconds 57 23 1/1 * ? *, getRainToday)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "((settings.switches && settings.startTime) && settings.enable)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(randomOffset = (rand.nextInt(60000) + 20000))",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def checktime = (this.timeToday(settings.startTime, location.timeZone).getTime() + randomOffset)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.schedule(checktime, preCheck)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.writeSettings()",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.note(schedule, ${app.label}: Starts at ${this.startTimeString()}, i)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.unschedule(preCheck)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.note(disable, ${app.label}: Automatic watering disabled or setup is incomplete, a)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "resetEverything",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "atomicState.run",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(atomicState.run = false)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.unsubAllBut()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.unschedule(cycleOn)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.unschedule(checkRunMap)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.unschedule(writeCycles)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.unschedule(subOff)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "settings.enableManual",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ReturnStatement",
                                    "statement": "return this.subscribe(settings.switches, switch.programOn, manualStart)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "unsubAllBut",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.unsubscribe(settings.switches)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.unsubWaterStoppers()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "settings.sync",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ReturnStatement",
                                    "statement": "return this.unsubscribe(settings.sync)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "appTouch",
        "arguments": "evt",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(appTouch(): atomicState.run = ${atomicState.run})",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.runIn(2, preCheck)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "subWaterStop",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "settings.contacts",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.unsubscribe(settings.contacts)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.subscribe(settings.contacts, contact.${settings.contactStop}, waterStop)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "settings.toggles",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.unsubscribe(settings.toggles)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.subscribe(settings.toggles, switch.${settings.toggleStop}, waterStop)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "subWaterStart",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "settings.contacts",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.unsubscribe(settings.contacts)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def cond = ((settings.contactStop == open)) ? closed : open",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.subscribe(settings.contacts, contact.$cond, waterStart)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "settings.toggles",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.unsubscribe(settings.toggles)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def cond = ((settings.toggleStop == on)) ? off : on",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.subscribe(settings.toggles, switch.$cond, waterStart)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "unsubWaterStoppers",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "settings.contacts",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "this.unsubscribe(settings.contacts)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "settings.toggles",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ReturnStatement",
                                    "statement": "return this.unsubscribe(settings.toggles)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "writeSettings",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "state.tpwMap",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(state.tpwMap = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "state.dpwMap",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(state.dpwMap = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "state.setMoisture",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(state.setMoisture = null)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "state.seasonAdj",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(state.seasonAdj = 100.0)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "state.weekseasonAdj",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(state.weekseasonAdj = 0)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.setSeason()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "manualStart",
        "arguments": "evt",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Boolean running = this.attemptRecovery()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "((settings.enableManual && running) && (settings.switches.currentStatus != pause))",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(settings.sync && ((settings.sync.currentSwitch != off) || (settings.sync.currentStatus == pause)))",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "statement": "return this.note(skipping, ${app.label}: Manual run aborted, ${settings.sync.displayName} appears to be busy, a)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "def runNowMap = []",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(runNowMap = this.cycleLoop(0))",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "statement": "If statement",
                                                        "condition": {
                                                            "type": "BooleanExpression",
                                                            "expression": "runNowMap",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "ifBlock": {
                                                            "type": "BlockStatement",
                                                            "statement": "Block statement",
                                                            "children": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "statement": "(atomicState.run = true)",
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "statement": "settings.switches.programWait()",
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "statement": "this.subscribe(settings.switches, switch.off, cycleOff)",
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "statement": "this.runIn(60, cycleOn)",
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "statement": "java.lang.String newString = ",
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "statement": "java.lang.Integer tt = state.totalTime",
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "IfStatement",
                                                                    "statement": "If statement",
                                                                    "condition": {
                                                                        "type": "BooleanExpression",
                                                                        "expression": "tt",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    "ifBlock": {
                                                                        "type": "BlockStatement",
                                                                        "statement": "Block statement",
                                                                        "children": [
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "statement": "java.lang.Integer hours = (tt / 60)",
                                                                                "children": [
                                                                                    
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "statement": "java.lang.Integer mins = (tt - (hours * 60))",
                                                                                "children": [
                                                                                    
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "statement": "java.lang.String hourString = ",
                                                                                "children": [
                                                                                    
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "statement": "java.lang.String s = ",
                                                                                "children": [
                                                                                    
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "IfStatement",
                                                                                "statement": "If statement",
                                                                                "condition": {
                                                                                    "type": "BooleanExpression",
                                                                                    "expression": "(hours > 1)",
                                                                                    "children": [
                                                                                        
                                                                                    ]
                                                                                },
                                                                                "ifBlock": {
                                                                                    "type": "ExpressionStatement",
                                                                                    "statement": "(s = s)",
                                                                                    "children": [
                                                                                        
                                                                                    ]
                                                                                },
                                                                                "elseBlock": null,
                                                                                "children": [
                                                                                    
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "IfStatement",
                                                                                "statement": "If statement",
                                                                                "condition": {
                                                                                    "type": "BooleanExpression",
                                                                                    "expression": "(hours > 0)",
                                                                                    "children": [
                                                                                        
                                                                                    ]
                                                                                },
                                                                                "ifBlock": {
                                                                                    "type": "ExpressionStatement",
                                                                                    "statement": "(hourString = $hours hour$s & )",
                                                                                    "children": [
                                                                                        
                                                                                    ]
                                                                                },
                                                                                "elseBlock": null,
                                                                                "children": [
                                                                                    
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "statement": "(s = s)",
                                                                                "children": [
                                                                                    
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "IfStatement",
                                                                                "statement": "If statement",
                                                                                "condition": {
                                                                                    "type": "BooleanExpression",
                                                                                    "expression": "(mins == 1)",
                                                                                    "children": [
                                                                                        
                                                                                    ]
                                                                                },
                                                                                "ifBlock": {
                                                                                    "type": "ExpressionStatement",
                                                                                    "statement": "(s = )",
                                                                                    "children": [
                                                                                        
                                                                                    ]
                                                                                },
                                                                                "elseBlock": null,
                                                                                "children": [
                                                                                    
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "statement": "(newString = run time: $hourString$mins minute$s:\n)",
                                                                                "children": [
                                                                                    
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    "elseBlock": null,
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "statement": "return this.note(active, ${app.label}: Manual run, watering in 1 minute: $newString$runNowMap, d)",
                                                                    "children": [
                                                                        
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "elseBlock": {
                                                            "type": "ReturnStatement",
                                                            "statement": "return this.note(skipping, ${app.label}: Manual run failed, check configuration, a)",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "ReturnStatement",
                                    "statement": "return this.note(skipping, ${app.label}: Manual run aborted, ${settings.switches.displayName} appears to be busy, a)",
                                    "children": [
                                        
                                    ]
                                },
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "busyOff",
        "arguments": "evt",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def cst = settings.switches.currentStatus",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "((settings.switches.currentSwitch == off) && (cst != pause))",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.unsubscribe(switches)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "java.util.Random rand = new java.util.Random()",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "java.lang.Integer randomSeconds = (rand.nextInt(120) + 15)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.runIn(randomSeconds, preCheck)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.note(active, ${app.label}: ${settings.switches} finished, starting in $randomSeconds seconds, i)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "preCheck",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "this.isDay()",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "log.debug(preCheck() Skipping: ${app.label} is not scheduled for today)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return null",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "this.busy()",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(atomicState.run = true)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "settings.switches.programWait()",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.runIn(45, checkRunMap)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.unsubAllBut()",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.subscribe(settings.switches, switch.off, cycleOff)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def start = this.now()",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.note(active, ${app.label}: Starting..., d)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def end = this.now()",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "log.debug(preCheck note active ${(end - start)}ms)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "this.isWeather()",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "this.resetEverything()",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ReturnStatement",
                                                        "statement": "return switches.programOff()",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "log.debug(preCheck(): running checkRunMap in 2 seconds)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ReturnStatement",
                                                        "statement": "return this.runIn(2, checkRunMap)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "cycleOn",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "atomicState.run",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "this.isWaterStopped()",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "this.subscribe(settings.switches, switch.off, cycleOff)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "this.subWaterStop()",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "this.resume()",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "java.lang.String newString = ${app.label}: Starting...",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "statement": "If statement",
                                                        "condition": {
                                                            "type": "BooleanExpression",
                                                            "expression": "atomicState.startTime",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "ifBlock": {
                                                            "type": "BlockStatement",
                                                            "statement": "Block statement",
                                                            "children": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "statement": "(atomicState.startTime = this.now())",
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "IfStatement",
                                                                    "statement": "If statement",
                                                                    "condition": {
                                                                        "type": "BooleanExpression",
                                                                        "expression": "atomicState.startTime",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    "ifBlock": {
                                                                        "type": "ExpressionStatement",
                                                                        "statement": "(atomicState.finishTime = null)",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    "elseBlock": null,
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "IfStatement",
                                                                    "statement": "If statement",
                                                                    "condition": {
                                                                        "type": "BooleanExpression",
                                                                        "expression": "state.pauseTime",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    "ifBlock": {
                                                                        "type": "ExpressionStatement",
                                                                        "statement": "(state.pauseTime = null)",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    "elseBlock": null,
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "IfStatement",
                                                                    "statement": "If statement",
                                                                    "condition": {
                                                                        "type": "BooleanExpression",
                                                                        "expression": "state.totalTime",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    "ifBlock": {
                                                                        "type": "BlockStatement",
                                                                        "statement": "Block statement",
                                                                        "children": [
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "statement": "java.lang.String finishTime = new java.util.Date((this.now() + (60000 * state.totalTime).toLong())).format(EE @ h:mm a, location.timeZone)",
                                                                                "children": [
                                                                                    
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "statement": "(newString = ${app.label}: Starting - ETC: $finishTime)",
                                                                                "children": [
                                                                                    
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    "elseBlock": null,
                                                                    "children": [
                                                                        
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "elseBlock": {
                                                            "type": "IfStatement",
                                                            "statement": "If statement",
                                                            "condition": {
                                                                "type": "BooleanExpression",
                                                                "expression": "state.pauseTime",
                                                                "children": [
                                                                    
                                                                ]
                                                            },
                                                            "ifBlock": {
                                                                "type": "BlockStatement",
                                                                "statement": "Block statement",
                                                                "children": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "statement": "def elapsedTime = java.lang.Math.round(((this.now() - state.pauseTime) / 60000))",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "statement": "java.lang.Integer tt = ((state.totalTime + elapsedTime) + 1)",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "statement": "(state.totalTime = tt)",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "statement": "java.lang.String finishTime = new java.util.Date((atomicState.startTime + (60000 * tt).toLong())).format(EE @ h:mm a, location.timeZone)",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "statement": "(state.pauseTime = null)",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "statement": "(newString = ${app.label}: Resuming - New ETC: $finishTime)",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    }
                                                                ]
                                                            },
                                                            "elseBlock": null,
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ReturnStatement",
                                                        "statement": "return this.note(active, newString, d)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "this.subWaterStart()",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ReturnStatement",
                                                        "statement": "return this.note(pause, ${app.label}: Watering paused, ${this.getWaterStopList()}, c)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "cycleOff",
        "arguments": "evt",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "atomicState.run",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def ft = new java.util.Date()",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(atomicState.finishTime = ft)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "java.lang.String finishTime = ft.format(h:mm a, location.timeZone)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.note(finished, ${app.label}: Finished watering at $finishTime, d)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "log.debug(${settings.switches} turned off)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.resetEverything()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "checkRunMap",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "atomicState.run",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def runNowMap = []",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(runNowMap = this.cycleLoop(1))",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "runNowMap",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "this.runIn(60, cycleOn)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "this.subscribe(settings.switches, switch.off, cycleOff)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "statement": "If statement",
                                                        "condition": {
                                                            "type": "BooleanExpression",
                                                            "expression": "atomicState.startTime",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "ifBlock": {
                                                            "type": "ExpressionStatement",
                                                            "statement": "(atomicState.startTime = null)",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "elseBlock": null,
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "statement": "If statement",
                                                        "condition": {
                                                            "type": "BooleanExpression",
                                                            "expression": "state.pauseTime",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "ifBlock": {
                                                            "type": "ExpressionStatement",
                                                            "statement": "(state.pauseTime = null)",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "elseBlock": null,
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "java.lang.String newString = ",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "java.lang.Integer tt = state.totalTime",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "statement": "If statement",
                                                        "condition": {
                                                            "type": "BooleanExpression",
                                                            "expression": "tt",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "ifBlock": {
                                                            "type": "BlockStatement",
                                                            "statement": "Block statement",
                                                            "children": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "statement": "java.lang.Integer hours = (tt / 60)",
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "statement": "java.lang.Integer mins = (tt - (hours * 60))",
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "statement": "java.lang.String hourString = ",
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "statement": "java.lang.String s = ",
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "IfStatement",
                                                                    "statement": "If statement",
                                                                    "condition": {
                                                                        "type": "BooleanExpression",
                                                                        "expression": "(hours > 1)",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    "ifBlock": {
                                                                        "type": "ExpressionStatement",
                                                                        "statement": "(s = s)",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    "elseBlock": null,
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "IfStatement",
                                                                    "statement": "If statement",
                                                                    "condition": {
                                                                        "type": "BooleanExpression",
                                                                        "expression": "(hours > 0)",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    "ifBlock": {
                                                                        "type": "ExpressionStatement",
                                                                        "statement": "(hourString = $hours hour$s & )",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    "elseBlock": null,
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "statement": "(s = s)",
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "IfStatement",
                                                                    "statement": "If statement",
                                                                    "condition": {
                                                                        "type": "BooleanExpression",
                                                                        "expression": "(mins == 1)",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    "ifBlock": {
                                                                        "type": "ExpressionStatement",
                                                                        "statement": "(s = )",
                                                                        "children": [
                                                                            
                                                                        ]
                                                                    },
                                                                    "elseBlock": null,
                                                                    "children": [
                                                                        
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "statement": "(newString = run time: $hourString$mins minute$s:\n)",
                                                                    "children": [
                                                                        
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "elseBlock": null,
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ReturnStatement",
                                                        "statement": "return this.note(active, ${app.label}: Watering in 1 minute, $newString$runNowMap, d)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "this.unsubscribe(settings.switches)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "this.unsubWaterStoppers()",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "switches.programOff()",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "statement": "If statement",
                                                        "condition": {
                                                            "type": "BooleanExpression",
                                                            "expression": "enableManual",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "ifBlock": {
                                                            "type": "ExpressionStatement",
                                                            "statement": "this.subscribe(settings.switches, switch.programOn, manualStart)",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "elseBlock": null,
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "this.note(skipping, ${app.label}: No watering today, d)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "statement": "If statement",
                                                        "condition": {
                                                            "type": "BooleanExpression",
                                                            "expression": "atomicState.run",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "ifBlock": {
                                                            "type": "ReturnStatement",
                                                            "statement": "return (atomicState.run = false)",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "elseBlock": null,
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return log.debug(checkRunMap(): atomicState.run = false)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "cycleLoop",
        "arguments": "int i",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Boolean isDebug = false",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "isDebug",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "log.debug(cycleLoop($i))",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer zone = 1",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer dpw = 0",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer tpw = 0",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer cyc = 0",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer rtime = 0",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def timeMap = [:]",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def pumpMap = ",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def runNowMap = ",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.String soilString = ",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer totalCycles = 0",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer totalTime = 0",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "atomicState.startTime",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(atomicState.startTime = null)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "WhileStatement",
                                "statement": "<not implemented yet for class: org.codehaus.groovy.ast.stmt.WhileStatement>",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "soilString",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "java.lang.String seasonStr = ",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "java.lang.String plus = ",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "java.lang.Float sa = state.seasonAdj",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "((settings.isSeason && (sa != 100.0)) && (sa != 0.0))",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "java.lang.Float sadj = (sa - 100.0)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "statement": "If statement",
                                                        "condition": {
                                                            "type": "BooleanExpression",
                                                            "expression": "(sadj > 0.0)",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "ifBlock": {
                                                            "type": "ExpressionStatement",
                                                            "statement": "(plus = +)",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "elseBlock": null,
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "java.lang.Integer iadj = java.lang.Math.round(sadj)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "statement": "If statement",
                                                        "condition": {
                                                            "type": "BooleanExpression",
                                                            "expression": "(iadj != 0)",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "ifBlock": {
                                                            "type": "ExpressionStatement",
                                                            "statement": "(seasonStr = Adjusting $plus$iadj% for weather forecast\n)",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "elseBlock": null,
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.note(moisture, ${app.label} Sensor status:\n$seasonStr$soilString, m)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "runNowMap",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return runNowMap",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "switches.settingsMap(timeMap, 4002)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.runIn(30, writeCycles)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer pDelay = 0",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(settings.pumpDelay && settings.pumpDelay.isNumber())",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(pDelay = settings.pumpDelay.toInteger())",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(totalTime += java.lang.Math.round(((pDelay * (totalCycles - 1)) / 60.0)))",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.totalTime = totalTime)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "state.pauseTime",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(state.pauseTime = null)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return (runNowMap + pumpMap)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "writeCycles",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def cyclesMap = [:]",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(cyclesMap.1 = this.pumpDelayString())",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer zone = 1",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer cycle = 0",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "WhileStatement",
                                "statement": "<not implemented yet for class: org.codehaus.groovy.ast.stmt.WhileStatement>",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return switches.settingsMap(cyclesMap, 4001)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "resume",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(resume())",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return settings.switches.zon()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "syncOn",
        "arguments": "evt",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "((settings.sync.currentSwitch == off) && (settings.sync.currentStatus != pause))",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.resetEverything()",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "java.util.Random rand = new java.util.Random()",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "java.lang.Integer randomSeconds = (rand.nextInt(120) + 15)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.runIn(randomSeconds, preCheck)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.note(schedule, ${app.label}: ${settings.sync} finished, starting in $randomSeconds seconds, c)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "waterStop",
        "arguments": "evt",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(waterStop: ${evt.displayName})",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.unschedule(cycleOn)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.unsubscribe(settings.switches)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.subWaterStart()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "state.pauseTime",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(state.pauseTime = this.now())",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "java.lang.String cond = evt.value",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "SwitchStatement",
                                            "statement": "<not implemented yet for class: org.codehaus.groovy.ast.stmt.SwitchStatement>",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.note(pause, ${app.label}: Watering paused - ${evt.displayName} $cond, c)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(settings.switches.currentSwitch != off)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.runIn(30, subOff)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return settings.switches.off()",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "ReturnStatement",
                                    "statement": "return this.subscribe(settings.switches, switch.off, cycleOff)",
                                    "children": [
                                        
                                    ]
                                },
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "subOff",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.subscribe(settings.switches, switch.off, offPauseCheck)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "offPauseCheck",
        "arguments": " evt ",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.unsubscribe(settings.switches)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.subscribe(settings.switches, switch.off, cycleOff)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(settings.switches.currentStatus != pause)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.cycleOff(evt)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "waterStart",
        "arguments": "evt",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "this.isWaterStopped()",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def cDelay = 10",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(settings.contactDelay > 10)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "ExpressionStatement",
                                                "statement": "(cDelay = settings.contactDelay)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.runIn(cDelay, cycleOn)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.unsubscribe(settings.switches)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.subWaterStop()",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "log.debug(waterStart(): enabling device is ${evt.device} ${evt.value})",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "java.lang.String cond = evt.value",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "SwitchStatement",
                                            "statement": "<not implemented yet for class: org.codehaus.groovy.ast.stmt.SwitchStatement>",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.note(pause, ${app.label}: ${evt.displayName} $cond, watering in $cDelay seconds, c)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return log.debug(waterStart(): one down - ${evt.displayName})",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "moisture",
        "arguments": "int i",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Boolean isDebug = false",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "isDebug",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "log.debug(moisture($i))",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def endMsecs = 0",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "((i == 0) || settings.sensor$i)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return [1, ]",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer spHum = this.getDrySp(i)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer hours = 48",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def yesterday = new java.util.Date((this.now() - (3600000 * hours).toLong()))",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Float latestHum = settings.sensor$i.latestValue(humidity).toFloat()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def lastHumDate = settings.sensor$i.latestState(humidity).date",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(lastHumDate < yesterday)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.note(warning, ${app.label}: Please check sensor ${settings.sensor$i}, no humidity reports in the last $hours hours, a)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(latestHum < spHum)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "ExpressionStatement",
                                                "statement": "(latestHum = (spHum - 1.0))",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "elseBlock": {
                                                "type": "ExpressionStatement",
                                                "statement": "(latestHum = (spHum + 0.99))",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "settings.learn",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(latestHum <= spHum.toFloat())",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "statement": "return [1, ${settings.name$i}, Watering: ${settings.sensor$i} reads $latestHum%, SP is $spHum%\n]",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "statement": "return [0, ${settings.name$i}, Skipping: ${settings.sensor$i} reads $latestHum%, SP is $spHum%\n]",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer tpw = this.getTPW(i)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer dpw = this.getDPW(i)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer cpd = this.cycles(i)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "isDebug",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "log.debug(moisture($i): tpw: $tpw, dpw: $dpw, cycles: $cpd (before adjustment))",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Float diffHum = 0.0",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(latestHum > 0.0)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(diffHum = ((spHum - latestHum) / 100.0))",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(diffHum = 0.02)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.note(warning, ${app.label}: Please check sensor ${settings.sensor$i}, it is currently reading 0%, a)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer daysA = state.daysAvailable",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer minimum = (cpd * dpw)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(minimum < daysA)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(minimum = daysA)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer tpwAdjust = 0",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(diffHum > 0.01)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(tpwAdjust = java.lang.Math.round(((((tpw * diffHum) + 0.5) * dpw) * cpd)))",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "java.lang.Float adjFactor = (2.0 / daysA)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(tpwAdjust > (tpw * adjFactor))",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "ExpressionStatement",
                                                "statement": "(tpwAdjust = java.lang.Math.round(((tpw * adjFactor) + 0.5)))",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(tpwAdjust < minimum)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "ExpressionStatement",
                                                "statement": "(tpwAdjust = minimum)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "IfStatement",
                                    "statement": "If statement",
                                    "condition": {
                                        "type": "BooleanExpression",
                                        "expression": "(diffHum < -0.01)",
                                        "children": [
                                            
                                        ]
                                    },
                                    "ifBlock": {
                                        "type": "BlockStatement",
                                        "statement": "Block statement",
                                        "children": [
                                            {
                                                "type": "IfStatement",
                                                "statement": "If statement",
                                                "condition": {
                                                    "type": "BooleanExpression",
                                                    "expression": "(diffHum < -0.05)",
                                                    "children": [
                                                        
                                                    ]
                                                },
                                                "ifBlock": {
                                                    "type": "ExpressionStatement",
                                                    "statement": "(diffHum = -0.05)",
                                                    "children": [
                                                        
                                                    ]
                                                },
                                                "elseBlock": null,
                                                "children": [
                                                    
                                                ]
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "statement": "(tpwAdjust = java.lang.Math.round(((((tpw * diffHum) - 0.5) * dpw) * cpd)))",
                                                "children": [
                                                    
                                                ]
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "statement": "java.lang.Float adjFactor = (-0.6667 / daysA)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            {
                                                "type": "IfStatement",
                                                "statement": "If statement",
                                                "condition": {
                                                    "type": "BooleanExpression",
                                                    "expression": "(tpwAdjust < (tpw * adjFactor))",
                                                    "children": [
                                                        
                                                    ]
                                                },
                                                "ifBlock": {
                                                    "type": "ExpressionStatement",
                                                    "statement": "(tpwAdjust = java.lang.Math.round(((tpw * adjFactor) - 0.5)))",
                                                    "children": [
                                                        
                                                    ]
                                                },
                                                "elseBlock": null,
                                                "children": [
                                                    
                                                ]
                                            },
                                            {
                                                "type": "IfStatement",
                                                "statement": "If statement",
                                                "condition": {
                                                    "type": "BooleanExpression",
                                                    "expression": "(tpwAdjust > (-1 * minimum))",
                                                    "children": [
                                                        
                                                    ]
                                                },
                                                "ifBlock": {
                                                    "type": "ExpressionStatement",
                                                    "statement": "(tpwAdjust = (-1 * minimum))",
                                                    "children": [
                                                        
                                                    ]
                                                },
                                                "elseBlock": null,
                                                "children": [
                                                    
                                                ]
                                            }
                                        ]
                                    },
                                    "elseBlock": null,
                                    "children": [
                                        
                                    ]
                                },
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer seasonAdjust = 0",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "isSeason",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "java.lang.Float sa = state.seasonAdj",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "((sa != 100.0) && (sa != 0.0))",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "java.lang.Float sadj = (sa - 100.0)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "statement": "If statement",
                                                        "condition": {
                                                            "type": "BooleanExpression",
                                                            "expression": "(sa > 0.0)",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "ifBlock": {
                                                            "type": "ExpressionStatement",
                                                            "statement": "(seasonAdjust = java.lang.Math.round((((sadj / 100.0) * tpw) + 0.5)))",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "elseBlock": {
                                                            "type": "ExpressionStatement",
                                                            "statement": "(seasonAdjust = java.lang.Math.round((((sadj / 100.0) * tpw) - 0.5)))",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "isDebug",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "log.debug(moisture($i): diffHum: $diffHum, tpwAdjust: $tpwAdjust seasonAdjust: $seasonAdjust)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer newTPW = ((tpw + tpwAdjust) + seasonAdjust)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer perDay = 20",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def perD = settings.perDay$i",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "perD",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(perDay = perD.toInteger())",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(perDay == 0)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(perDay = (daysA * cpd))",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(newTPW < perDay)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(newTPW = perDay)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer adjusted = 0",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "((tpwAdjust + seasonAdjust) > 0)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "java.lang.Integer maxTPW = (daysA * 120)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(newTPW > maxTPW)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "ExpressionStatement",
                                                "statement": "(newTPW = maxTPW)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(newTPW > (maxTPW * 0.75))",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "ExpressionStatement",
                                                "statement": "this.note(warning, ${app.label}: Please check ${settings[sensor$i]}, ${settings.name$i} time per week seems high: $newTPW mins/week, a)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(state.tpwMap[(i - 1)] != newTPW)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(state.tpwMap[(i - 1)] = newTPW)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(dpw = this.initDPW(i))",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(adjusted = (newTPW - tpw))",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "IfStatement",
                                    "statement": "If statement",
                                    "condition": {
                                        "type": "BooleanExpression",
                                        "expression": "((tpwAdjust + seasonAdjust) < 0)",
                                        "children": [
                                            
                                        ]
                                    },
                                    "ifBlock": {
                                        "type": "BlockStatement",
                                        "statement": "Block statement",
                                        "children": [
                                            {
                                                "type": "ExpressionStatement",
                                                "statement": "(minimum = (cpd * daysA))",
                                                "children": [
                                                    
                                                ]
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "statement": "java.lang.Integer minLimit = 0",
                                                "children": [
                                                    
                                                ]
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "statement": "def minL = settings.minWeek$i",
                                                "children": [
                                                    
                                                ]
                                            },
                                            {
                                                "type": "IfStatement",
                                                "statement": "If statement",
                                                "condition": {
                                                    "type": "BooleanExpression",
                                                    "expression": "minL",
                                                    "children": [
                                                        
                                                    ]
                                                },
                                                "ifBlock": {
                                                    "type": "ExpressionStatement",
                                                    "statement": "(minLimit = minL.toInteger())",
                                                    "children": [
                                                        
                                                    ]
                                                },
                                                "elseBlock": null,
                                                "children": [
                                                    
                                                ]
                                            },
                                            {
                                                "type": "IfStatement",
                                                "statement": "If statement",
                                                "condition": {
                                                    "type": "BooleanExpression",
                                                    "expression": "(minLimit > 0)",
                                                    "children": [
                                                        
                                                    ]
                                                },
                                                "ifBlock": {
                                                    "type": "BlockStatement",
                                                    "statement": "Block statement",
                                                    "children": [
                                                        {
                                                            "type": "IfStatement",
                                                            "statement": "If statement",
                                                            "condition": {
                                                                "type": "BooleanExpression",
                                                                "expression": "(newTPW < minLimit)",
                                                                "children": [
                                                                    
                                                                ]
                                                            },
                                                            "ifBlock": {
                                                                "type": "ExpressionStatement",
                                                                "statement": "(newTPW = minLimit)",
                                                                "children": [
                                                                    
                                                                ]
                                                            },
                                                            "elseBlock": null,
                                                            "children": [
                                                                
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "elseBlock": {
                                                    "type": "IfStatement",
                                                    "statement": "If statement",
                                                    "condition": {
                                                        "type": "BooleanExpression",
                                                        "expression": "(newTPW < minimum)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    "ifBlock": {
                                                        "type": "BlockStatement",
                                                        "statement": "Block statement",
                                                        "children": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "statement": "(newTPW = minimum)",
                                                                "children": [
                                                                    
                                                                ]
                                                            },
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "statement": "this.note(warning, ${app.label}: Please check ${settings.sensor$i}, ${settings.name$i} time per week is very low: $newTPW mins/week, a)",
                                                                "children": [
                                                                    
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "elseBlock": null,
                                                    "children": [
                                                        
                                                    ]
                                                },
                                                "children": [
                                                    
                                                ]
                                            },
                                            {
                                                "type": "IfStatement",
                                                "statement": "If statement",
                                                "condition": {
                                                    "type": "BooleanExpression",
                                                    "expression": "(state.tpwMap[(i - 1)] != newTPW)",
                                                    "children": [
                                                        
                                                    ]
                                                },
                                                "ifBlock": {
                                                    "type": "BlockStatement",
                                                    "statement": "Block statement",
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "statement": "(state.tpwMap[(i - 1)] = newTPW)",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "statement": "(dpw = this.initDPW(i))",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "statement": "(adjusted = (newTPW - tpw))",
                                                            "children": [
                                                                
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "elseBlock": null,
                                                "children": [
                                                    
                                                ]
                                            }
                                        ]
                                    },
                                    "elseBlock": null,
                                    "children": [
                                        
                                    ]
                                },
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.String moistureSum = ",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.String adjStr = ",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.String plus = ",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(adjusted > 0)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(plus = +)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(adjusted != 0)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(adjStr = , $plus$adjusted min)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(java.lang.Math.abs(adjusted) > 1)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "(adjStr = $adjStrs)",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(diffHum >= 0.0)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(moistureSum = > ${settings.name$i}, Water: ${settings.sensor$i} @ $latestHum% ($spHum%)$adjStr ($newTPW min/wk)\n)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return [1, moistureSum]",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(moistureSum = > ${settings.name$i}, Skip: ${settings.sensor$i} @ $latestHum% ($spHum%)$adjStr ($newTPW min/wk)\n)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return [0, moistureSum]",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return [0, moistureSum]",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "note",
        "arguments": "String statStr, String msg, String msgType",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug($statStr: $msg)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Boolean notifyController = true",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(settings.notify || settings.logAll)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "java.lang.String spruceMsg = Spruce $msg",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "SwitchStatement",
                                            "statement": "<not implemented yet for class: org.codehaus.groovy.ast.stmt.SwitchStatement>",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "notifyController",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(atomicState.run || ((settings.switches.currentSwitch == off) && (settings.switches.currentStatus != pause)))",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "statement": "return settings.switches.notify(statStr, msg)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "statement": "return settings.switches.notify(settings.switches.currentStatus, msg)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "sendIt",
        "arguments": "String msg",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(location.contactBookEnabled && settings.recipients)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.sendNotificationToContacts(msg, settings.recipients, [event:true])",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.sendPush(msg)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "setSeason",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Boolean isDebug = false",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "isDebug",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "ExpressionStatement",
                                    "statement": "log.debug(setSeason())",
                                    "children": [
                                        
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer zone = 1",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "BlockStatement",
                                "statement": "Block statement",
                                "children": [
                                    {
                                        "type": "WhileStatement",
                                        "statement": "<not implemented yet for class: org.codehaus.groovy.ast.stmt.WhileStatement>",
                                        "children": [
                                            
                                        ]
                                    },
                                    {
                                        "type": "ReturnStatement",
                                        "statement": "return null",
                                        "children": [
                                            
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "getCity",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.String wzipcode = this.zipString()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.String city = <not implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression$1>",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "TryCatchStatement",
                                "statement": "<not implemented yet for class: org.codehaus.groovy.ast.stmt.TryCatchStatement>",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return city",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "getConditions",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.String wzipcode = this.zipString()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def conditionsData = <not implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression$1>",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "TryCatchStatement",
                                "statement": "<not implemented yet for class: org.codehaus.groovy.ast.stmt.TryCatchStatement>",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return conditionsData",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "getForecast",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.String wzipcode = this.zipString()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def forecastData = <not implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression$1>",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "TryCatchStatement",
                                "statement": "<not implemented yet for class: org.codehaus.groovy.ast.stmt.TryCatchStatement>",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return forecastData",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "getRainToday",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def conditionsData = this.getConditions()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "conditionsData",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.note(warning, ${app.label}: Please check Zipcode/PWS setting, error: null, a)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "java.lang.Float TRain = 0.0",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "conditionsData.precip24Hour.isNumber()",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(TRain = conditionsData.precip24Hour.toFloat())",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "statement": "If statement",
                                                        "condition": {
                                                            "type": "BooleanExpression",
                                                            "expression": "(TRain > 25.0)",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "ifBlock": {
                                                            "type": "ExpressionStatement",
                                                            "statement": "(TRain = 25.0)",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "elseBlock": {
                                                            "type": "IfStatement",
                                                            "statement": "If statement",
                                                            "condition": {
                                                                "type": "BooleanExpression",
                                                                "expression": "(TRain < 0.0)",
                                                                "children": [
                                                                    
                                                                ]
                                                            },
                                                            "ifBlock": {
                                                                "type": "ExpressionStatement",
                                                                "statement": "(TRain = 0.0)",
                                                                "children": [
                                                                    
                                                                ]
                                                            },
                                                            "elseBlock": null,
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "log.debug(getRainToday(): ${conditionsData.precip24Hour} / $TRain)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "java.lang.Integer day = this.getWeekDay()",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(day == 7)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "ExpressionStatement",
                                                "statement": "(day = 0)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return (state.Rain[day] = (java.lang.Float) TRain)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "getDPWDays",
        "arguments": "int dpw",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(((dpw && dpw.isNumber()) && (dpw >= 1)) && (dpw <= 7))",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return state.DPWDays$dpw",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "ReturnStatement",
                                    "statement": "return [0, 0, 0, 0, 0, 0, 0]",
                                    "children": [
                                        
                                    ]
                                },
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "createDPWMap",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.DPWDays1 = [])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.DPWDays2 = [])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.DPWDays3 = [])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.DPWDays4 = [])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.DPWDays5 = [])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.DPWDays6 = [])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.DPWDays7 = [])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "int[][] dayDistance = [[0, 1, 2, 3, 3, 2, 1], [1, 0, 1, 2, 3, 3, 2], [2, 1, 0, 1, 2, 3, 3], [3, 2, 1, 0, 1, 2, 3], [3, 3, 2, 1, 0, 1, 2], [2, 3, 3, 2, 1, 0, 1], [1, 2, 3, 3, 2, 1, 0]]",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def ndaysAvailable = this.daysAvailable()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.Integer i = 0",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "int[] daysAvailable = [0, 0, 0, 0, 0, 0, 0]",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "settings.days",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(settings.days.contains(Even) || settings.days.contains(Odd))",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "statement": "return null",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "settings.days.contains(Monday)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(daysAvailable[i] = 0)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(i++)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "settings.days.contains(Tuesday)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(daysAvailable[i] = 1)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(i++)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "settings.days.contains(Wednesday)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(daysAvailable[i] = 2)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(i++)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "settings.days.contains(Thursday)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(daysAvailable[i] = 3)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(i++)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "settings.days.contains(Friday)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(daysAvailable[i] = 4)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(i++)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "settings.days.contains(Saturday)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(daysAvailable[i] = 5)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(i++)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "settings.days.contains(Sunday)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(daysAvailable[i] = 6)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(i++)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(i != ndaysAvailable)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "log.debug(ERROR: days and daysAvailable do not match in setup - overriding)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "log.debug($i $ndaysAvailable)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(ndaysAvailable = i)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(state.daysAvailable = i)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(daysAvailable = [0, 1, 2, 3, 4, 5, 6])",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def maxday = -1",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def max = -1",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def dDays = [{}]",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "int[][] runDays = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ForStatement",
                                "statement": "<not implemented yet for class: org.codehaus.groovy.ast.stmt.ForStatement>",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.DPWDays1 = runDays[0])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.DPWDays2 = runDays[1])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.DPWDays3 = runDays[2])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.DPWDays4 = runDays[3])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.DPWDays5 = runDays[4])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.DPWDays6 = runDays[5])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return (state.DPWDays7 = runDays[6])",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "zoneSetPage1",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.app = 1)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.zoneSetPage()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "zoneSetPage2",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.app = 2)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.zoneSetPage()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "zoneSetPage3",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.app = 3)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.zoneSetPage()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "zoneSetPage4",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.app = 4)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.zoneSetPage()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "zoneSetPage5",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.app = 5)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.zoneSetPage()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "zoneSetPage6",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.app = 6)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.zoneSetPage()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "zoneSetPage7",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.app = 7)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.zoneSetPage()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "zoneSetPage8",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.app = 8)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.zoneSetPage()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "zoneSetPage9",
        "arguments": "i",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.app = 9)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.zoneSetPage()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "zoneSetPage10",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.app = 10)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.zoneSetPage()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "zoneSetPage11",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.app = 11)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.zoneSetPage()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "zoneSetPage12",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.app = 12)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.zoneSetPage()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "zoneSetPage13",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.app = 13)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.zoneSetPage()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "zoneSetPage14",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.app = 14)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.zoneSetPage()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "zoneSetPage15",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.app = 15)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.zoneSetPage()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    },
    {
        "functionName": "zoneSetPage16",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.app = 16)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.zoneSetPage()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "Setup schedules for Spruce irrigation controller"
    }
]