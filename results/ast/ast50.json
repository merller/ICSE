[
    {
        "functionName": "installed",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(Installing with settings: $settings)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.initialize()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "SmartApp for end to end SmartThings scenarios via OpenT2T"
    },
    {
        "functionName": "updated",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(Updating with settings: $settings)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(state.deviceSubscriptionMap == null)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(state.deviceSubscriptionMap = [:])",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "log.debug(deviceSubscriptionMap created.)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(state.locationSubscriptionMap == null)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(state.locationSubscriptionMap = [:])",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "log.debug(locationSubscriptionMap created.)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(state.verificationKeyMap == null)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(state.verificationKeyMap = [:])",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "log.debug(verificationKeyMap created.)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "this.unsubscribe()",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.registerAllDeviceSubscriptions()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "SmartApp for end to end SmartThings scenarios via OpenT2T"
    },
    {
        "functionName": "initialize",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(Initializing with settings: $settings)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.deviceSubscriptionMap = [:])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(deviceSubscriptionMap created.)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.locationSubscriptionMap = [:])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(locationSubscriptionMap created.)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "(state.verificationKeyMap = [:])",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(verificationKeyMap created.)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.registerAllDeviceSubscriptions()",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "SmartApp for end to end SmartThings scenarios via OpenT2T"
    },
    {
        "functionName": "registerAllDeviceSubscriptions",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ReturnStatement",
                                "statement": "return this.registerChangeHandler(inputs)",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "SmartApp for end to end SmartThings scenarios via OpenT2T"
    },
    {
        "functionName": "registerChangeHandler",
        "arguments": "myList",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ReturnStatement",
                                "statement": "return myList.each({ java.lang.Object myDevice -> ... })",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "SmartApp for end to end SmartThings scenarios via OpenT2T"
    },
    {
        "functionName": "registerDeviceChange",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def subscriptionEndpt = params.subscriptionURL",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def deviceId = params.deviceId",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def myDevice = this.findDevice(deviceId)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(myDevice == null)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.httpError(404, Cannot find device with device ID $deviceId.)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def theAtts = myDevice.supportedAttributes",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "TryCatchStatement",
                                "statement": "<not implemented yet for class: org.codehaus.groovy.ast.stmt.TryCatchStatement>",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.info(Current subscription map is ${state.deviceSubscriptionMap})",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.info(Current verification key map is ${state.verificationKeyMap})",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return [succeed]",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "SmartApp for end to end SmartThings scenarios via OpenT2T"
    },
    {
        "functionName": "unregisterDeviceChange",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def subscriptionEndpt = params.subscriptionURL",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def deviceId = params.deviceId",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def myDevice = this.findDevice(deviceId)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(myDevice == null)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.httpError(404, Cannot find device with device ID $deviceId.)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "TryCatchStatement",
                                "statement": "<not implemented yet for class: org.codehaus.groovy.ast.stmt.TryCatchStatement>",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.info(Current subscription map is ${state.deviceSubscriptionMap})",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return log.info(Current verification key map is ${state.verificationKeyMap})",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "SmartApp for end to end SmartThings scenarios via OpenT2T"
    },
    {
        "functionName": "registerDeviceGraph",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def subscriptionEndpt = params.subscriptionURL",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "((subscriptionEndpt != null) && (subscriptionEndpt != undefined))",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.subscribe(location, DeviceCreated, locationEventHandler, [filterEvents:false])",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.subscribe(location, DeviceUpdated, locationEventHandler, [filterEvents:false])",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "this.subscribe(location, DeviceDeleted, locationEventHandler, [filterEvents:false])",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(state.locationSubscriptionMap[location.id] == null)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "state.locationSubscriptionMap.put(location.id, [subscriptionEndpt])",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "log.info(Added subscription URL: $subscriptionEndpt for Location ${location.name})",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": {
                                                "type": "IfStatement",
                                                "statement": "If statement",
                                                "condition": {
                                                    "type": "BooleanExpression",
                                                    "expression": "state.locationSubscriptionMap[location.id].contains(subscriptionEndpt)",
                                                    "children": [
                                                        
                                                    ]
                                                },
                                                "ifBlock": {
                                                    "type": "BlockStatement",
                                                    "statement": "Block statement",
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "statement": "(state.locationSubscriptionMap[location.id] << subscriptionEndpt)",
                                                            "children": [
                                                                
                                                            ]
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "statement": "log.info(Added subscription URL: $subscriptionEndpt for Location ${location.name})",
                                                            "children": [
                                                                
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "elseBlock": null,
                                                "children": [
                                                    
                                                ]
                                            },
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "IfStatement",
                                            "statement": "If statement",
                                            "condition": {
                                                "type": "BooleanExpression",
                                                "expression": "(params.key != null)",
                                                "children": [
                                                    
                                                ]
                                            },
                                            "ifBlock": {
                                                "type": "BlockStatement",
                                                "statement": "Block statement",
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "(state.verificationKeyMap[subscriptionEndpt] = params.key)",
                                                        "children": [
                                                            
                                                        ]
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "statement": "log.info(Added verification key: ${params.key} for $subscriptionEndpt)",
                                                        "children": [
                                                            
                                                        ]
                                                    }
                                                ]
                                            },
                                            "elseBlock": null,
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "log.info(Current location subscription map is ${state.locationSubscriptionMap})",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "log.info(Current verification key map is ${state.verificationKeyMap})",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return [succeed]",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "statement": "return this.httpError(400, missing input parameter: subscriptionURL)",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "SmartApp for end to end SmartThings scenarios via OpenT2T"
    },
    {
        "functionName": "unregisterDeviceGraph",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def subscriptionEndpt = params.subscriptionURL",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "TryCatchStatement",
                                "statement": "<not implemented yet for class: org.codehaus.groovy.ast.stmt.TryCatchStatement>",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.info(Current location subscription map is ${state.locationSubscriptionMap})",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return log.info(Current verification key map is ${state.verificationKeyMap})",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "SmartApp for end to end SmartThings scenarios via OpenT2T"
    },
    {
        "functionName": "deviceEventHandler",
        "arguments": "evt",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def evtDevice = evt.device",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def evtDeviceType = this.getDeviceType(evtDevice)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def deviceData = []",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(evtDeviceType == thermostat)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(deviceData = [name:evtDevice.displayName, id:evtDevice.id, status:evtDevice.status, deviceType:evtDeviceType, manufacturer:evtDevice.manufacturerName, ... ])",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(deviceData = [name:evtDevice.displayName, id:evtDevice.id, status:evtDevice.status, deviceType:evtDeviceType, manufacturer:evtDevice.manufacturerName, ... ])",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(evt.data != null)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "def evtData = this.parseJson(evt.data)",
                                            "children": [
                                                
                                            ]
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "log.info(Received event for ${evtDevice.displayName}, data: $evtData,  description: ${evt.descriptionText})",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": null,
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def params = [body:deviceData]",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(Current subscription urls for ${evtDevice.displayName} is ${state.deviceSubscriptionMap[evtDevice.id]})",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return state.deviceSubscriptionMap[evtDevice.id].each({ ... })",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "SmartApp for end to end SmartThings scenarios via OpenT2T"
    },
    {
        "functionName": "locationEventHandler",
        "arguments": "evt",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.info(Received event for location ${location.name}/${location.id}, Event: ${evt.name}, description: ${evt.descriptionText}, apiServerUrl: ${this.apiServerUrl()})",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "SwitchStatement",
                                "statement": "<not implemented yet for class: org.codehaus.groovy.ast.stmt.SwitchStatement>",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "SmartApp for end to end SmartThings scenarios via OpenT2T"
    },
    {
        "functionName": "byteArrayToString",
        "arguments": "byte[] data",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.math.BigInteger bigInteger = new java.math.BigInteger(1, data)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "java.lang.String hash = bigInteger.toString(16)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return hash",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "SmartApp for end to end SmartThings scenarios via OpenT2T"
    },
    {
        "functionName": "getDevices",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def deviceData = []",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "inputs?.each({ ... })",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(getDevices, return: $deviceData)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return deviceData",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "SmartApp for end to end SmartThings scenarios via OpenT2T"
    },
    {
        "functionName": "getDevice",
        "arguments": "",
        "ast": [
            {
                "type": "BlockStatement",
                "statement": "Block statement",
                "children": [
                    {
                        "type": "BlockStatement",
                        "statement": "Block statement",
                        "children": [
                            {
                                "type": "ExpressionStatement",
                                "statement": "def it = this.findDevice(params.id)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def deviceType = this.getDeviceType(it)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "def device = <not implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression$1>",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "IfStatement",
                                "statement": "If statement",
                                "condition": {
                                    "type": "BooleanExpression",
                                    "expression": "(deviceType == thermostat)",
                                    "children": [
                                        
                                    ]
                                },
                                "ifBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(device = [name:it.displayName, id:it.id, status:it.status, deviceType:deviceType, manufacturer:it.manufacturerName, model:it.modelName, ... ])",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "elseBlock": {
                                    "type": "BlockStatement",
                                    "statement": "Block statement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "statement": "(device = [name:it.displayName, id:it.id, status:it.status, deviceType:deviceType, manufacturer:it.manufacturerName, model:it.modelName, ... ])",
                                            "children": [
                                                
                                            ]
                                        }
                                    ]
                                },
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ExpressionStatement",
                                "statement": "log.debug(getDevice, return: $device)",
                                "children": [
                                    
                                ]
                            },
                            {
                                "type": "ReturnStatement",
                                "statement": "return device",
                                "children": [
                                    
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "docstring": "SmartApp for end to end SmartThings scenarios via OpenT2T"
    }
]