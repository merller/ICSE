[
    {
        "code": "\nlet Invitetimes=0;\nlet Rejecttimes=0;\nfunction sendEmail() {\nif(event.Date==Friday){\nevent.sendEmail(friend,\"How about a drink tonight?\");\n        Invitetimes++;\nif(event.Noreply) Rejecttimes--;\nif (Invitetimes==Rejecttimes){\n        event.sendEmail(friend,\"shame on u\");\n}\n}\n}\n",
        "accurate_docstring": "When it is Friday, send my friend an email and plus the invite times. If he doesn't reply, plus the reject time and if the reject time equal the invite time, send he another email.",
        "docstring": "Send my friend an email to invite him on a deal, if he doesn't reply, send him another email.",
        "general_docstring": "Invite my friend to a drink"
    },
    {
        "code": "\nfunction turnOnFragranceMachine() {\n event.turnOnFragranceMachine();\n}\nfunction setAirConditionerTemperature(temperature) {\n  console.log(`Setting air conditioner temperature to ${temperature}℃`);\n    event.setAirConditionerTemperature(temperature);\n}\nfunction adjustLighting(lightIds, temperature) {\n     lightIds.forEach(id => {\n              event.turnOnlight(id);\n                event.changelight(id, temperature);\n       });\n}\nfunction playHappyBirthday(){\n event.playMusic('happy birthday');\n}\nfunction displayPhotos(){\n  event.turnOnScreen();\n getphoto().forEach(photo=>{setTimeout(()=>{event.display(photo)},1000);})                          //每张照片轮播一秒\n}\neventBus.on('fontDoorMovement',()=>{\n        adjustLighting(getLightId(),1000);\n    playHappyBirthday();\n      displayPhotos();\n})\nfunction  setupBirthdayScene(){\n setAirConditionerTemperature(23);\nturnOnFragranceMachine();\n      setTimeout(()=>eventBus.emit('fontDoorMovement'),1000);\n}",
        "accurate_docstring": "The air conditioner maintains a stable temperature of 23°C. Turn on the aroma diffuser. If motion is detected at the front door, turn on all lights and adjust them to a warm light of 1000K, play \"Happy Birthday\" music, and display an electronic album on the screen, with each photo rotating every second.",
        "docstring": "Turn the lights transition to warm hues, play songs, an electronic album rotates on the screen, turn on the airconditioner, and the fragrancemachine.",
        "general_docstring": "A cozy birthday party with lights, music, and a slideshow of photos rotating, along with a comfortable temperature and pleasant aroma."
    },
    {
        "code": "\nfunction controlChristmasLights(){\n  while(1){\n             turnOnChristmasLights();\n         setTimeout(() => {\n                     event.turnOffChristmasLights();\n               }, duration * 1000);\n      }\n\n}\nfunction playMerryChristmas(){\n        event.playMusic('Merry Christmas');\n}\nfunction ChangeAmbianceLights(){\n  event.turnOnAmbianceLights();\n lightIds.forEach(id => {\n event.changelight(id, 1000);\n   });\n}\nfunction controlProjectors(){\n event.turnOnProjectors();\nevent.ProjectorsDisplay(\"Santa Claus.jpeg\");\n   getProjects().action=\"rotate\";\n}\n",
        "accurate_docstring": "Control the Christmas lights. play Merry Christmas music. change the ambiance lights and control the projectors.",
        "docstring": "Christmas lights flicker, songs play, ambiance lights set to warm tones, and a projector projects images.",
        "general_docstring": "The lights flicker, music plays, warm ambiance, and rotating images projected."
    },
    {
        "code": "\nfunction adjustLighting(lightIds, temperature) {\nlightIds.forEach(id => {\n  event.changelight(id, temperature);\n});\n}\n\nfunction playMusic(track, duration) {\nevent.playMusic(track);\nsetTimeout(() => {\n     event.stopMusic(track);\n}, duration * 1000);\n}\n\nfunction controlGroundLights(duration) {\nevent.turnOnGroundLights();\nsetTimeout(() => {\n     event.turnOffGroundLights();\n}, duration * 1000);\n}\n\nfunction setAirConditionerTemperature(temperature) {\nconsole.log(`Setting air conditioner temperature to ${temperature}℃`);\nevent.setAirConditionerTemperature(temperature);\n}\n\nfunction turnOnFragranceMachine() {\nevent.turnOnFragranceMachine();\n}\n",
        "accurate_docstring": "If movement is detected at the side door (groom’s entrance), adjust the top lights 1, 2, 3 to 4500K, control the sound system to play the music ‘Love so sweet’ for 10 seconds; if movement is detected at the main door (bride’s entrance), adjust the top lights 4, 5, 6 to 3500K, control the sound system to play the music ‘Ave Maria’ for 10 seconds; whenever the hallway sensor detects movement, turn on the floor lights, and turn them off after 2 seconds; maintain the air conditioning temperature at 23°C; 5) turn on the fragrance diffuser.",
        "docstring": "A romantic Western-style wedding featuring cool-toned lighting. Different music accompanies the entrance of the groom and bride. Lights change with movement, maintaining a comfortable temperature and introducing fragrance.",
        "general_docstring": "A romantic Western-style scene with the entrance of the groom and bride"
    },
    {
        "code": "\nfunction setAirConditionerTemperature(temperature) {\n        console.log(`Setting air conditioner temperature to ${temperature}℃`);\n  event.setAirConditionerTemperature(temperature);\n}\nfunction controlCurtains(command){\n if(command=='close')\n          event.closeCurtains();\n        else if(command=='open') \nevent.openCurtains();\n}\nfunction controlLights(command){\n     if(command=='open')\n           event.turnOnLights();\n   else if(command=='close')\n             event.turnOffLights();\n}\nfunction playMovie(name){\n    event.playMovie(name);\n}\neventBus.on('movieNightStart', () => {\n     playMusic(\"Cinematic Soundtrack\", 120);\n controlLights('close');\n       controlCurtains('close');\n});\neventBus.on('movieNightEnd', () => {\n    stopMusic(\"Cinematic Soundtrack\");\n    controlLights('open');\n        controlCurtains('open');\n});\nfunction setupMovieScene(){\n      setAirConditionerTemperature(23);\n     eventBus.emit('movieNightStart');\n       playMovie('The Shawshank Redemption');\n        eventBus.emit('movieNightEnd');\n}\nsetupMovieScene();\n",
        "accurate_docstring": "At the beginning of the home theater scene, play the movie soundtrack ‘Cinematic Soundtrack’ and turn off the lights and curtains. When the home theater scene ends, stop playing the movie soundtrack and turn on the lights and curtains.",
        "docstring": "In the home theater scene, start by playing the movie soundtrack, turning off the lights and closing the curtains. At the end, stop playing the soundtrack and turn on the lights and open the curtains.",
        "general_docstring": "In the home theater scene, play the soundtrack and control the lighting and curtains."
    },
    {
        "code": "\nfunction turnOnLight(){\n     event.turnOnLight();\n}\nfunction turnOffLight(){\n     event.turnOffLight();\n}\nfunction controlFans(speed) {\n console.log(`Setting fan speed to ${speed}`);\n event.controlFan(speed);\n}\nfunction turnOnAirCleaner(){\n       event.turnOnAirCleaner();\n}\nfunction turnOnSmartOutlets(){\n    event.turnOnOutlets();\n}\nfunction turnOffSmartOutlets(){\n    event.turnOffOutlets();\n}\nfunction broadcast(text) {\n  event.broadcast(track);\n}\nvar number=0;\neventBus.on('EntranceDoorMovement', () => {\n  if(number==0)\n {\n             turnOnLight();\n                turnOnSmartOutlets();\n         controlFans(1000);\n              number++;\n     }\n     broadcast(\"Welcome\");\n});\neventBus.on('exitDoorMovement', () => {\n     if(number==1)\n {\n             turnOffLight();\n               turnOffSmartOutlets();\n          number--;\n     }\n     broadcast(\"Have a good day\");\n});\n",
        "accurate_docstring": "When the entrance sensor detects someone entering and there is no one in the gym, turn on the lights, activate the smart sockets for the gym equipment, set the fan to 1000 rpm, and broadcast ‘Welcome’. Increase the people counter. When the exit sensor detects someone leaving and there is only one person in the gym, turn off the lights and deactivate the smart sockets for the gym equipment, and broadcast ‘Have a good day’. Decrease the people counter. Turn on the air purifier.",
        "docstring": "In the gym scenario, upon entry, the lights, smart sockets, and fan are turned on, along with playing a welcome message. When leaving, the lights and smart sockets are turned off, and a farewell message is played. The air purifier remains on.",
        "general_docstring": "In the gym, an automated system controls the lighting, equipment, and ventilation. It welcomes visitors with voice prompts upon entry and bids them farewell when they leave."
    },
    {
        "code": "\nfunction playMusic(track, duration) {\n       console.log(`Playing music: ${track} for ${duration} seconds`);\n event.playMusic(track);\n       setTimeout(() => {\n            event.stopMusic(track);\n       }, duration * 1000);\n}\n\n\nfunction openCurtains() {\n  console.log(\"Opening curtains\");\n      event.openCurtains();\n}\n\n\nfunction startCoffeeMaker() {\n     console.log(\"Starting coffee maker\");\n event.startCoffeeMaker();\n}\n\n\nfunction adjustLighting(temperature) {\n        console.log(`Adjusting lighting to ${temperature}K`);\n   event.adjustLighting(temperature);\n}\n\n\nfunction turnOnAirCleaner() {\n      console.log(\"Turning on air cleaner\");\n  event.turnOnAirCleaner();\n}\n\n\neventBus.on('AM7:00', () => {\nplayMusic(\"Morning Melody\", 300);\n      openCurtains();\n       startCoffeeMaker();\n   adjustLighting(3000);\n   turnOnAirCleaner();\n});\n\nfunction setupMorningScene() {\n    console.log(\"Setting up morning wake-up scene\");\n        eventBus.emit('morningWakeUp');\n}\n",
        "accurate_docstring": "Play the gentle music “Morning Melody” for 5 minutes at the specified time. Open the curtains to let natural light in. Start the coffee machine to prepare coffee. Adjust the lighting to a soft color temperature of 3000K. Turn on the air purifier.",
        "docstring": "In the morning wake-up scene, play gentle music, open the curtains, start the coffee machine, adjust the soft lighting, and turn on the air purifier.",
        "general_docstring": "The morning wake-up scene in a smart home includes playing music, opening curtains, brewing coffee, adjusting lighting, and activating air purification."
    },
    {
        "code": "\nfunction turnOffLights() {\n  console.log(\"Turning off lights\");\n    event.turnOffLights();\n}\nfunction closeCurtains() {\n   console.log(\"Closing curtains\");\n      event.closeCurtains();\n}\nfunction playSoothingMusic(track, duration) {\n        console.log(`Playing soothing music: ${track} for ${duration} minutes`);\n        event.playMusic(track);\n       setTimeout(() => {\n            event.stopMusic(track);\n}, duration * 30 * 1000);\n}\nfunction setAirConditionerTemperature(temperature) {\n     console.log(`Setting air conditioner temperature to ${temperature}℃`);\n  event.setAirConditionerTemperature(temperature);\n}\nfunction turnOnNightLight() {\n      console.log(\"Turning on night light\");\n        event.turnOnNightLight();\n}\n",
        "accurate_docstring": "At the specified time, automatically turn off all lights. Close the curtains. Play 30 minutes of soothing music “Soothing Sounds” to aid sleep. Adjust the air conditioning temperature to 22°C for optimal sleep conditions. Turn on the night light.",
        "docstring": "In night mode, turn off the lights and close the curtains, play soothing music, adjust the air conditioning temperature, and turn on the night light.",
        "general_docstring": " Turn off lights, play soothing music, adjust the air conditioning, and activate the night light."
    },
    {
        "code": "function playBackgroundMusic(track, duration) {\n    console.log(`Playing background music: ${track} for ${duration} minutes`);\n    event.playMusic(track);\n    setTimeout(() => {\n        event.stopMusic(track);\n    }, duration * 60 * 1000);\n}\nfunction adjustLighting(temperature) {\n    console.log(`Adjusting lighting to ${temperature}K`);\n    event.adjustLighting(temperature);\n}\n\nfunction preheatOven(temperature) {\n    console.log(`Preheating oven to ${temperature}℃`);\n    event.preheatOven(temperature);\n}\n\nfunction turnOnAirCleaner() {\n    console.log(\"Turning on air cleaner\");\n    event.turnOnAirCleaner();\n}\n\neventBus.on(\"dinnerTime\", () => {\n    playBackgroundMusic(\"Dinner Jazz\", 120);\n    adjustLighting(2700);\n    preheatOven(180);\n    turnOnAirCleaner();\n});\n\nfunction setupDinnerScene() {\n    console.log(\"Setting up dinner scene\");\n    eventBus.emit(\"dinnerTime\");\n}\n\nsetupDinnerScene();",
        "accurate_docstring": "At the specified time, play 2 hours of background music, \"Dinner Jazz. \"Adjust the lighting to a soft 2700K color temperature to create a dinner atmosphere. Preheat the oven to 180°C. Turn on the air purifier.",
        "docstring": " play background music, adjust lights to a soft color temperature, preheat the oven, and turn on the air purifier.",
        "general_docstring": " background music, soft lighting, preheat oven, air purification."
    },
    {
        "code": "function startWatering(){\n    console.log(\"Soil is dry. Starting watering system.\");\n    event.startWatering();\n}\n\nfunction stopWatering(){\n    console.log(\"Soil is moist. Stopping watering system.\");\n    event.stopWatering();\n}\nfunction environmentalMonitoring() {\n    setInterval(() => {\n        const lightIntensity = getLightIntensity();\n        const temperature = getTemperature();\n        const humidity = getHumidity();\n        console.log(`Light intensity: ${lightIntensity} Lux, Temperature: ${temperature}°C, Humidity: ${humidity}%`);\n        event.show(\"Light intensity: \"+lightIntensity +\"Lux ,Temperature:\"+temperature+\"°C, Humidity:\"+humidity);\n    }, 300000);\n}\n\nfunction playNatureSounds() {\n    console.log(\"Playing nature sounds (birds chirping, water flowing, etc.)\");\n    event.playMusic(\"Nature Sounds\");\n}\n\nfunction trackPlantGrowth() {\n    setInterval(() => {\n        var plantGraphics = getPlantGraphics();\n        event.sendGraphics(plantGraphics);\n    }, 86400000);\n}\n\nfunction adjustThermostat(temperature){\n    event.adjustThermostate(temperature);\n}\n\nfunction turnOnFillLights(){\n    event.turnOnFillLights();\n}\n\nfunction turnOnLights(){\n    event.turnOnLights();\n}\n\neventBus.on(\"dry\", () => {\n    startWatering();\n});\neventBus.on(\"moist\", () => {\n    stopWatering();\n});\neventBus.on(\"night\",()=>{\n    turnOnFillLights();\n})\n\neventBus.on(\"doorMovement\", () => {\n    turnOnLights();\n    playNatureSounds();\n});\n\nfunction setupGardenScene() {\n    trackPlantGrowth();\n    environmentalMonitoring();\n    adjustThermostat();\n     eventBus.emit(\"doorMovement\");\n\n}\n\nsetupGardenScene();",
        "accurate_docstring": "Monitor soil moisture, and if the soil is too dry, start the watering system; if the soil is too wet, stop the watering. Periodically monitor light intensity, temperature, and humidity, and display the data on an electronic screen. When there is movement at the garden gate, play nature sounds like bird chirping and flowing water. Every 24 hours, capture images of plants using a smart camera and send the images to a mobile phone. Turn on the supplementary lights at night and activate lights when there is movement at the garden gate.",
        "docstring": " Automatically water based on soil moisture, monitor environment and display data on an electronic screen, play nature sounds, track plant growth, and smartly control supplementary lights and garden lights.",
        "general_docstring": " automatic watering, environmental monitoring, nature sounds, plant growth tracking, smart light control."
    },
    {
        "code": "function preheatOven(temperature) {\n    console.log(`Preheating oven to ${temperature}°C`);\n    event.preheatOven(temperature);\n}\n\nfunction playCookingGuide(guide) {\n    console.log(`Playing cooking guide: ${guide}`);\n    event.playCookingGuide(guide);\n}\n\n\nfunction adjustLighting() {\n    const lightIntensity = getLightIntensity();\n    if (lightIntensity < 300) {\n        console.log(\"Adjusting kitchen lighting to brighter setting\");\n        event.adjustLighting(\"brighter\");\n    } else {\n        console.log(\"Adjusting kitchen lighting to dimmer setting\");\n        event.adjustLighting(\"dimmer\");\n    }\n}\n\nfunction controlFan() {\n    const temperature = getKitchenTemperature();\n    if (temperature > 25) {\n        console.log(\"Kitchen is too hot. Turning on fan.\");\n        event.turnOnFan();\n    } else {\n        console.log(\"Kitchen temperature is normal. Turning off fan.\");\n        event.turnOffFan();\n    }\n}\n\nfunction adjustFotile(speed){\n    if(speed!=0)\n    event.adjustfotile(speed);\n    else\n    event.turnOfffotile();\n}\neventBus.on('startCooking', () => {\n    adjustFotile(1000);\n    preheatOven(180);\n    playCookingGuide(\"Step-by-step cooking instructions\");\n    monitorEnvironment();\n    adjustLighting();\n    controlFan();\n});\neventBus.on('endCooking', () => {\n    adjustFotile(0);\n    event.turnOffOven();\n    event.turnOffScreen();\n    adjustLighting();\n    controlFan();\n});\n\nfunction setupKitchenScene() {\n    eventBus.emit('startCooking');\n    eventBus.emit('endCooking');\n}\n\nsetupKitchenScene();",
        "accurate_docstring": "Automatically preheat the oven to 180°C when cooking begins. Play detailed cooking instructions when cooking starts. Automatically adjust the kitchen lighting brightness based on ambient light intensity. Automatically turn the fan on or off based on the kitchen temperature to maintain a comfortable environment. Turn on the extractor hood when cooking starts and turn it off when cooking ends. Turn off the oven and cooking instructions display, and adjust lighting and fan settings.",
        "docstring": " Automatically preheat the oven, play cooking instructions, adjust lighting based on environment, smartly control the fan and extractor hood.",
        "general_docstring": "automatic oven, cooking instructions, environmental monitoring, smart lighting, fan, and extractor hood."
    },
    {
        "code": "function startRecording() {\n    console.log(\"Starting camera recording.\");\n    event.startRecording();\n}\n\n\nfunction stopRecording() {\n    console.log(\"Stopping camera recording.\");\n    event.stopRecording();\n}\n\n\nfunction sendAlert() {\n    console.log(\"Sending alert to security company.\");\n    event.sendAlert();\n}\n\n\nfunction checkDoorsAndWindows() {\n    const allClosed = event.checkDoorsAndWindows();\n    if (!allClosed) {\n        console.log(\"Some doors or windows are open. Sending alert.\");\n        event.sendWarning(\"Some doors or windows are open.\");\n    }\n}\n\n\nfunction playWarningSound() {\n    console.log(\"Playing warning sound.\");\n    event.playWarningSound();\n}\n\n\neventBus.on('intrusionDetected', () => {\n    event.turnOnLights();\n    playWarningSound();\n    startRecording();\n    sendAlert();\n    checkDoorsAndWindows();\n});\n\neventBus.on('safeConfirmed', () => {\n    event.turnOffLights();\n    stopRecording();\n    event.stopWarningSound();\n});\n",
        "accurate_docstring": "When abnormal movement is detected in the house, trigger the alarm system, turn on all lights, and play a warning sound through the smart speaker system. Activate the cameras to record and send real-time video streams to the homeowner's mobile phone. Check if all doors and windows are closed; if any are open, issue a warning alert. Connect with the alarm company, automatically sending an alert message to the company. After the homeowner confirms safety, turn off the alarm system, restore normal lighting, and stop camera recording.",
        "docstring": "Smart home security scene: Detect abnormal movement and trigger alarm, activate camera recording, check door and window status, notify alarm company, and reset system after safety confirmation.",
        "general_docstring": "Smart home security: automatic detection, alarm, recording, door/window check, and notify alarm company."
    },
    {
        "code": "function startWorkMode() {\n    console.log(\"Starting work mode.\");\n    event.turnOnWorkLights();\n    event.startComputer();\n    event.startMonitor();                   \n    adjustEnvironment();\n}\n\nfunction adjustEnvironment() {\n    const lightIntensity = getLightIntensity();\n    const temperature = getTemperature();\n    const airQuality = getAirQuality();\n\n    if (lightIntensity < 300) {\n        console.log(\"Adjusting office lighting to brighter setting\");\n        event.adjustLighting(\"brighter\");\n    } else {\n        console.log(\"Adjusting office lighting to dimmer setting\");\n        event.adjustLighting(\"dimmer\");\n    }\n\n    if (temperature > 25) {\n        console.log(\"Room is too hot. Turning on air conditioner.\");\n        event.turnOnAirConditioner();\n    } else {\n        console.log(\"Room temperature is comfortable. Turning off air conditioner.\");\n        event.turnOffAirConditioner();\n    }\n\n    if (airQuality < 50) {\n        console.log(\"Air quality is poor. Turning on air purifier.\");\n        event.turnOnAirPurifier();\n    } else {\n        console.log(\"Air quality is good. Turning off air purifier.\");\n        event.turnOffAirPurifier();\n    }\n}\n\n\nfunction playBackgroundMusic() {\n    console.log(\"Playing background music.\");\n    event.playMusic(\"Background Music\");\n}\n\n\nfunction startPomodoroTimer() {\n    console.log(\"Starting pomodoro timer.\");\n    event.startPomodoro();\n}\n\n\nfunction startVideoConference() {\n    console.log(\"Starting video conference mode.\");\n    event.adjustCamera(\"optimal\");\n    event.optimizeLighting(\"video\");\n    event.stopMusic();\n}\n\n\nfunction healthReminders() {\n    setInterval(() => {\n        console.log(\"Time to take a break and stretch.\");\n        event.sendReminder(\"Take a break and stretch.\");\n    }, 3600000); \n}\n\n\nfunction endWorkMode() {\n    console.log(\"Ending work mode.\");\n    event.turnOffWorkLights();\n    event.stopComputer();\n    event.stopMonitor();\n    event.adjustLighting(\"comfortable\");\n    event.playMusic(\"Relaxing Music\");\n}\n\n\neventBus.on('startWork', () => {\n    startWorkMode();\n    playBackgroundMusic();\n    startPomodoroTimer();\n    healthReminders();\n});\n\neventBus.on('startMeeting', () => {\n    startVideoConference();\n});\n\neventBus.on('endWork', () => {\n    endWorkMode();\n});\n\n\nfunction setupWorkScene() {\n    \n    eventBus.emit('startWork'); \n    eventBus.emit('startMeeting'); \n    setTimeout(() => eventBus.emit('endWork'), 28800000); \n}\n\n\nsetupWorkScene();",
        "accurate_docstring": "When the user enters the home office, automatically activate office mode by turning on work lights, starting the computer and monitor, and adjusting the room temperature. Use sensors to monitor indoor light, temperature, and air quality, and automatically adjust lighting, air conditioning, and the air purifier as needed. Play soft background music, start the Pomodoro timer to remind the user to work and take breaks. When a video conference begins, automatically adjust the camera angle, optimize background lighting, and turn off background music. Based on work duration and health recommendations, regularly remind the user to stand up, move around, and do eye exercises. When work ends, automatically turn off work equipment, adjust lighting to a comfortable mode, and play relaxing music.",
        "docstring": "Smart home office scene: Automatically start work equipment, monitor the environment in real-time, play background music, optimize for video conferences, provide health break reminders, and end office mode",
        "general_docstring": "Smart office: automatic equipment, environment monitoring, conference optimization, health reminders."
    },
    {
        "code": "function automaticFeeder() {\n    console.log(\"Activating automatic feeder.\");\n    event.feedPet();\n\n    function automaticWatering() {\n        console.log(\"Activating automatic watering.\");\n        event.waterPet();\n    }\n\n    function activityMonitoring() {\n        setInterval(() => {\n            const activityLevel = getActivityLevel();\n            event.sendmessage(`Pet activity level: ${activityLevel}`);\n            if (activityLevel < 3) {\n                console.log(\"Pet needs more activity.\");\n            }\n        }, 60000);\n    }\n\n    function adjustEnvironment() {\n        const temperature = getTemperature();\n        const humidity = getHumidity();\n        console.log(`Temperature: ${temperature}°C, Humidity: ${humidity}%`);\n        if (temperature > 25) {\n            console.log(\"Turning on air conditioning.\");\n            event.turnOnAirConditioning();\n        }\n        if (humidity < 40) {\n            console.log(\"Turning on humidifier.\");\n            event.turnOnHumidifier();\n        }\n    }\n\n    function remoteInteraction() {\n        console.log(\"Remote interaction activated.\");\n        event.activateRemoteControl();\n    }\n\n    eventBus.on('startPetCare', () => {\n        activityMonitoring();\n        adjustEnvironment();\n    });\n    eventBus.on('remoteInteraction', () => {\n        remoteInteraction();\n    });\n    eventBus.on('NeedFeed', () => {\n        automaticFeeder();\n    });\n    eventBus.on('NeedWater', () => {\n        automaticWatering();\n    });\n\n    function setupPetCareScene() {\n        eventBus.emit('startPetCare');\n        eventBus.emit('NeedFeed');\n        eventBus.emit('NeedWater');\n        eventBus.emit('remoteInteraction');\n    }\n\n    setupPetCareScene();\n}",
        "accurate_docstring": "When the user enters the home office, automatically activate office mode by turning on work lights, starting the computer and monitor, and adjusting the room temperature. Use sensors to monitor indoor light, temperature, and air quality, and automatically adjust lighting, air conditioning, and the air purifier as needed. Play soft background music, start the Pomodoro timer to remind the user to work and take breaks. When a video conference begins, automatically adjust the camera angle, optimize background lighting, and turn off background music. Based on work duration and health recommendations, regularly remind the user to stand up, move around, and do eye exercises. When work ends, automatically turn off work equipment, adjust lighting to a comfortable mode, and play relaxing music.",
        "docstring": "Smart home office scene: Automatically start work equipment, monitor the environment in real-time, play background music, optimize for video conferences, provide health break reminders, and end office mode.",
        "general_docstring": "Smart office: automatic equipment, environment monitoring, conference optimization, health reminders."
    },
    {
        "code": "function turnOnLights(){\n   event.turnOnLights();\n}\nfunction turnOffLights(){\n    event.turnOffLights();\n}\nfunction turnOnDeskLamp(){\n    event.turnOnDeskLamp()\n}\nfunction turnOffDeskLamp(){\n    event.turnOffDeskLamp()\n}\nfunction playWhiteNoise(name){\n        event.playWhiteNoise(name);\n}\nfunction stopWhiteNoise(name){\n    event.stopWhiteNoise();\n}\nfunction trackLearning(){\n    setInterval(() => {\n        let graphics=getGraphics();\n        event.sendMessage(graphics)\n    }, 3600000); \n}\nfunction healthReminders() {\n    setInterval(() => {\n        console.log(\"Time to take a break and stretch.\");\n        event.sendReminder(\"Take a break and stretch.\");\n    }, 3600000); \n}\neventBus.on('StartLearning', () => {\n    turnOnLights();\n    turnOnDeskLamp();\n    playWhiteNoise('rain');\n    trackLearning();\n    healthReminders();\n});\neventBus.on('EndLearning', () => {\n    turnOffLights();\n    turnOffDeskLamp();\n    stopWhiteNoise();\n});\nfunction setupLearningScene() {\n    eventBus.emit('StartLearning'); \n    setTimeout(() => eventBus.emit('EndLearning'), 10800000); \n}\nsetupsetupLearningScene",
        "accurate_docstring": "When the study session starts, the lights and desk lamp will automatically turn on, soothing white noise will play, the study progress will be tracked and study status pictures will be sent at regular intervals, while reminders for eye exercises will be given. At the end of the study session, the lights and desk lamp will automatically turn off, and the white noise will stop playing.",
        "docstring": "Automatically activate study mode, providing a comfortable environment and study support, and automatically deactivate when study ends.",
        "general_docstring": "Automatic study, comfortable environment."
    },
    {
        "code": "function turnOnReadingLight() {\n    console.log(\"Turning on reading light.\");\n    event.turnOnReadingLight();\n}\nfunction turnOffReadingLight() {\n    console.log(\"Turning off reading light.\");\n    event.turnOffReadingLight();\n}\nfunction playSoftMusic() {\n    console.log(\"Playing soft background music.\");\n    event.playMusic(\"Soft Music\");\n}\nfunction stopSoftMusic() {\n    console.log(\"Stopping soft background music.\");\n    event.stopMusic();\n}\nfunction adjustTemperature(temp) {\n    console.log(`Adjusting room temperature to ${temp}°C`);\n    event.adjustTemperature(temp);\n}\nfunction monitorEnvironment() {\n    setInterval(() => {\n        const lightIntensity = getLightIntensity();\n        const temperature = getTemperature();\n        console.log(`Light intensity: ${lightIntensity} Lux, Temperature: ${temperature}°C`);\n        event.show(`Light intensity: ${lightIntensity} Lux, Temperature: ${temperature}°C`);\n    }, 300000); \n}\neventBus.on('startReading', () => {\n    turnOnReadingLight();\n    playSoftMusic();\n    adjustTemperature(22); \n    monitorEnvironment();\n});\neventBus.on('endReading', () => {\n    turnOffReadingLight();\n    stopSoftMusic();\n});\nfunction setupReadingScene() {\n    eventBus.emit('startReading'); \n    setTimeout(() => eventBus.emit('endReading'), 7200000); \n}\nsetupReadingScene();",
        "accurate_docstring": "When reading begins, the reading light will automatically turn on, gentle background music will play, and the room temperature will adjust to a comfortable 22°C. Sensors will monitor light intensity and temperature every 5 minutes and display the environmental parameters on an electronic screen. After 2 hours, the reading light will automatically turn off and the background music will stop playing.",
        "docstring": "Automatically activate reading mode, adjust lighting and temperature, play background music, and monitor environmental parameters in real-time.",
        "general_docstring": "Smart reading, comfortable environment, automatic monitoring."
    },
    {
        "code": "function adjustLighting(lightIds, temperature) {\n    lightIds.forEach(id => {\n        console.log(`Adjusting light ${id} to ${temperature}K`);\n        event.changelight(id, temperature);\n    });\n}\nfunction playMusic(track, duration) {\n    console.log(`Playing music track: ${track} for ${duration} seconds`);\n    event.playMusic(track);\n    setTimeout(() => {\n        event.stopMusic(track);\n    }, duration * 1000);\n}\nfunction setAirConditionerTemperature(temperature) {\n    console.log(`Setting air conditioner temperature to ${temperature}℃`);\n    event.setAirConditionerTemperature(temperature);\n}\nfunction startSmartMirror() {\n    console.log(\"Starting smart mirror with yoga guidance\");\n    event.showdata();\n}\nfunction startAirPurifier() {\n    console.log(\"Starting air purifier\");\n    event.startAirPurifier();\n}\nfunction startFitnessTracker() {\n    console.log(\"Starting fitness tracker\");\n    event.startFitnessTracker();\n}\neventBus.on('yogaSessionStart', () => {\n    adjustLighting([1, 2, 3], 2700); \n    playMusic(\"Yoga Playlist\", 3600); \n    setAirConditionerTemperature(22);\n    startSmartMirror();\n    startAirPurifier();\n    startFitnessTracker();\n});\neventBus.on('MirrorExistPerson', () => {\n    startSmartMirror();\n});\nfunction setupYogaScene() {\n    eventBus.emit('yogaSessionStart'); \n    eventBus.emit('MirrorExistPerson'); \n}\nsetupYogaScene();",
        "accurate_docstring": "When the yoga session begins, relaxing yoga music will automatically play, the room temperature will adjust to 24°C, and the lighting will switch to a relaxing mode. ",
        "docstring": "Automatically activate yoga mode, adjust lighting and temperature, play yoga music, and monitor environmental parameters in real-time.",
        "general_docstring": "Smart yoga, comfortable environment, automatic monitoring"
    },
    {
        "code": "function adjustLighting(lightIds, temperature, brightness) {\n    lightIds.forEach(id => {\n        console.log(`Adjusting light ${id} to ${temperature}K and ${brightness}% brightness`);\n        event.changelight(id, temperature, brightness);\n    });\n}\nfunction playMusic(track, duration) {\n    console.log(`Playing music track: ${track} for ${duration} seconds`);\n    event.playMusic(track);\n    setTimeout(() => {\n        event.stopMusic(track);\n    }, duration * 1000);\n}\nfunction stopMusic(track) {\n    console.log(`Stopping music track: ${track}`);\n    event.stopMusic(track);\n}\nfunction setAirConditionerTemperature(temperature) {\n    console.log(`Setting air conditioner temperature to ${temperature}℃`);\n    event.setAirConditionerTemperature(temperature);\n}\nfunction startFragranceMachine() {\n    console.log(\"Starting fragrance machine\");\n    event.startFragranceMachine();\n}\nfunction stopFragranceMachine() {\n    console.log(\"Stopping fragrance machine\");\n    event.stopFragranceMachine();\n}\nfunction adjustCurtains(action) {\n    console.log(`Adjusting curtains to ${action}`);\n    event.adjustCurtains(action);\n}\neventBus.on('existPressure', () => {\n    adjustLighting([1, 2, 3], 2700, 50); \n    playMusic(\"Relaxing Music\", 1800); \n    setAirConditionerTemperature(22);\n    startFragranceMachine();\n    adjustCurtains('close'); \n});\neventBus.on('NoPressure', () => {\n    stopMusic(\"Relaxing Music\");\n    stopFragranceMachine();\n    adjustLighting([1, 2, 3], 3500, 100); \n    adjustCurtains('open'); \n});\nfunction setupMeditationScene() {\n     eventBus.emit('existPressure'); \n    eventBus.emit('NoPressure'); \n}\nsetupMeditationScene();",
        "accurate_docstring": "When the meditation session begins, relaxing nature sounds will automatically play, the lights will dim, and the misting system will activate to increase air humidity. After 1 hour, the nature sounds will automatically stop, the lighting will return to temperature 3500, and the misting system will shut off.",
        "docstring": "Automatically activate meditation mode, play nature sounds, dim the lights, activate the misting system, and monitor environmental parameters in real-time.",
        "general_docstring": "Smart meditation, comfortable environment, automatic monitoring"
    },
    {
        "code": "function playPartyMusic() {\n    console.log(\"Playing party music.\");\n    event.playMusic(\"Party Playlist\");\n}\nfunction stopPartyMusic() {\n    console.log(\"Stopping party music.\");\n    event.stopMusic();\n}\nfunction controlPartyLights(mode) {\n    console.log(`Setting lights to ${mode} mode.`);\n    event.setLights(mode);\n}\nfunction controlFogMachine(action) {\n    console.log(`${action} fog machine.`);\n    if (action === \"Starting\") {\n        event.startFogMachine();\n    } else {\n        event.stopFogMachine();\n    }\n}\nfunction controlLaserLights(action) {\n    console.log(`${action} laser lights.`);\n    if (action === \"Starting\") {\n        event.startLaserLights();\n    } else {\n        event.stopLaserLights();\n    }\n}\nlet number=0;\neventBus.on('entranceDoorMovement', () => {\n    if(number==0){\n        playPartyMusic();\n        controlPartyLights(\"party\");\n        controlFogMachine(\"Starting\");\n        controlLaserLights(\"Starting\");\n        number++;\n    }\n});\neventBus.on('exitDoorMovement', () => {\n    if(number==1){\n        stopPartyMusic();\n        controlPartyLights(\"normal\");\n        controlFogMachine(\"Stopping\");\n        controlLaserLights(\"Stopping\");\n        number--;\n    }\n});\nfunction setupPartyScene() {\n    eventBus.emit('entranceDoorMovement'); \n    eventBus.emit('exitDoorMovement'); \n}\nsetupPartyScene();",
        "accurate_docstring": "When the party begins, party music will automatically play, the lighting will switch to party mode, and the smoke machine and laser lights will activate. After 4 hours, the party music will automatically stop, the lighting will return to normal mode, and the smoke machine and laser lights will turn off.",
        "docstring": "Automatically activate party mode, play party music, set party lighting, and activate the smoke machine and laser lights.",
        "general_docstring": "Smart party, automatic music, party lighting, smoke machine, and laser lights"
    },
    {
        "code": "function startCleaningRobot() {\n    console.log(\"Starting cleaning robot.\");\n    event.startCleaningRobot();\n}\nfunction stopCleaningRobot() {\n    console.log(\"Stopping cleaning robot.\");\n    event.stopCleaningRobot();\n}\nfunction turnOnAirPurifier() {\n    console.log(\"Turning on air purifier.\");\n    event.turnOnAirPurifier();\n}\nfunction turnOffAirPurifier() {\n    console.log(\"Turning off air purifier.\");\n    event.turnOffAirPurifier();\n}\nfunction playRelaxingMusic() {\n    console.log(\"Playing relaxing music.\");\n    event.playMusic(\"Relaxing Music\");\n}\nfunction stopMusic() {\n    console.log(\"Stopping music.\");\n    event.stopMusic();\n}\neventBus.on('needCleaning', () => {\n    startCleaningRobot();\n    turnOnAirPurifier();\n    playRelaxingMusic();\n});\neventBus.on('endCleaning', () => {\n    stopCleaningRobot();\n    turnOffAirPurifier();\n    stopMusic();\n    feedPet();\n});\nfunction setupHomeCleaningScene() {\n    eventBus.emit('needCleaning'); \n     eventBus.emit('endCleaning'); \n}\nsetupHomeCleaningScene();",
        "accurate_docstring": "The automatic cleaning robot starts and begins cleaning the entire house. The air purifier turns on to clean the air. Soothing music plays to create a relaxing atmosphere. After 2 hours, the cleaning robot automatically stops. The air purifier turns off. The music stops playing. The pets are fed to ensure their needs are met.",
        "docstring": "Smart home cleaning scene: activate the cleaning robot and air purifier, play soothing music. After cleaning, turn off devices and feed pets.",
        "general_docstring": "Smart cleaning: automatic cleaning, air purification, music playing; after cleaning, devices turn off and pets are fed."
    },
    {
        "code": "function startTimer() {\n    console.log(\"Starting the race timer.\");\n    event.startRaceTimer();\n}\nfunction stopTimer() {\n    console.log(\"Stopping the race timer.\");\n    event.stopRaceTimer();\n}\nfunction updateScoreboard(score,team) {\n    console.log(`Updating steam${team} scoreboard with score: ${score}`);\n    event.updateScoreboard(score,team);\n}\nfunction playRaceMusic() {\n    console.log(\"Playing race background music.\");\n    event.playMusic(\"Race Playlist\");\n}\nfunction stopRaceMusic() {\n    console.log(\"Stopping race background music.\");\n    event.stopMusic();\n}\nfunction startLiveStream() {\n    console.log(\"Starting the live stream.\");\n    event.startLiveStream();\n}\nfunction stopLiveStream() {\n    console.log(\"Stopping the live stream.\");\n    event.stopLiveStream();\n}\neventBus.on('startRace', () => {\n    startTimer();\n    playRaceMusic();\n    startLiveStream();\n});\neventBus.on('aScore', (score) => {\n    updateScoreboard(score,a);\n});\neventBus.on('bScore', (score) => {\n    updateScoreboard(score,b);\n});\neventBus.on('endRace', () => {\n    stopTimer();\n    stopRaceMusic();\n    stopLiveStream();\n});\nfunction setupRaceScene() {\n    eventBus.emit('startRace'); \n    eventBus.emit('ascore'); \n    eventBus.emit('bscore'); \n    setTimeout(() => eventBus.emit('endRace'), 7200000); \n}\nsetupRaceScene();",
        "accurate_docstring": "The competition timer starts, recording the competition time. Background music plays to create a competitive atmosphere. The competition live stream begins, allowing viewers to watch online. The scoreboard updates in real-time according to the progress of the competition. After 2 hours, the competition timer automatically stops. The background music stops playing. The live stream ends, concluding the competition broadcast.",
        "docstring": "Smart competition scene: start the competition timer, background music, and live stream; update the scoreboard in real-time; stop the timer, music, and live stream after the competition ends.",
        "general_docstring": "Smart competition: automatic timing, background music, live streaming, score updates; all functions stop after the competition."
    },
    {
        "code": "function openCurtains() {\n    console.log(\"Opening curtains.\");\n    event.openCurtains();\n}\nfunction closeCurtains() {\n    console.log(\"Closing curtains.\");\n    event.closeCurtains();\n}\nfunction turnOnLights() {\n    console.log(\"Turning on lights.\");\n    event.turnOnLights();\n}\nfunction turnOffLights() {\n    console.log(\"Turning off lights.\");\n    event.turnOffLights();\n}\nfunction playRomanticMusic() {\n    console.log(\"Playing romantic music.\");\n    event.playMusic(\"Romantic Playlist\");\n}\nfunction stopMusic() {\n    console.log(\"Stopping music.\");\n    event.stopMusic();\n}\nfunction setTemperature(temp) {\n    console.log(`Setting temperature to ${temp}°C.`);\n    event.setTemperature(temp);\n}\nfunction prepareDinner() {\n    console.log(\"Preparing dinner.\");\n    event.prepareDinner();\n}\neventBus.on('startDateNight', () => {\n    openCurtains();\n    turnOnLights();\n    playRomanticMusic();\n    setTemperature(22);\n    prepareDinner();\n});\neventBus.on('endDateNight', () => {\n    closeCurtains();\n    turnOffLights();\n    stopMusic();\n});\nfunction setupDateNightScene() {\n    eventBus.emit('startDateNight'); \n    setTimeout(() => eventBus.emit('endDateNight'), 10800000); \n}\nsetupDateNightScene();",
        "accurate_docstring": "Open the curtains to create an open atmosphere. Turn on the lights and adjust them to a soft illumination. Play romantic music to set a romantic mood. Set the indoor temperature to a comfortable 22°C. Prepare dinner and ensure everything is ready. After 3 hours, automatically close the curtains. Turn off the lights to create a quiet nighttime atmosphere. Stop playing the music.",
        "docstring": "Smart date night scene: open curtains and lights, play romantic music, set temperature, prepare dinner; after 3 hours, close curtains and lights, stop music.",
        "general_docstring": "Smart date night: open curtains and lights, play music, set temperature, prepare dinner; close all after 3 hours."
    },
    {
        "code": "function activateAutonomousDriving() {\n    console.log(\"Activating autonomous driving mode.\");\n    event.activateAutonomousDriving();\n}\nfunction activateParkingAssistance() {\n    console.log(\"Activating parking assistance.\");\n    event.activateParkingAssistance();\n}\nfunction playTrafficReport() {\n    console.log(\"Playing traffic report.\");\n    event.playTrafficReport();\n}\nfunction updateWeather() {\n    console.log(\"Updating weather information.\");\n    event.updateWeather();\n}\nfunction adjustCarTemperature(temp) {\n    console.log(`Setting car temperature to ${temp}°C.`);\n    event.adjustCarTemperature(temp);\n}\neventBus.on('startJourney', () => {\n    activateAutonomousDriving();\n    playTrafficReport();\n    updateWeather();\n    adjustCarTemperature(22);\n});\neventBus.on('startParking', () => {\n    activateParkingAssistance();\n});\neventBus.on('endJourney', () => {\n    console.log(\"Journey ended. Turning off autonomous driving mode.\");\n    event.deactivateAutonomousDriving();\n    console.log(\"Stopping traffic report.\");\n    event.stopTrafficReport();\n});\nfunction setupTransportScene() {\n    eventBus.emit('startJourney'); \n    setTimeout(() => eventBus.emit('startParking'), 1800000); \n    setTimeout(() => eventBus.emit('endJourney'), 3600000); \n}\nsetupTransportScene();",
        "accurate_docstring": "Activate the autonomous driving mode to ensure safe travel. Play traffic reports to receive the latest traffic conditions and route suggestions. Update real-time weather information to stay informed about road conditions and driving environments. Adjust the car's interior temperature to 22°C to provide a comfortable driving experience. After 30 minutes, activate parking assistance to help with safe parking. After 1 hour, automatically end the journey and deactivate the autonomous driving mode. Stop playing traffic reports.",
        "docstring": "Smart transportation scene: autonomous driving, traffic reports, weather updates, temperature adjustment, parking assistance, end journey.",
        "general_docstring": "Smart transportation: autonomous driving, traffic reports, weather updates, temperature control, parking, end."
    },
    {
        "code": "function controlGarageLights(state) {\n    console.log(`Turning ${state} garage lights.`);\n    event.controlGarageLights(state);\n}\nfunction updateParkingAvailability() {\n    const availability = getParkingAvailability();\n    console.log(`Updating parking availability: ${availability} spaces available.`);\n    event.updateParkingAvailability(availability);\n}\nfunction recognizeLicensePlate() {\n    const licensePlate = getLicensePlate();\n    console.log(`Recognized license plate: ${licensePlate}`);\n    event.recognizeLicensePlate(licensePlate);\n}\nfunction processPayment(licensePlate) {\n    console.log(`Processing payment for license plate: ${licensePlate}`);\n    event.processPayment(licensePlate);\n}\neventBus.on('carEntering', () => {\n    controlGarageLights('on');\n    recognizeLicensePlate();\n    updateParkingAvailability();\n});\neventBus.on('carExiting', () => {\n    const licensePlate = getLicensePlate();\n    processPayment(licensePlate);\n    updateParkingAvailability();\n    controlGarageLights('off');\n});\nfunction setupParkingGarageScene() {\n    eventBus.emit('carEntering'); \n    eventBus.emit('carExiting'); \n}\nsetupParkingGarageScene();",
        "accurate_docstring": "Control the lighting in the underground parking lot, turning lights on or off as needed. The license plate recognition system activates, identifying and recording the license plate number. Update the vacant parking space display, showing the current number of available spaces. When the vehicle leaves, automatically process the parking fee based on the license plate number. Update the vacant parking space display, showing the current number of available spaces. Control the lighting in the underground parking lot, turning lights on or off as needed.",
        "docstring": "Smart parking lot scene: license plate recognition, lighting control, vacant space display, automatic fee processing.",
        "general_docstring": "Smart parking: license plate recognition, lighting control, vacant space display, automatic fee processing."
    },
    {
        "code": "function startRace() {\n    console.log(\"Race started!\");\n    event.startRace(new Date(),getIds());\n}\nfunction endRace(id) {\n    console.log(\"Race ended!\");\n    event.endRace(new Date(),id);\n}\nfunction celebration(){\n    event.playMusic('champion');\n}\nfunction deploySafetyCar() {\n    console.log(\"Safety car deployed!\");\n    event.deploySafetyCar();\n}\neventBus.on('raceStart', () => {\n    startRace();\n});\nvar champion=1;\neventBus.on('raceEnd', () => {\n    if(champion){\n        celebration();\n        champion=0;\n    }\n    endRace(getid());\n});\neventBus.on('safetyCarDeployed', () => {\n    deploySafetyCar();\n});\nfunction setupRaceTrackScene() {\n    eventBus.emit('raceStart'); \n    eventBus.emit('safetyCarDeployed'); \n    eventBus.emit('raceEnd'); \n}\nsetupRaceTrackScene();\n",
        "accurate_docstring": "Automatically turn on or off the parking lot lights based on the lighting conditions when a vehicle enters to ensure sufficient illumination. When a vehicle enters, the license plate recognition system automatically starts, identifying the vehicle's license plate number, and recording relevant information. Real-time updates of available parking spaces on the display screen based on vehicle entry to ensure drivers can promptly understand the parking availability. When a vehicle is ready to leave, the system automatically calculates the parking fee based on the license plate number and processes payment. After the vehicle leaves, real-time updates of available parking spaces on the display screen to ensure drivers can promptly understand the parking availability. Automatically turn on or off the parking lot lights based on the lighting conditions when a vehicle leaves to conserve energy.",
        "docstring": "Smart parking lot scene: license plate recognition, lighting control, vacant space display, automatic fee processing.",
        "general_docstring": "Smart parking: license plate recognition, lighting control, vacant space display, automatic fee processing."
    },
    {
        "code": "function detectTrafficFlow() {\n    const trafficFlow = getTrafficFlowData();\n    console.log(`Traffic flow detected: ${trafficFlow}.`);\n    event.detectTrafficFlow(trafficFlow);\n}\nfunction adjustTrafficLights(duration) {\n    console.log(`Adjusting traffic lights to ${duration} seconds.`);\n    event.adjustTrafficLights(duration);\n}\nfunction detectTrafficAccident() {\n    if (isAccidentDetected()) {\n        console.log(\"Traffic accident detected. Triggering warning.\");\n        event.triggerAccidentWarning();\n    }\n}\nfunction detectEmergencyVehicle() {\n    if (isEmergencyVehicleDetected()) {\n        console.log(\"Emergency vehicle detected. Adjusting traffic lights for priority passage.\");\n        event.adjustTrafficLightsForEmergency();\n    }\n}\nfunction detectPedestrians() {\n    if (arePedestriansDetected()) {\n        console.log(\"Pedestrians detected. Adjusting traffic lights for safe crossing.\");\n        event.adjustTrafficLightsForPedestrians();\n        event.playCrossingSignal();\n    }\n}\nfunction calculateLightDuration() {\n    return getflow() > 50 ? 30 : 60;\n}\neventBus.on('trafficFlowDetected', () => {\n    detectTrafficFlow();\n    adjustTrafficLights(calculateLightDuration());\n});\neventBus.on('pedestrian', () => {\n    detectPedestrians();\n});\neventBus.on('Emergency', () => {\n    detectEmergencyVehicle();\n});\neventBus.on('TrafficAccident', () => {\n    detectTrafficAccident();\n});\nfunction setupTrafficControlScene() {\n    setInterval(() => {\n        eventBus.emit('trafficFlowDetected');\n    }, 5000); \n    eventBus.emit('pedestrian');                     \n    eventBus.emit('Emergency');                     \n    eventBus.emit('TrafficAccident');                \n}\nsetupTrafficControlScene();",
        "accurate_docstring": "Real-time detection of traffic flow data using cameras and sensors to assess the current traffic conditions at intersections. Based on real-time traffic flow, intelligently adjust the duration of red and green lights to optimize traffic flow and reduce waiting times. Immediate triggering of alarms and notification to nearby vehicles if a traffic accident is detected, along with adjustments to signal lights to ensure safety. Using audio and video detection technology to identify approaching emergency vehicles (such as ambulances, fire trucks, etc. ). Providing a green corridor for emergency vehicles by temporarily adjusting the sequence of signal lights to ensure quick passage. Automatic restoration of normal signal light control after emergency vehicles have passed through. Detection of pedestrian quantity and location using cameras to determine if a pedestrian signal is required. Intelligent adjustment of signal lights when pedestrians are detected in the waiting area, providing safe crossing time. Playback of voice prompts when signal lights change to remind pedestrians to cross safely.",
        "docstring": "Smart Traffic Control Scenario: Traffic flow detection, signal light duration adjustment, accident warning, emergency vehicle priority, pedestrian protection.",
        "general_docstring": "Smart Traffic: Flow detection, signal adjustment, accident warning, emergency priority, pedestrian protection."
    },
    {
        "code": "function updateFlightInfo(flightInfo) {\n    console.log(`Updating flight info: ${JSON.stringify(flightInfo)}.`);\n    event.updateFlightInfo(flightInfo);\n}\nfunction sendSecurityCheckReminder() {\n    console.log(\"Sending security check reminder.\");\n    event.sendSecurityCheckReminder();\n}\nfunction sendBoardingNotification() {\n    console.log(\"Sending boarding notification.\");\n    event.sendBoardingNotification();\n}\nfunction sendBaggageDropReminder() {\n    console.log(\"Sending baggage drop reminder.\");\n    event.sendBaggageDropReminder();\n}\nfunction trackBaggage(baggageStatus) {\n    console.log(`Tracking baggage: ${baggageStatus}.`);\n    event.trackBaggage(baggageStatus);\n}\nfunction sendBaggageArrivalNotification() {\n    console.log(\"Sending baggage arrival notification.\");\n    event.sendBaggageArrivalNotification();\n}\nfunction monitorAndAdjustEnvironment(environmentData) {\n    const { temperature, humidity, airQuality } = environmentData;\n    console.log(`Temperature: ${temperature}°C, Humidity: ${humidity}%, Air Quality: ${airQuality}.`);\n    event.monitorEnvironment(environmentData);\n}\nfunction playBackgroundMusic(music) {\n    console.log(`Playing background music: ${music}.`);\n    event.playBackgroundMusic(music);\n}\nfunction sendChargingStationReminder() {\n    console.log(\"Sending charging station reminder.\");\n    event.sendChargingStationReminder();\n}\neventBus.on('flightInfoUpdate', (flightInfo) => {\n    updateFlightInfo(flightInfo);\n    sendSecurityCheckReminder();\n    sendBoardingNotification();\n});\neventBus.on('baggageHandling', (baggageStatus) => {\n    sendBaggageDropReminder();\n    trackBaggage(baggageStatus);\n    sendBaggageArrivalNotification();\n});\neventBus.on('environmentMonitoring', (environmentData) => {\n    monitorAndAdjustEnvironment(environmentData);\n});\neventBus.on('passengerComfortService', (music) => {\n    playBackgroundMusic(music);\n    sendChargingStationReminder();\n});\nfunction setupAirportScene() {\n    const flightInfo = { flightNumber: \"AB123\", status: \"On Time\", gate: \"A1\" };\n    const baggageStatus = \"Baggage loaded on flight AB123.\";\n    const environmentData = { temperature: 22, humidity: 50, airQuality: \"Good\" };\n    const music = \"Classical\";\n    eventBus.emit('flightInfoUpdate', flightInfo); \n    eventBus.emit('baggageHandling', baggageStatus); \n    eventBus.emit('environmentMonitoring', environmentData); \n    eventBus.emit('passengerComfortService', music); \n}\nsetupAirportScene();",
        "accurate_docstring": "Real-time retrieval of flight information via the airline's API to update the display screens with flight status and boarding gate information. Sending security check reminders to passengers to ensure they have sufficient time to pass through security. Sending boarding notifications when boarding begins to remind passengers to proceed to the boarding gate. Reminding passengers to check their baggage early to avoid boarding delays. Real-time tracking of baggage location and providing passengers with baggage status updates. Sending baggage arrival notifications to passengers when baggage reaches the destination. Automatically adjusting airport terminal air conditioning and humidifiers based on real-time temperature and humidity data. Monitoring air quality within the airport to ensure freshness and activating air purifiers when necessary. Playing appropriate background music based on time of day and passenger flow to enhance passenger comfort. Notifying passengers of the location of charging stations within the airport for convenient device charging.",
        "docstring": "Smart Airport Scenario: Flight information updates, security check reminders, boarding notifications, baggage handling, environment monitoring, passenger comfort services.",
        "general_docstring": "Smart Airport: Flight updates, security check reminders, boarding notifications, baggage tracking, environment monitoring, passenger services."
    },
    {
        "code": "function scanTicket(ticketInfo) {\n    console.log(`Scanning ticket: ${JSON.stringify(ticketInfo)}.`);\n    event.scanTicket(ticketInfo);\n}\nfunction sendWelcomeMessage(visitorInfo) {\n    console.log(`Sending welcome message to ${visitorInfo.name}.`);\n    event.sendWelcomeMessage(visitorInfo);\n}\nfunction displayExhibitInfo(exhibitInfo) {\n    console.log(`Displaying info for exhibit: ${JSON.stringify(exhibitInfo)}.`);\n    event.displayExhibitInfo(exhibitInfo);\n}\nfunction startAudioGuide(exhibitInfo) {\n    console.log(`Starting audio guide for exhibit: ${exhibitInfo.name}.`);\n    event.startAudioGuide(exhibitInfo);\n}\nfunction adjustEnvironment(environmentData) {\n    const { temperature, humidity } = environmentData;\n    console.log(`Adjusting environment - Temperature: ${temperature}°C, Humidity: ${humidity}%.`);\n    event.adjustEnvironment(environmentData);\n}\nfunction adjustLighting(lightingData) {\n    console.log(`Adjusting lighting to ${lightingData.level} level.`);\n    event.adjustLighting(lightingData);\n}\nfunction sendRestAreaReminder() {\n    event.sendRestAreaReminder(visitorInfo);\n}\nfunction sendSafetyAlert(visitorInfo) {\n    console.log(`Sending safety alert to ${visitorInfo.name}.`);\n    event.sendSafetyAlert(visitorInfo);\n}\neventBus.on('visitorEnter', (visitorInfo) => {\n    scanTicket(visitorInfo.ticket);\n    sendWelcomeMessage(visitorInfo);\n});\neventBus.on('exhibitInteraction', (exhibitInfo) => {\n    displayExhibitInfo(exhibitInfo);\n    startAudioGuide(exhibitInfo);\n});\neventBus.on('environmentControl', (environmentData) => {\n    adjustEnvironment(environmentData);\n    adjustLighting(environmentData.lighting);\n});\neventBus.on('visitorComfortService', (visitorInfo) => {\n    sendRestAreaReminder(visitorInfo);\n});\neventBus.on('safetyAlert', (visitorInfo) => {\n    sendSafetyAlert(visitorInfo);\n});\nfunction setupMuseumScene() {\n    const visitorInfo = getvisitorInfo();\n    const exhibitInfo = getexhibitInfo();\n    const environmentData = environmentData();\n    eventBus.emit('visitorEnter', visitorInfo); \n     eventBus.emit('exhibitInteraction', exhibitInfo); \n    eventBus.emit('environmentControl', environmentData); \n     eventBus.emit('visitorComfortService', visitorInfo); \n     eventBus.emit('safetyAlert', visitorInfo); \n}\nsetupMuseumScene();",
        "accurate_docstring": "As visitors enter the museum, the system scans their tickets to confirm their identity and record entry time. Sending welcome messages and guide maps to visitors upon entry to help them understand the layout and exhibition content of the museum. When visitors approach a particular exhibit, the system automatically displays detailed information about the exhibit on their devices, including historical background and related videos. Visitors can choose to activate an audio guide, with the system playing audio explanations about the exhibit. The system continuously monitors the temperature and humidity within the museum and adjusts air conditioning and humidifiers as needed to maintain a suitable environment. Adjusting lighting brightness intelligently based on visitor activity and exhibition requirements to ensure the best viewing experience. If visitors stay in the museum for an extended period, the system will remind them of nearby rest areas for their convenience. In emergency situations, the system sends safety alert messages to guide visitors to evacuate quickly to safe zones.",
        "docstring": "Smart Museum Scenario: Ticket scanning, welcome messages, interactive exhibit information, audio guides, environmental control, visitor comfort services.",
        "general_docstring": "Smart Museum: Ticket scanning, welcome messages, exhibit interaction, environmental control, visitor services."
    },
    {
        "code": "function recognizeCustomer() {\n    const customerId = getCustomerId();\n    console.log(`Customer recognized: ${customerId}`);\n    event.recognizeCustomer(customerId);\n}\nfunction showPersonalizedRecommendations(customerId) {\n    const recommendations = getRecommendations(customerId);\n    console.log(`Showing recommendations for customer ${customerId}: ${recommendations}`);\n    event.showRecommendations(recommendations);\n}\nfunction queryProductInfo(productId) {\n    const productInfo = getProductInfo(productId);\n    console.log(`Product info for ${productId}: ${productInfo}`);\n    event.showProductInfo(productInfo);\n}\nfunction selfCheckout() {\n    const totalAmount = calculateTotal();\n    console.log(`Total amount: ${totalAmount}`);\n    event.processPayment(totalAmount);\n}\nfunction sendElectronicReceipt(customerId) {\n    const receipt = generateReceipt(customerId);\n    console.log(`Sending electronic receipt to customer ${customerId}`);\n    event.sendReceipt(receipt);\n}\nfunction monitorInventory() {\n    const inventoryStatus = getInventoryStatus();\n    console.log(`Inventory status: ${inventoryStatus}`);\n    event.updateInventoryStatus(inventoryStatus);\n}\nfunction autoRestock() {\n    const restockOrder = generateRestockOrder();\n    console.log(`Generating restock order: ${restockOrder}`);\n    event.sendRestockOrder(restockOrder);\n}\nfunction getCustomerId() {\n    return \"C12345\";\n}\nfunction generateReceipt(customerId) {\n    return { customerId: customerId, items: [\"Product A\", \"Product B\"], total: 200 };\n}\nfunction getInventoryStatus() {\n    return { \"Product A\": 10, \"Product B\": 5 };\n}\nfunction generateRestockOrder() {\n    return { \"Product A\": 20, \"Product B\": 15 };\n}\neventBus.on('customerEnter', () => {\n    const customerId = getCustomerId();\n    recognizeCustomer(customerId);\n    showPersonalizedRecommendations(customerId);\n});\neventBus.on('productQuery', (productId) => {\n    queryProductInfo(productId);\n});\neventBus.on('checkout', () => {\n    selfCheckout();\n    const customerId = getCustomerId();\n    sendElectronicReceipt(customerId);\n});\neventBus.on('inventoryCheck', () => {\n    monitorInventory();\n    autoRestock();\n});\nfunction setupSmartRetailScene() {\n    eventBus.emit('customerEnter'); \n    eventBus.emit('productQuery', \"P123\"); \n    eventBus.emit('checkout'); \n    eventBus.emit('inventoryCheck'); \n}\nsetupSmartRetailScene();",
        "accurate_docstring": "Upon entering the store, the system automatically identifies customers using facial recognition technology through cameras, welcoming returning customers and recording new ones. Based on customers' shopping history and preferences, the system displays personalized product recommendations on screens within the store. Equipped with scanners and displays, the smart shopping cart allows customers to view the prices and total amount of items in their cart at any time, and receive personalized promotional messages. Customers can scan product barcodes to view detailed information, including prices, ingredients, and usage instructions, on the smart shopping cart or in-store displays. Self-service checkout terminals are provided where customers can scan item barcodes themselves, and the system automatically calculates the total amount and offers multiple payment methods. For registered members, the system enables express checkout via their smartphones or facial recognition, deducting payments directly from their member accounts without scanning items. Upon checkout, the system generates electronic receipts and sends them to customers' email addresses or mobile apps. Satisfaction survey questionnaires are sent to customers after checkout to collect feedback on their shopping experiences. The system continuously monitors the inventory status of all products in the store and automatically alerts staff when inventory levels are low. Based on sales data and inventory levels, the system generates restocking orders and sends them to suppliers to ensure timely replenishment of goods.",
        "docstring": "Smart Retail Scenario: Customer recognition and personalized recommendations, smart shopping cart, product information inquiry, self-service and express checkout, electronic receipts and feedback, real-time inventory monitoring and automatic restocking.",
        "general_docstring": "Smart Retail: Customer recognition, interactive shopping, self-checkout, electronic receipts, inventory management."
    },
    {
        "code": "function activateSmartWalker() {\n    console.log(\"Activating smart walker.\");\n    event.activateSmartWalker();\n}\n\nfunction sendMedicationReminder() {\n    console.log(\"Sending medication reminder.\");\n    event.MedicationReminder();\n}\n\nfunction sendActivityReminder() {\n    console.log(\"Sending activity reminder.\");\n    event.ActivityReminder();\n}\n\nfunction monitorVitalSigns() {\n    const vitalSigns = getVitalSigns();\n    console.log(`Monitoring vital signs: ${JSON.stringify(vitalSigns)}`);\n    event.sendvitalSignsReport(vitalSigns);\n}\n\nfunction monitorActivity() {\n    const activityData = getActivityData();\n    console.log(`Monitoring activity: ${JSON.stringify(activityData)}`);\n    event.sendActivityReport(activityData);\n}\n\nfunction adjustEnvironment() {\n    const environmentSettings = getEnvironmentSettings();\n    event.adjustEnvironment(environmentSettings);\n}\n\nfunction emergencyPanicButton() {\n    console.log(\"Panic button pressed. Notifying emergency services.\");\n    event.emergencyPanicButton();\n}\n\nfunction detectFall() {\n    console.log(\"Fall detected. Notifying caregivers and emergency services.\");\n    event.remindNurse();\n}\n\nfunction remoteVideoAssistance() {\n    console.log(\"Providing remote video assistance.\");\n    event.remoteVideoAssistance();\n}\n\neventBus.on('startCare', () => {\n    activateSmartWalker();\n    sendMedicationReminder();\n    sendActivityReminder();\n    monitorVitalSigns();\n    monitorActivity();\n    adjustEnvironment();\n});\n\neventBus.on('emergency', () => {\n    emergencyPanicButton();\n    detectFall();\n    remoteVideoAssistance();\n});\n\nfunction setupCaregivingScene() {\n    eventBus.emit('startCare');\n    eventBus.emit('emergency')\n}\nsetupCaregivingScene();\n\nfunction getVitalSigns() {\n    return { heartRate: 72, bloodPressure: \"120/80\", glucose: 100 };\n}\n\nfunction getActivityData() {\n    return { steps: 3000, caloriesBurned: 200 };\n}\n\nfunction getEnvironmentSettings() {\n    return { temperature: 22, humidity: 50, lighting: \"bright\" };\n}",
        "accurate_docstring": "The system automatically activates the smart walker, providing real-time guidance and stability support for elderly and disabled individuals. The smart walker offers guided assistance through voice commands and alerts, helping users navigate their environment safely. The system sends reminders to take medication at scheduled times, ensuring adherence to medical routines. The system provides reminders for meals, exercise, and appointments, helping users maintain a structured daily routine. The system continuously monitors vital signs such as heart rate, blood pressure, and glucose levels, alerting caregivers of any anomalies. The system tracks daily activities and movement patterns to detect any unusual behavior or falls, notifying caregivers immediately if any issues arise. The system adjusts home environment settings, including lighting, temperature, and humidity, to ensure comfort and safety. Users have access to a panic button that, when pressed, immediately notifies caregivers and emergency services. The system detects falls and automatically contacts caregivers and emergency services with the user’s location and status. Caregivers can provide remote assistance through video calls, offering guidance and assessing situations before arriving on-site.",
        "docstring": "Smart caregiving scenario: smart walker activation, medication and activity reminders, health and activity monitoring, environment control, emergency response with panic button and fall detection, remote video assistance.",
        "general_docstring": "Smart care: walker activation, schedule reminders, health/activity monitoring, environment control, emergency response, remote assistance."
    },
    {
        "code": "function verifyCustomerIdentity(customerId) {\n    if (customerId === 'valid') {\n        event.openSecurityGate(); \n        event.sendNotification('Welcome to Smart Bank!'); \n    } else {\n        event.sendNotification('Access Denied! Invalid Customer ID.'); \n    }\n}\nfunction processWithdrawal(amount) {\n    if (amount <= event.getAccountBalance()) {\n        event.dispenseCash(amount); \n        event.updateAccountBalance(-amount); \n        event.sendNotification(`Withdrawal of ${amount} CNY processed.`); \n    } else {\n        event.sendNotification('Insufficient funds!'); \n    }\n}\nfunction processDeposit(amount) {\n    event.acceptDeposit(amount); \n    event.updateAccountBalance(amount); \n    event.sendNotification(`Deposit of ${amount} CNY processed.`); \n}\neventBus.on('customerServiceRequest', (customerId, serviceType, amount) => {\n    verifyCustomerIdentity(customerId); \n    if (serviceType === 'withdrawal') {\n        processWithdrawal(amount); \n    } else if (serviceType === 'deposit') {\n        processDeposit(amount); \n    }\n});\neventBus.on('alarmTriggered', () => {\n    event.closeSecurityGate(); \n    event.playAlarm(); \n});\nfunction setupSmartBankScene() {\n    event.turnOnSecuritySystem(); \n    event.turnOnBankLights(); \n    eventBus.emit('customerServiceRequest');\n    eventBus.emit('alarmTriggered');\n}\nsetupSmartBankScene();",
        "accurate_docstring": "The security system is activated to ensure safety. Bank lights illuminate the area. Customers are welcomed with identity verification at the security gate. Valid customers receive access and a welcome notification, while invalid IDs trigger a denial notification. Service requests from customers trigger actions such as withdrawals or deposits, with notifications sent accordingly. In case of an alarm trigger, the security gate closes, and an alarm sounds.",
        "docstring": "The bank operates securely with activated security systems and well-lit premises. Customers are verified upon entry, transactions are processed promptly, and in the event of an alarm, security measures are implemented.",
        "general_docstring": "The bank operates securely with verified access, transaction processing, and alarm response protocols."
    },
    {
        "code": "function startSafeHouseScene() {\n    event.turnOnSecuritySystem(); \n    event.turnOnSurveillanceCameras(); \n    event.turnOnSmokeDetectors(); \n    event.sendNotification('Safe House Scene started.'); \n    event.emit('smokeDetected');\n    event.emit('intrusionDetected');\n}\neventBus.on('smokeDetected', () => {\n    event.activateSmokeAlarm(); \n    event.sendNotification('Smoke detected! Evacuate immediately!'); \n    event.openAllDoors(); \n    event.openWindows();\n    event.turnOnEmergencyLights(); \n    event.callEmergencyServices(); \n});\neventBus.on('intrusionDetected', () => {\n    event.activateIntrusionAlarm(); \n    event.sendNotification('Intrusion detected! Security breach detected!'); \n    event.callSecurityServices(); \n});\nstartSafeHouseScene();",
        "accurate_docstring": "The Safe House Scene initiates by activating the security system, surveillance cameras, and smoke detectors. Simulated events of smoke detection and intrusion are emitted to simulate emergency situations. Upon smoke detection, the smoke alarm activates, prompting an immediate evacuation notification. All doors and windows are opened, emergency lights are activated, and emergency services are notified. In case of intrusion detection, the intrusion alarm activates, and security services are notified.",
        "docstring": "The Safe House Scene is activated, triggering the security system, surveillance cameras, and smoke detectors. Smoke and intrusion events are simulated, prompting immediate action. Upon smoke detection, doors and windows are opened, emergency lights are activated, and emergency services are notified. In case of intrusion detection, security services are alerted.",
        "general_docstring": "The Safe House Scene activates security measures, including surveillance cameras and smoke detectors. Simulated smoke and intrusion events prompt immediate response, including opening doors and windows, activating emergency lights, and notifying emergency services."
    },
    {
        "code": "function startSmartManufacturingScene() {\n    event.turnOnSecuritySystem(); \n    event.turnOnFactoryLights(); \n    event.startProductionLine(); \n    event.turnOnCoolingSystem(); \n    event.sendNotification('Smart Manufacturing Scene started.'); \n}\neventBus.on('materialLow', () => {\n    event.sendNotification('Material stock is low!'); \n    event.orderMaterials(); \n});\neventBus.on('machineError', (machineId) => {\n    event.stopMachine(machineId); \n    event.sendNotification(`Machine ${machineId} has encountered an error!`); \n    event.callMaintenanceTeam(); \n});\neventBus.on('productCompleted', (productId) => {\n    event.packageProduct(productId); \n    event.sendNotification(`Product ${productId} has been completed and packaged.`); \n});\neventBus.on('highTemperatureDetected', () => {\n    event.turnOnEmergencyCoolingSystem(); \n    event.sendNotification('High temperature detected! Emergency cooling system activated.'); \n});\nstartSmartManufacturingScene();",
        "accurate_docstring": "The Smart Manufacturing Scene starts by activating the security system, turning on factory lights, starting the production line, and turning on the cooling system. Notifications are sent to staff. When material stock is low, a notification is sent and materials are ordered. If a machine encounters an error, it is stopped, a notification is sent, and the maintenance team is called. When a product is completed, it is packaged, and a notification is sent. If high temperature is detected, the emergency cooling system is activated, and a high temperature warning is sent.",
        "docstring": "The Smart Manufacturing Scene activates security, lighting, production lines, and cooling systems. Notifications are sent for low material stock, machine errors, product completions, and high temperatures. Actions include ordering materials, stopping faulty machines, calling maintenance, packaging products, and activating emergency cooling.",
        "general_docstring": "The Smart Manufacturing Scene manages security, lighting, production, and cooling. It responds to low materials, machine errors, product completions, and high temperatures with appropriate actions and notifications."
    },
    {
        "code": "function startSmartGamingRoomScene() {\n    event.turnOnGamingLights(); \n    event.setTemperature(20); \n    event.turnOnGamingConsole(); \n    event.turnOnSurroundSoundSystem(); \n    event.sendNotification('Smart Gaming Room Scene started.'); \n}\neventBus.on('gameStarted', (gameName) => {\n    event.dimLights(); \n    event.startAmbientMusic(); \n    event.sendNotification(`Game ${gameName} has started! Enjoy your gaming experience.`); \n});\neventBus.on('gameEnded', (gameName) => {\n    event.turnOnNormalLights(); \n    event.stopAmbientMusic(); \n    event.sendNotification(`Game ${gameName} has ended. Hope you had fun!`); \n});\neventBus.on('playerBreak', () => {\n    event.turnOnRelaxationMode(); \n    event.sendNotification('Time for a break! Relax and recharge.'); \n});\nstartSmartGamingRoomScene();",
        "accurate_docstring": "The Smart Gaming Room Scene starts by turning on the gaming lights, setting the temperature to 20°C, powering on the gaming console, and activating the surround sound system. Notifications are sent to players. When a game starts, the lights dim, ambient music begins, and a notification is sent to enjoy the gaming experience. When the game ends, normal lighting resumes, ambient music stops, and a notification is sent hoping the player had fun. During player breaks, relaxation mode is activated, and a notification is sent to relax and recharge.",
        "docstring": "The Smart Gaming Room Scene activates gaming lights, temperature control, gaming console, and surround sound. Notifications are sent for game start, game end, and player breaks. Lights dim and ambient music plays during games. Normal lighting and music stop when games end. Relaxation mode is activated during breaks.",
        "general_docstring": "The Smart Gaming Room Scene manages lights, temperature, console, and sound. It responds to game start, end, and player breaks with appropriate lighting and music adjustments, and sends notifications."
    },
    {
        "code": "function startSmartInventoryManagementScene() {\n    event.turnOnSecuritySystem(); \n    event.turnOnWarehouseLights(); \n    event.startInventoryTracking(); \n    event.sendNotification('Smart Inventory Management Scene started.'); \n}\neventBus.on('lowInventoryDetected', (itemId) => {\n    event.sendNotification(`Low inventory detected for item ${itemId}.`); \n    event.orderStock(itemId); \n});\neventBus.on('newStockArrived', (itemId) => {\n    event.updateInventory(itemId); \n    event.sendNotification(`New stock for item ${itemId} has arrived and inventory is updated.`); \n});\neventBus.on('inventoryErrorDetected', (itemId) => {\n    event.sendNotification(`Inventory error detected for item ${itemId}.`); \n    event.auditInventory(itemId); \n});\neventBus.on('highTemperatureDetected', () => {\n    event.turnOnCoolingSystem(); \n    event.sendNotification('High temperature detected in the warehouse. Cooling system activated.'); \n});\nstartSmartInventoryManagementScene();",
        "accurate_docstring": "The Smart Inventory Management Scene starts by activating the security system, turning on warehouse lights, and starting inventory tracking. Notifications are sent to staff. When low inventory is detected for an item, a notification is sent, and stock is ordered. Upon the arrival of new stock, inventory is updated, and a notification is sent. If an inventory error is detected, a notification is sent, and the inventory is audited. If high temperature is detected in the warehouse, the cooling system is activated, and a high-temperature warning is sent.",
        "docstring": "The Smart Inventory Management Scene activates security, lighting, and inventory tracking. It sends notifications and takes actions for low inventory, new stock arrivals, inventory errors, and high temperatures, such as ordering stock, updating inventory, auditing inventory, and activating the cooling system.",
        "general_docstring": "The Smart Inventory Management Scene manages security, lighting, and inventory tracking. It responds to low inventory, new stock arrivals, inventory errors, and high temperatures with appropriate actions and notifications."
    },
    {
        "code": "function startSmartMuseumScene() {\n    event.turnOnSecuritySystem(); \n    event.turnOnExhibitLights(); \n    event.setAmbientTemperature(22); \n    event.startVisitorTracking(); \n    event.sendNotification('Smart Museum Scene started.'); \n}\neventBus.on('visitorEntered', (visitorId) => {\n    event.sendNotification(`Visitor ${visitorId} has entered the exhibit area.`); \n    event.playWelcomeMessage(visitorId); \n    event.adjustLightingForVisitor(visitorId); \n});\neventBus.on('exhibitTouched', (exhibitId) => {\n    event.sendNotification(`Exhibit ${exhibitId} has been touched.`); \n    event.activateExhibitAlarm(exhibitId); \n});\neventBus.on('overcrowdingDetected', () => {\n    event.sendNotification('Overcrowding detected in the exhibit area.'); \n    event.redirectVisitors(); \n});\neventBus.on('fireDetected', () => {\n    event.sendNotification('Fire detected! Evacuate the museum immediately.'); \n    event.activateFireAlarm(); \n    event.openEmergencyExits(); \n});\neventBus.on('visitorExited', (visitorId) => {\n    event.sendNotification(`Visitor ${visitorId} has left the exhibit area.`); \n});\nstartSmartMuseumScene();",
        "accurate_docstring": "The Smart Museum Scene starts by activating the security system, turning on exhibit lights, setting the ambient temperature to 22°C, and starting the visitor tracking system. Notifications are sent to staff. When a visitor enters the exhibit area, a notification is sent, a welcome message is played, and lighting is adjusted for the visitor. If an exhibit is touched, a notification is sent, and the exhibit alarm is activated. In case of overcrowding, a notification is sent, and visitors are redirected. If a fire is detected, a fire alarm is activated, emergency exits are opened, and an evacuation notification is sent. When a visitor leaves the exhibit area, a notification is sent.",
        "docstring": "The Smart Museum Scene activates security, lighting, temperature control, and visitor tracking. It sends notifications and takes actions for visitor entry, exhibit touches, overcrowding, and fire detection, such as playing welcome messages, adjusting lighting, activating alarms, redirecting visitors, and opening emergency exits.",
        "general_docstring": "The Smart Museum Scene manages security, lighting, temperature, and visitor tracking. It responds to visitor entry, exhibit touches, overcrowding, and fires with notifications and appropriate actions."
    },
    {
        "code": "function startSmartGridScene() {\n    event.turnOnPowerGeneration(); \n    event.turnOnPowerDistribution(); \n    event.startEnergyMonitoring(); \n    event.sendNotification('Smart Grid Scene started.'); \n}\neventBus.on('peakDemandDetected', () => {\n    event.sendNotification('Peak demand detected! Activating additional power sources.'); \n    event.activateAdditionalPowerSources(); \n    event.initiateDemandResponse(); \n});\neventBus.on('powerOutageDetected', (areaId) => {\n    event.sendNotification(`Power outage detected in area ${areaId}. Dispatching repair crews.`); \n    event.dispatchRepairCrews(areaId); \n    event.redirectPowerFlow(areaId); \n});\neventBus.on('abnormalEnergyConsumptionDetected', (meterId) => {\n    event.sendNotification(`Abnormal energy consumption detected at meter ${meterId}. Investigating issue.`); \n    event.investigateEnergyConsumption(meterId); \n    event.adjustEnergySupply(meterId); \n});\neventBus.on('renewableEnergyIncreased', (sourceId) => {\n    event.sendNotification(`Increased renewable energy supply from ${sourceId}. Adjusting grid distribution.`); \n    event.adjustGridDistribution(sourceId); \n    event.storeExcessEnergy(sourceId); \n});\neventBus.on('highTemperatureDetected', () => {\n    event.sendNotification('High temperature detected! Activating cooling systems for power stations.'); \n    event.activateCoolingSystems(); \n});\nstartSmartGridScene();",
        "accurate_docstring": "The Smart Grid Scene starts by activating power generation, power distribution, and energy monitoring systems. Notifications are sent to the control center. When peak demand is detected, a notification is sent, additional power sources are activated, and demand response measures are initiated. If a power outage is detected in an area, a notification is sent, repair crews are dispatched, and power flow is redirected. Abnormal energy consumption triggers an investigation and adjustment of energy supply. Increased renewable energy supply prompts an adjustment of grid distribution and storage of excess energy. High temperature detection activates cooling systems for power stations.",
        "docstring": "The Smart Grid Scene activates power generation, distribution, and monitoring. It sends notifications and responds to peak demand, power outages, abnormal energy consumption, increased renewable energy, and high temperatures with actions such as activating power sources, dispatching repair crews, investigating issues, adjusting grid distribution, and activating cooling systems.",
        "general_docstring": "The Smart Grid Scene manages power generation, distribution, and monitoring, responding to peak demand, outages, abnormal consumption, renewable energy increases, and high temperatures with appropriate actions and notifications."
    },
    {
        "code": "function startSmartConstructionScene() {\n    event.turnOnSecuritySystem(); \n    event.turnOnSiteLights(); \n    event.startMachineMonitoring(); \n    event.activateDroneSurveillance(); \n    event.sendNotification('Smart Construction Scene started.'); \n}\neventBus.on('machineErrorDetected', (machineId) => {\n    event.sendNotification(`Machine error detected on ${machineId}. Shutting down and dispatching repair team.`); \n    event.shutDownMachine(machineId); \n    event.dispatchRepairTeam(machineId); \n});\neventBus.on('fallDetected', (workerId) => {\n    event.sendNotification(`Fall detected for worker ${workerId}. Sending medical assistance.`); \n    event.sendMedicalAssistance(workerId); \n    event.recordIncident(workerId); \n});\neventBus.on('highTemperatureDetected', () => {\n    event.sendNotification('High temperature detected! Activating cooling systems and sending hydration reminders.'); \n    event.activateCoolingSystems(); \n    event.sendHydrationReminders(); \n});\neventBus.on('poorAirQualityDetected', () => {\n    event.sendNotification('Poor air quality detected! Activating air purification systems.'); \n    event.activateAirPurifiers(); \n});\neventBus.on('materialsArrived', (materialId) => {\n    event.sendNotification(`Materials arrived: ${materialId}. Logging and notifying relevant teams.`); \n    event.logMaterials(materialId); \n    event.notifyTeams(materialId); \n});\neventBus.on('taskCompleted', (taskId) => {\n    event.sendNotification(`Task completed: ${taskId}. Logging and updating project status.`); \n    event.logTaskCompletion(taskId); \n    event.updateProjectStatus(taskId); \n});\nstartSmartConstructionScene();",
        "accurate_docstring": "The Smart Construction Scene starts by activating the security system, turning on site lights, starting machine monitoring, and activating drone surveillance. Notifications are sent to the control center. When a machine error is detected, a notification is sent, the machine is shut down, and a repair team is dispatched. If a fall is detected, a notification is sent, medical assistance is dispatched, and the incident is recorded. High temperature detection triggers the activation of cooling systems and sending of hydration reminders. Poor air quality detection activates air purification systems. When materials arrive, a notification is sent, materials are logged, and relevant teams are notified. Task completion triggers a notification, task logging, and project status update.",
        "docstring": "The Smart Construction Scene activates security, lighting, machine monitoring, and drone surveillance. It sends notifications and responds to machine errors, falls, high temperatures, poor air quality, material arrivals, and task completions with actions such as shutting down machines, dispatching repair teams, sending medical assistance, activating cooling and air purification systems, logging materials, and updating project status.",
        "general_docstring": "The Smart Construction Scene manages security, lighting, machine monitoring, and drone surveillance, responding to errors, falls, high temperatures, poor air quality, material arrivals, and task completions with appropriate actions and notifications."
    },
    {
        "code": "function startSmartClothingScene() {\n    event.turnOnWearableSensors(); \n    event.activateSmartHeating(); \n    event.sendNotification('Smart Clothing Scene started.'); \n}\neventBus.on('healthAnomalyDetected', (anomalyType) => {\n    event.sendNotification(`Health anomaly detected: ${anomalyType}. Taking appropriate actions.`); \n    event.recordHealthData(anomalyType); \n    event.notifyHealthcareProvider(anomalyType); \n});\neventBus.on('temperatureChangeDetected', (temperature) => {\n    event.sendNotification(`Temperature change detected: ${temperature}°C. Adjusting smart heating.`); \n    event.adjustHeating(temperature); \n});\neventBus.on('lowBatteryDetected', () => {\n    event.sendNotification('Low battery detected! Please recharge your smart clothing.'); \n    event.activatePowerSavingMode(); \n});\neventBus.on('firmwareUpdateNeeded', () => {\n    event.sendNotification('Firmware update needed for your smart clothing. Starting update process.'); \n    event.startFirmwareUpdate(); \n});\nstartSmartClothingScene();",
        "accurate_docstring": "The Smart Clothing Scene starts by turning on wearable sensors and activating the smart heating feature. Notifications are sent to the user. When a health anomaly is detected, a notification is sent, health data is recorded, and the healthcare provider is notified. If a temperature change is detected, a notification is sent, and the smart heating is adjusted accordingly. Low battery detection triggers a notification and activates power-saving mode. If a firmware update is needed, a notification is sent, and the update process is started.",
        "docstring": "The Smart Clothing Scene activates wearable sensors and smart heating. It sends notifications and responds to health anomalies, temperature changes, low battery, and firmware updates with actions such as recording health data, notifying healthcare providers, adjusting heating, activating power-saving mode, and starting firmware updates.",
        "general_docstring": "The Smart Clothing Scene manages wearable sensors and smart heating, responding to health anomalies, temperature changes, low battery, and firmware updates with appropriate actions and notifications."
    },
    {
        "code": "function startSmartAirportScene() {\n    event.turnOnSecuritySystem(); \n    event.activateBaggageHandlingSystem(); \n    event.turnOnSmartSecurityCheck(); \n    event.activatePersonalizedNavigation(); \n    event.sendNotification('Smart Airport Scene started.'); \n}\neventBus.on('baggageScanAnomaly', (baggageId) => {\n    event.sendNotification(`Baggage scan anomaly detected for baggage ID: ${baggageId}. Please check.`); \n    event.holdBaggage(baggageId); \n    event.alertSecurity(baggageId); \n});\neventBus.on('passengerApproachingSecurity', (passengerId) => {\n    event.sendNotification(`Passenger ${passengerId} approaching security check.`); \n    event.prepareSecurityCheck(passengerId); \n});\neventBus.on('passengerClearedSecurity', (passengerId) => {\n    event.sendNotification(`Passenger ${passengerId} cleared security.`); \n    event.provideNavigation(passengerId); \n});\neventBus.on('flightInfoUpdated', (flightId) => {\n    event.sendNotification(`Flight information updated for flight ID: ${flightId}.`); \n    event.updateNavigation(flightId); \n});\neventBus.on('emergencyDetected', () => {\n    event.sendNotification('Emergency detected! Initiating evacuation procedures.'); \n    event.activateEvacuationProtocol(); \n    event.guidePassengersToExits(); \n});\nstartSmartAirportScene();",
        "accurate_docstring": "The Smart Airport Scene starts by activating the security system, automatic baggage handling system, smart security check, and personalized navigation. Notifications are sent to staff and passengers. When a baggage scan anomaly is detected, a notification is sent, the baggage handling is paused, and security is alerted. When a passenger approaches the security check, a notification is sent, and the security check is prepared. Once a passenger clears security, a notification is sent, and personalized navigation is provided. Flight information updates trigger a notification and update navigation information. In case of an emergency, an evacuation protocol is initiated, and passengers are guided to exits.",
        "docstring": "The Smart Airport Scene activates security, baggage handling, smart security checks, and personalized navigation. It sends notifications and responds to baggage anomalies, passenger movements, flight updates, and emergencies with actions like pausing baggage handling, preparing security checks, providing navigation, and initiating evacuation protocols.",
        "general_docstring": "The Smart Airport Scene manages security, baggage, and navigation, responding to anomalies, passenger movements, flight updates, and emergencies with appropriate actions and notifications."
    },
    {
        "code": "function startSmartHospitalScene() {\n    event.turnOnSecuritySystem(); \n    event.activateBedManagementSystem(); \n    event.turnOnMedicationDispensingRobots(); \n    event.activateSurgicalDevices(); \n    event.sendNotification('Smart Hospital Scene started.'); \n}\neventBus.on('bedAvailable', (bedId) => {\n    event.sendNotification(`Bed ${bedId} is now available.`); \n    event.updateBedStatus(bedId, 'available'); \n});\neventBus.on('medicationNeedsDispensing', (patientId, medication) => {\n    event.sendNotification(`Dispensing medication for patient ${patientId}.`); \n    event.dispenseMedication(patientId, medication); \n    event.updateMedicationRecord(patientId, medication); \n});\neventBus.on('surgeryStarting', (surgeryId) => {\n    event.sendNotification(`Surgery ${surgeryId} is about to start.`); \n    event.prepareSurgicalDevices(surgeryId); \n    event.notifySurgicalTeam(surgeryId); \n});\neventBus.on('surgeryCompleted', (surgeryId) => {\n    event.sendNotification(`Surgery ${surgeryId} has been completed.`); \n    event.updateSurgicalRecord(surgeryId); \n    event.cleanSurgicalDevices(surgeryId); \n});\neventBus.on('emergencyDetected', () => {\n    event.sendNotification('Emergency detected! Initiating emergency protocol.'); \n    event.activateEmergencyProtocol(); \n    event.alertEmergencyResponseTeam(); \n});\nstartSmartHospitalScene();",
        "accurate_docstring": "The Smart Hospital Scene starts by activating the security system, smart bed management system, medication dispensing robots, and smart surgical devices. Notifications are sent to staff. When a bed becomes available, a notification is sent, and the bed status is updated. When medication needs to be dispensed, a notification is sent, medication is dispensed, and the medication record is updated. When a surgery is about to start, a notification is sent, surgical devices are prepared, and the surgical team is notified. After surgery completion, a notification is sent, the surgical record is updated, and the surgical devices are cleaned. In case of an emergency, an emergency protocol is initiated, and the emergency response team is alerted.",
        "docstring": "The Smart Hospital Scene activates security, bed management, medication dispensing, and surgical devices. It sends notifications and responds to bed availability, medication dispensing, surgeries, and emergencies with actions like updating statuses, dispensing medication, preparing devices, and initiating emergency protocols.",
        "general_docstring": "The Smart Hospital Scene manages security, bed management, medication dispensing, and surgical devices, responding to bed availability, medication needs, surgeries, and emergencies with appropriate actions and notifications."
    },
    {
        "code": "function startSmartWaterManagementScene() {\n    event.turnOnSecuritySystem(); \n    event.activateWaterManagementSystem(); \n    event.startIrrigationOptimization(); \n    event.activateFloodPreventionMeasures(); \n    event.sendNotification('Smart Water Management Scene started.'); \n}\neventBus.on('waterLevelChangeDetected', (location, level) => {\n    event.sendNotification(`Water level change detected at ${location}. Current level: ${level}m.`); \n    event.adjustWaterFlow(location, level); \n    if (level > event.getFloodThreshold(location)) {\n        event.activateFloodControl(location); \n        event.sendNotification(`Flood control measures activated at ${location}.`); \n    }\n});\neventBus.on('irrigationNeeded', (fieldId) => {\n    event.sendNotification(`Irrigation needed for field ${fieldId}.`); \n    event.startIrrigation(fieldId); \n    event.updateIrrigationLog(fieldId); \n});\neventBus.on('waterQualityAnomalyDetected', (location) => {\n    event.sendNotification(`Water quality anomaly detected at ${location}. Investigating issue.`); \n    event.investigateWaterQuality(location); \n    event.activateWaterPurification(location); \n});\neventBus.on('weatherAlertReceived', (alert) => {\n    event.sendNotification(`Weather alert received: ${alert}. Preparing flood prevention measures.`); \n    event.prepareFloodPrevention(alert); \n});\neventBus.on('equipmentFailureDetected', (equipmentId) => {\n    event.sendNotification(`Equipment failure detected: ${equipmentId}. Dispatching repair team.`); \n    event.dispatchRepairTeam(equipmentId); \n    event.activateBackupSystems(equipmentId); \n});\nstartSmartWaterManagementScene();",
        "accurate_docstring": "The Smart Water Management Scene starts by activating the security system, smart water management system, irrigation optimization, and flood prevention measures. Notifications are sent to staff. When a water level change is detected, a notification is sent, water flow is adjusted, and if necessary, flood control measures are activated. When irrigation is needed, a notification is sent, irrigation is started, and the irrigation log is updated. If a water quality anomaly is detected, a notification is sent, the issue is investigated, and water purification is activated. Weather alerts trigger a notification and preparation of flood prevention measures. Equipment failure triggers a notification, dispatch of a repair team, and activation of backup systems.",
        "docstring": "The Smart Water Management Scene activates security, water management, irrigation, and flood prevention. It sends notifications and responds to water level changes, irrigation needs, water quality anomalies, weather alerts, and equipment failures with actions like adjusting water flow, starting irrigation, investigating issues, preparing flood measures, and activating backup systems.",
        "general_docstring": "The Smart Water Management Scene manages water resources, irrigation, and flood prevention, responding to changes and alerts with appropriate actions and notifications."
    },
    {
        "code": "eventBus.on('visitorEntered', (visitorId) => {\n    event.sendNotification(`Welcome, visitor ${visitorId}!`); \n    event.assignPersonalizedServices(visitorId); \n    event.provideParkMap(visitorId); \n});\neventBus.on('peakVisitorDetected', () => {\n    event.sendNotification('Peak visitor level detected. Optimizing ride wait times.'); \n    event.optimizeRideWaitTimes(); \n});\neventBus.on('vrRideStarted', (rideId) => {\n    event.sendNotification(`Virtual reality ride ${rideId} started.`); \n    event.trackRideUsage(rideId); \n});\neventBus.on('helpRequested', (visitorId) => {\n    event.sendNotification(`Help requested by visitor ${visitorId}. Dispatching assistance.`); \n    event.dispatchAssistance(visitorId); \n});\neventBus.on('emergencyDetected', () => {\n    event.sendNotification('Emergency detected! Initiating evacuation procedures.'); \n    event.activateEvacuationProtocol(); \n    event.guideVisitorsToExits(); \n});\nfunction startSmartAmusementParkScene() {\n    event.turnOnSecuritySystem(); \n    event.activateSmartTicketingSystem(); \n    event.turnOnVirtualRealityRides(); \n    event.activatePersonalizedServices(); \n    event.sendNotification('Smart Amusement Park Scene started.'); \n}\nstartSmartAmusementParkScene();",
        "accurate_docstring": "The Smart Amusement Park Scene starts by activating the security system, smart ticketing system, virtual reality rides, and personalized services. Notifications are sent to staff and visitors. When a visitor enters the park, a welcome notification is sent, personalized services are assigned, and a park map is provided. Peak visitor levels trigger a notification and optimization of ride wait times. When a virtual reality ride starts, a notification is sent, and ride usage is tracked. Help requests from visitors trigger a notification and dispatch of assistance. In case of an emergency, an evacuation protocol is initiated, and visitors are guided to exits.",
        "docstring": "The Smart Amusement Park Scene activates security, ticketing, virtual reality rides, and personalized services. It sends notifications and responds to visitor entry, peak visitor levels, ride starts, help requests, and emergencies with actions like optimizing wait times, dispatching assistance, and initiating evacuation procedures.",
        "general_docstring": "The Smart Amusement Park Scene manages security, ticketing, rides, and services, responding to visitors and emergencies with notifications and actions to enhance the visitor experience."
    },
    {
        "code": "eventBus.on('participantCheckedIn', (participantId) => {\n    event.sendNotification(`Participant ${participantId} checked in.`); \n    event.trackParticipantLocation(participantId); \n    event.provideEventSchedule(participantId); \n});\neventBus.on('crowdDetected', (location) => {\n    event.sendNotification(`Crowd detected at ${location}. Taking crowd control measures.`); \n    event.activateCrowdControl(location); \n});\neventBus.on('qrCodeScanned', (participantId, qrCodeData) => {\n    event.sendNotification(`QR code scanned by participant ${participantId}.`); \n    event.processQrCodeData(participantId, qrCodeData); \n});\neventBus.on('emergencyDetected', () => {\n    event.sendNotification('Emergency detected! Initiating evacuation procedures.'); \n    event.activateEvacuationProtocol(); \n    event.guideParticipantsToExits(); \n});\neventBus.on('equipmentFailureDetected', (equipmentId) => {\n    event.sendNotification(`Equipment failure detected: ${equipmentId}. Dispatching repair team.`); \n    event.dispatchRepairTeam(equipmentId); \n    event.activateBackupSystems(equipmentId); \n});\nfunction startSmartEventManagementScene() {\n    event.turnOnSecuritySystem(); \n    event.activateSmartWristbands(); \n    event.setupQrCodeScanners(); \n    event.deploySensors(); \n    event.sendNotification('Smart Event Management Scene started.'); \n}\nstartSmartEventManagementScene();",
        "accurate_docstring": "The Smart Event Management Scene starts by activating the security system, smart wristbands, QR code scanners, and deploying sensors. Notifications are sent to staff and participants. When a participant checks in, a notification is sent, the participant's location is tracked, and the event schedule is provided. Crowd detection triggers a notification and crowd control measures. When a participant scans a QR code, a notification is sent, and the QR code data is processed. In case of an emergency, an evacuation protocol is initiated, and participants are guided to exits. Equipment failure triggers a notification, dispatch of a repair team, and activation of backup systems.",
        "docstring": "The Smart Event Management Scene activates security, wristbands, QR code scanners, and sensors. It sends notifications and responds to participant check-ins, crowd detection, QR code scans, emergencies, and equipment failures with actions like tracking locations, controlling crowds, processing data, initiating evacuation, and dispatching repair teams.",
        "general_docstring": "The Smart Event Management Scene manages security, wristbands, QR codes, and sensors, responding to participants and emergencies with notifications and actions to enhance event safety and management."
    },
    {
        "code": "eventBus.on('bookBorrowed', (userId, bookId) => {\n    event.sendNotification(`User ${userId} borrowed book ${bookId}.`); \n    event.updateInventory(bookId, 'borrowed'); \n    event.trackBorrowingHistory(userId, bookId); \n    event.recommendBooks(userId); \n});\n\neventBus.on('bookReturned', (userId, bookId) => {\n    event.sendNotification(`User ${userId} returned book ${bookId}.`); \n    event.updateInventory(bookId, 'available'); \n    event.cleanAndSortBook(bookId); \n});\n\neventBus.on('userLoggedInEBookSystem', (userId) => {\n    event.sendNotification(`User ${userId} logged into the eBook system.`); \n    event.recommendEBooks(userId); \n});\n\neventBus.on('lowInventoryDetected', (bookId) => {\n    event.sendNotification(`Low inventory detected for book ${bookId}. Reordering.`); \n    event.reorderBook(bookId); \n});\n\neventBus.on('emergencyDetected', () => {\n    event.sendNotification('Emergency detected! Initiating evacuation procedures.'); \n    event.activateEvacuationProtocol(); \n    event.guideUsersToExits(); \n});\n\neventBus.on('equipmentFailureDetected', (equipmentId) => {\n    event.sendNotification(`Equipment failure detected: ${equipmentId}. Dispatching repair team.`); \n    event.dispatchRepairTeam(equipmentId); \n    event.activateBackupSystems(equipmentId); \n});\n\nfunction startSmartLibraryScene() {\n    event.turnOnSecuritySystem(); \n    event.activateAutoBorrowReturnSystem(); \n    event.turnOnEBookSystem(); \n    event.activateSmartRecommendationSystem(); \n    event.sendNotification('Smart Library Scene started.'); \n}\n\nstartSmartLibraryScene();",
        "accurate_docstring": "The Smart Library Scene starts by activating the security system, auto borrow/return system, eBook system, and smart recommendation system. Notifications are sent to staff and users. When a user borrows a book, a notification is sent, inventory status is updated, borrowing history is tracked, and book recommendations are provided. When a user returns a book, a notification is sent, inventory status is updated, and the book is cleaned and sorted. When a user logs into the eBook system, a notification is sent, and eBook recommendations are provided. Low inventory detection triggers a notification and book reordering. In case of an emergency, an evacuation protocol is initiated, and users are guided to exits. Equipment failure triggers a notification, dispatch of a repair team, and activation of backup systems.",
        "docstring": "The Smart Library Scene activates security, auto borrow/return, eBook, and recommendation systems. It sends notifications and responds to book borrowing/returning, eBook system logins, low inventory, emergencies, and equipment failures with actions like updating inventory, tracking history, recommending books, initiating evacuation, and dispatching repair teams.",
        "general_docstring": "The Smart Library Scene manages security, borrowing, eBooks, and recommendations, responding to users and emergencies with notifications and actions to enhance library efficiency and user experience."
    },
    {
        "code": "eventBus.on('foodInventoryUpdated', (item, quantity) => {\n    event.sendNotification(`Inventory updated: ${item} - ${quantity} units.`); \n    event.checkFoodInventory(); \n    event.suggestRecipes(); \n});\neventBus.on('foodExpiringSoon', (item, daysLeft) => {\n    event.sendNotification(`Food item ${item} is expiring in ${daysLeft} days.`); \n    event.suggestRecipesUsingItem(item); \n});\neventBus.on('foodOutOfStock', (item) => {\n    event.sendNotification(`Food item ${item} is out of stock.`); \n    event.addToShoppingList(item); \n});\neventBus.on('shoppingListUpdated', (item, action) => {\n    event.sendNotification(`Shopping list updated: ${item} has been ${action}.`); \n});\neventBus.on('foodWasteDetected', (item, quantity) => {\n    event.sendNotification(`Food waste detected: ${item} - ${quantity} units wasted.`); \n    event.updateFoodWasteLog(item, quantity); \n    event.suggestWaysToReduceWaste(); \n});\nfunction startSmartKitchenManagementScene() {\n    event.turnOnSmartFridge(); \n    event.monitorFoodInventory(); \n    event.activateRecipeSuggestionSystem(); \n    event.sendNotification('Smart Kitchen Management Scene started.'); \n}\nstartSmartKitchenManagementScene();",
        "accurate_docstring": "The Smart Kitchen Management Scene starts by activating the smart fridge, monitoring food inventory, and activating the recipe suggestion system. Notifications are sent to the user. When food inventory is updated, a notification is sent, the inventory is checked, and recipes are suggested. When food is expiring soon, a notification is sent, and recipes using that food item are suggested. When food is out of stock, a notification is sent, and the item is added to the shopping list. Shopping list updates trigger a notification. Food waste detection triggers a notification, updates the food waste log, and suggests ways to reduce waste.",
        "docstring": "The Smart Kitchen Management Scene activates the smart fridge, inventory monitoring, and recipe suggestions. It sends notifications and responds to inventory updates, food expiration, out-of-stock items, shopping list updates, and food waste with actions like checking inventory, suggesting recipes, updating shopping lists, and logging waste.",
        "general_docstring": "The Smart Kitchen Management Scene manages the fridge, inventory, and recipes, responding to updates and waste with notifications and actions to reduce food waste and enhance kitchen efficiency."
    },
    {
        "code": "eventBus.on('elevatorCalled', (userId, floor) => {\n    event.sendNotification(`User ${userId} called the elevator to floor ${floor}.`); \n    event.dispatchElevator(userId, floor); \n});\neventBus.on('elevatorArrived', (userId, floor) => {\n    event.sendNotification(`Elevator arrived at floor ${floor} for user ${userId}.`); \n    event.openElevatorDoors(floor); \n    event.logElevatorUsage(userId, floor); \n});\neventBus.on('peakHoursDetected', () => {\n    event.sendNotification('Peak hours detected. Optimizing elevator operations.'); \n    event.optimizeElevatorSchedule(); \n    event.groupRequestsByProximity(); \n});\neventBus.on('elevatorFailureDetected', (elevatorId) => {\n    event.sendNotification(`Elevator ${elevatorId} failure detected. Dispatching repair team.`); \n    event.dispatchRepairTeam(elevatorId); \n    event.activateBackupElevator(elevatorId); \n});\neventBus.on('emergencyDetected', () => {\n    event.sendNotification('Emergency detected! Activating emergency elevator protocol.'); \n    event.activateEmergencyElevatorProtocol(); \n    event.guideUsersToExits(); \n});\nfunction startSmartElevatorManagementScene() {\n    event.turnOnElevatorSystem(); \n    event.monitorElevatorUsage(); \n    event.activateOptimizationAlgorithms(); \n    event.sendNotification('Smart Elevator Management Scene started.'); \n}\nstartSmartElevatorManagementScene();",
        "accurate_docstring": "The Smart Elevator Management Scene starts by activating the elevator system, monitoring elevator usage, and activating optimization algorithms. Notifications are sent to users. When a user calls the elevator, a notification is sent, and the elevator is dispatched to the specified floor. When the elevator arrives, a notification is sent, the doors open, and the usage is logged. Peak hours detection triggers a notification, optimization of the elevator schedule, and grouping of requests by proximity. Elevator failure detection triggers a notification, dispatch of a repair team, and activation of a backup elevator. In case of an emergency, an emergency protocol is activated, and users are guided to exits.",
        "docstring": "The Smart Elevator Management Scene activates the elevator system, usage monitoring, and optimization algorithms. It sends notifications and responds to user calls, arrivals, peak hours, failures, and emergencies with actions like dispatching elevators, optimizing schedules, and guiding users to exits.",
        "general_docstring": "The Smart Elevator Management Scene manages elevator operations, responding to user calls, peak hours, failures, and emergencies with notifications and optimized actions to enhance efficiency and safety."
    },
    {
        "code": "eventBus.on('babyAsleep', (babyId) => {\n    event.sendNotification(`Baby ${babyId} is asleep.`); \n    event.startSleepMonitoring(babyId); \n});\neventBus.on('babyAwake', (babyId) => {\n    event.sendNotification(`Baby ${babyId} is awake.`); \n    event.stopSleepMonitoring(babyId); \n});\neventBus.on('healthAnomalyDetected', (babyId, anomaly) => {\n    event.sendNotification(`Health anomaly detected for baby ${babyId}: ${anomaly}.`); \n    event.alertParents(babyId, anomaly); \n    event.recordHealthData(babyId, anomaly); \n});\neventBus.on('environmentalAnomalyDetected', (anomaly) => {\n    event.sendNotification(`Environmental anomaly detected: ${anomaly}.`); \n    event.adjustEnvironment(anomaly); \n});\neventBus.on('babyCrying', (babyId) => {\n    event.sendNotification(`Baby ${babyId} is crying.`); \n    event.alertParents(babyId, 'crying'); \n    event.playSoothingMusic(babyId); \n});\nfunction startSmartBabyMonitoringScene() {\n    event.turnOnBabyMonitor(); \n    event.activateHealthMonitoring(); \n    event.setEnvironmentalControls(); \n    event.sendNotification('Smart Baby Monitoring Scene started.'); \n}\nstartSmartBabyMonitoringScene();",
        "accurate_docstring": "The Smart Baby Monitoring Scene starts by activating the baby monitor, health monitoring, and environmental controls. Notifications are sent to parents. When the baby falls asleep, a notification is sent, and sleep monitoring begins. When the baby wakes up, a notification is sent, and sleep monitoring stops. Health anomalies detected trigger a notification, alerting parents, and recording health data. Environmental anomalies trigger a notification and adjustment of the environment. When the baby cries, a notification is sent, parents are alerted, and soothing music is played.",
        "docstring": "The Smart Baby Monitoring Scene activates the baby monitor, health monitoring, and environmental controls. It sends notifications and responds to the baby sleeping, waking, health anomalies, environmental anomalies, and crying with actions like monitoring sleep, alerting parents, and playing soothing music.",
        "general_docstring": "The Smart Baby Monitoring Scene manages baby monitoring, health, and environment, responding to sleep, waking, anomalies, and crying with notifications and actions to enhance baby safety and parent awareness."
    },
    {
        "code": "eventBus.on('classStarted', (classId) => {\n    event.sendNotification(`Class ${classId} has started.`); \n    event.turnOnInteractiveDevices(classId); \n    event.startAttendanceTracking(classId); \n});\neventBus.on('classEnded', (classId) => {\n    event.sendNotification(`Class ${classId} has ended.`); \n    event.turnOffInteractiveDevices(classId); \n    event.saveAttendanceRecords(classId); \n});\neventBus.on('studentLoggedIn', (studentId) => {\n    event.sendNotification(`Student ${studentId} logged into the online learning platform.`); \n    event.provideLearningResources(studentId); \n    event.trackLearningProgress(studentId); \n});\neventBus.on('equipmentFailureDetected', (equipmentId) => {\n    event.sendNotification(`Equipment failure detected: ${equipmentId}. Dispatching repair team.`); \n    event.dispatchRepairTeam(equipmentId); \n    event.activateBackupEquipment(equipmentId); \n});\neventBus.on('emergencyDetected', () => {\n    event.sendNotification('Emergency detected! Initiating evacuation procedures.'); \n    event.activateEvacuationProtocol(); \n    event.guideStudentsAndStaffToExits(); \n});\nfunction startSmartSchoolScene() {\n    event.turnOnSecuritySystem(); \n    event.activateSmartClassroomManagement(); \n    event.turnOnOnlineLearningPlatform(); \n    event.sendNotification('Smart School Scene started.'); \n}\nstartSmartSchoolScene();",
        "accurate_docstring": "The Smart School Scene starts by activating the security system, smart classroom management system, and online learning platform. Notifications are sent to students and staff. When a class starts, a notification is sent, interactive teaching devices are turned on, and attendance tracking begins. When a class ends, a notification is sent, interactive teaching devices are turned off, and attendance records are saved. When a student logs into the online learning platform, a notification is sent, learning resources are provided, and learning progress is tracked. Equipment failure detection triggers a notification, dispatch of a repair team, and activation of backup equipment. In case of an emergency, an evacuation protocol is initiated, and students and staff are guided to exits.",
        "docstring": "The Smart School Scene activates security, classroom management, and online learning systems. It sends notifications and responds to class starts, ends, student logins, equipment failures, and emergencies with actions like turning on devices, tracking attendance, providing resources, and initiating evacuation.",
        "general_docstring": "The Smart School Scene manages security, classrooms, and online learning, responding to classes, logins, failures, and emergencies with notifications and actions to enhance education quality and safety."
    },
    {
        "code": "eventBus.on('packageReady', (packageId) => {\n    event.sendNotification(`Package ${packageId} is ready for delivery.`); \n    event.scheduleDroneDelivery(packageId); \n    event.scheduleAutonomousVehicleDelivery(packageId); \n});\neventBus.on('droneDeliveryStarted', (droneId, packageId) => {\n    event.sendNotification(`Drone ${droneId} started delivery for package ${packageId}.`); \n    event.trackDroneLocation(droneId); \n});\neventBus.on('autonomousVehicleDeliveryStarted', (vehicleId, packageId) => {\n    event.sendNotification(`Autonomous vehicle ${vehicleId} started delivery for package ${packageId}.`); \n    event.trackVehicleLocation(vehicleId); \n});\neventBus.on('droneDeliveryCompleted', (droneId, packageId) => {\n    event.sendNotification(`Drone ${droneId} completed delivery for package ${packageId}.`); \n    event.updatePackageStatus(packageId, 'delivered'); \n});\neventBus.on('autonomousVehicleDeliveryCompleted', (vehicleId, packageId) => {\n    event.sendNotification(`Autonomous vehicle ${vehicleId} completed delivery for package ${packageId}.`); \n    event.updatePackageStatus(packageId, 'delivered'); \n});\neventBus.on('droneFailureDetected', (droneId) => {\n    event.sendNotification(`Drone ${droneId} failure detected. Dispatching repair team.`); \n    event.dispatchRepairTeam(droneId); \n    event.rescheduleDeliveryForDrone(droneId); \n});\neventBus.on('autonomousVehicleFailureDetected', (vehicleId) => {\n    event.sendNotification(`Autonomous vehicle ${vehicleId} failure detected. Dispatching repair team.`); \n    event.dispatchRepairTeam(vehicleId); \n    event.rescheduleDeliveryForVehicle(vehicleId); \n});\nfunction startSmartDeliveryScene() {\n    event.turnOnDeliverySystem(); \n    event.activateDroneFleet(); \n    event.activateAutonomousVehicleFleet(); \n    event.sendNotification('Smart Delivery Scene started.'); \n}\nstartSmartDeliveryScene();",
        "accurate_docstring": "The Smart Delivery Scene starts by activating the delivery system, drone fleet, and autonomous vehicle fleet. Notifications are sent to staff. When a package is ready, a notification is sent, and both drone and autonomous vehicle deliveries are scheduled. When a drone starts a delivery, a notification is sent, and the drone's location is tracked. Similarly, when an autonomous vehicle starts a delivery, a notification is sent, and the vehicle's location is tracked. Upon completion of drone or autonomous vehicle delivery, notifications are sent, and the package status is updated to 'delivered'. Drone and vehicle failures trigger notifications, dispatch of repair teams, and rescheduling of deliveries.",
        "docstring": "The Smart Delivery Scene activates the delivery system, drone fleet, and autonomous vehicle fleet. It sends notifications and responds to package readiness, delivery starts, completions, and equipment failures with actions like scheduling deliveries, tracking locations, updating statuses, and dispatching repair teams.",
        "general_docstring": "The Smart Delivery Scene manages drones and autonomous vehicles, responding to package readiness, deliveries, and failures with notifications and optimized actions to enhance delivery efficiency and reliability."
    },
    {
        "code": "eventBus.on('vehicleBooked', (userId, vehicleId, bookingTime) => {\n    event.sendNotification(`User ${userId} booked vehicle ${vehicleId} for ${bookingTime}.`); \n    event.reserveVehicle(vehicleId, userId); \n    event.sendBookingConfirmation(userId, vehicleId); \n});\neventBus.on('vehicleUnlocked', (userId, vehicleId) => {\n    event.sendNotification(`User ${userId} unlocked vehicle ${vehicleId}.`); \n    event.startTripTracking(userId, vehicleId); \n    event.updateVehicleStatus(vehicleId, 'in use'); \n});\neventBus.on('tripEnded', (userId, vehicleId) => {\n    event.sendNotification(`User ${userId} ended trip with vehicle ${vehicleId}.`); \n    event.stopTripTracking(userId, vehicleId); \n    event.updateVehicleStatus(vehicleId, 'available'); \n    event.calculateTripCost(userId, vehicleId); \n    event.sendInvoice(userId); \n});\neventBus.on('vehicleFailureDetected', (vehicleId) => {\n    event.sendNotification(`Vehicle ${vehicleId} failure detected. Dispatching repair team.`); \n    event.dispatchRepairTeam(vehicleId); \n    event.updateVehicleStatus(vehicleId, 'out of service'); \n});\neventBus.on('vehicleNeedsCleaning', (vehicleId) => {\n    event.sendNotification(`Vehicle ${vehicleId} needs cleaning.`); \n    event.dispatchCleaningTeam(vehicleId); \n    event.updateVehicleStatus(vehicleId, 'cleaning'); \n});\nfunction startSmartCarSharingScene() {\n    event.turnOnCarSharingSystem(); \n    event.activateVehicleFleet(); \n    event.setUpMobileAppIntegration(); \n    event.sendNotification('Smart Car Sharing Scene started.'); \n}\nstartSmartCarSharingScene();",
        "accurate_docstring": "The Smart Car Sharing Scene starts by activating the car sharing system, vehicle fleet, and mobile app integration. Notifications are sent to users. When a user books a vehicle, a notification is sent, the vehicle is reserved, and a booking confirmation is sent to the user. When the user arrives at the vehicle and unlocks it, a notification is sent, trip tracking starts, and the vehicle status is updated to 'in use'. When the user ends the trip, a notification is sent, trip tracking stops, the vehicle status is updated to 'available', the trip cost is calculated, and an invoice is sent to the user. Vehicle failure detection triggers a notification, dispatch of a repair team, and updating the vehicle status to 'out of service'. When a vehicle needs cleaning, a notification is sent, a cleaning team is dispatched, and the vehicle status is updated to 'cleaning'.",
        "docstring": "The Smart Car Sharing Scene activates the car sharing system, vehicle fleet, and mobile app integration. It sends notifications and responds to vehicle bookings, unlocks, trip ends, failures, and cleaning needs with actions like reserving vehicles, tracking trips, updating statuses, dispatching teams, and sending invoices.",
        "general_docstring": "The Smart Car Sharing Scene manages vehicle bookings, usage, and maintenance, responding to user interactions and vehicle needs with notifications and optimized actions to enhance car sharing efficiency and user experience."
    },
    {
        "code": "eventBus.on('fishHealthAnomalyDetected', (sensorId, anomalyDetails) => {\n    event.sendNotification(`Fish health anomaly detected by sensor ${sensorId}: ${anomalyDetails}.`); \n    event.investigateFishHealth(sensorId, anomalyDetails); \n    event.adjustFeedingSchedule(anomalyDetails); \n});\neventBus.on('waterQualityAnomalyDetected', (sensorId, anomalyDetails) => {\n    event.sendNotification(`Water quality anomaly detected by sensor ${sensorId}: ${anomalyDetails}.`); \n    event.activateWaterPurificationSystem(sensorId); \n    event.collectWaterSample(sensorId); \n});\neventBus.on('droneSurveyCompleted', (droneId, surveyData) => {\n    event.sendNotification(`Drone ${droneId} completed survey. Data: ${surveyData}.`); \n    event.analyzeSurveyData(surveyData); \n    event.updateFishPopulationData(surveyData); \n});\neventBus.on('waterTemperatureChangeDetected', (sensorId, temperature) => {\n    event.sendNotification(`Water temperature change detected by sensor ${sensorId}: ${temperature}°C.`); \n    event.adjustWaterTemperatureControl(temperature); \n    event.notifyFishFarmManager(temperature); \n});\neventBus.on('illegalFishingDetected', (droneId, location) => {\n    event.sendNotification(`Illegal fishing detected by drone ${droneId} at location ${location}.`); \n    event.alertAuthorities(location); \n    event.dispatchPatrolDrone(location); \n});\nfunction startSmartFisheryManagementScene() {\n    event.turnOnFisheryMonitoringSystem(); \n    event.activateUnderwaterSensors(); \n    event.deploySurveillanceDrones(); \n    event.setUpWaterQualityControl(); \n    event.sendNotification('Smart Fishery Management Scene started.'); \n}\nstartSmartFisheryManagementScene();",
        "accurate_docstring": "The Smart Fishery Management Scene starts by activating the fishery monitoring system, underwater sensors, surveillance drones, and water quality control system. Notifications are sent to managers. When a fish health anomaly is detected, a notification is sent, the issue is investigated, and the feeding schedule is adjusted. Water quality anomalies trigger a notification, activation of the water purification system, and water sample collection. When a drone completes a survey, a notification is sent, the data is analyzed, and fish population data is updated. Water temperature changes trigger a notification, adjustment of water temperature control, and notification to the fish farm manager. Illegal fishing detection triggers a notification, alerting authorities, and dispatching a patrol drone.",
        "docstring": "The Smart Fishery Management Scene activates monitoring, sensors, drones, and water quality control. It sends notifications and responds to fish health, water quality, drone surveys, temperature changes, and illegal fishing with actions like investigating issues, adjusting schedules, analyzing data, and alerting authorities.",
        "general_docstring": "The Smart Fishery Management Scene manages fish health, water quality, and surveillance, responding to anomalies and illegal activities with notifications and optimized actions to enhance fishery management and security."
    },
    {
        "code":"\nfunction setOvenTemperature(temp) {\n console.log(`Setting oven temperature to ${temp}°C.`);\n   event.setOvenTemperature(temp);\n}\n\n// Function to set a cooking timer\nfunction setCookingTimer(minutes) {\n      console.log(`Setting cooking timer for ${minutes} minutes.`);\n event.setCookingTimer(minutes);\n}\n\n// Function to preheat the oven to a specific temperature\nfunction preheatOven(temp) {\n console.log(`Preheating oven to ${temp}°C.`);\n event.preheatOven(temp);\n}\n\n// Function to check the oven status\nfunction checkOvenStatus() {\n let status = event.getOvenStatus();\n   console.log(`Oven status: ${status}`);\n    return status;\n}\n\n// Function to bake a specific dish with predefined settings\nfunction bakeDish(dish) {\n      const recipes = {\n             'cake': { temp: 180, time: 30 },\n          'pizza': { temp: 220, time: 15 },\n             'bread': { temp: 200, time: 40 }\n  };\n\n  if (recipes[dish]) {\n          console.log(`Baking ${dish} at ${recipes[dish].temp}°C for ${recipes[dish].time} minutes.`);\n              preheatOven(recipes[dish].temp);\n setCookingTimer(recipes[dish].time);\n           // Check oven status during baking process\n       setTimeout(checkOvenStatus, 5000);  // Check status after 5 minutes\n    } else {\n              console.log(`Recipe for ${dish} not found.`);\n     }\n}\n\n// Routine to bake a cake in the morning\nfunction morningBakingRoutine() {\n       if(event.morningBakingRoutine) {\n              bakeDish('cake');\n }\n}\n\n// Routine to prepare dinner by baking a pizza in the evening\nfunction eveningBakingRoutine() {\n  if(event.eveningBakingRoutine) {\n              bakeDish('pizza');\n    }\n}\n",
        "accurate_docstring":"when starts the morningBakingRoutine, we choose to bake a cake. we preheat the oven to 180. we set cooking timer to 30 minutes. when starts the eveningBakingRoutine, we choose to bake a pizza. we preheat the oven to 220. we set cooking timer to 15 minutes.",
        "docstring":".",
        "general_docstring":""
    },
    {
        "code":"\n// Function to set smart lights color\nfunction setLightsColor(color) {\n     console.log(`Setting lights color to ${color}.`);\n event.setLightsColor(color);\n}\n\n// Function to play New Year's music\nfunction playNewYearsMusic(song) {\n       console.log(`Playing New Year's song: ${song}.`);\nevent.playMusic(song);\n}\n\n// Function to adjust the thermostat\nfunction setThermostatTemperature(temp) {\n       console.log(`Setting thermostat temperature to ${temp}°C.`);\n  event.setThermostatTemperature(temp);\n}\n\n// Function to send New Year's greetings\nfunction sendNewYearsGreetings(message) {\n       console.log(`Sending New Year's greetings: ${message}.`);\n     event.sendGreetings(message);\n}\n\n// Function to start a countdown timer for New Year's\nfunction startCountdown() {console.log('Starting New Year's countdown.');\n event.startCountdown('00:00:00');  // Countdown to midnight\n}\n\n// Function to trigger New Year's fireworks display\nfunction triggerFireworks() {\n console.log('Triggering New Year's fireworks display.');\n       event.triggerFireworks();\n}\n\n// Routine to create a cheerful New Year's atmosphere\nfunction newYearsDayRoutine() {\n    const colors = ['red', 'green', 'blue', 'golden'];\n        const songs = ['Song1', 'Song2', 'Song3', 'Song4'];\n       const greetings = [\n           'Happy New Year! Wishing you all the best for the coming year.',\n          'May this year bring new happiness, new goals, and new achievements.',\n           'Wishing you a year filled with love, peace, and joy.',\n                'Happy New Year! Let’s make this year even better than the last.'\n ];\n\n  // Loop to change lights color every 15 minutes\n  for (let i = 0; i < colors.length; i++) {\n              setTimeout(() => {\n                    setLightsColor(colors[i]);\n                }, i * 900000); // 15 minutes interval\n        }\n\n   // Loop to play different New Year's songs every 30 minutes\n       for (let i = 0; i < songs.length; i++) {\n          setTimeout(() => {\n                    playNewYearsMusic(songs[i]);\n          }, i * 1800000); // 30 minutes interval\n   }\n\n   // Loop to send greetings every hour\n  for (let i = 0; i < greetings.length; i++) {\n              setTimeout(() => {\n                    sendNewYearsGreetings(greetings[i]);\n              }, i * 3600000); // 1 hour interval\n   }\n\n   setThermostatTemperature(22);  // Set a cozy room temperature\n     startCountdown();  // Start the countdown to New Year's\n   setTimeout(triggerFireworks, 3600000);  // Trigger fireworks after 1 hour\n}\n\n// Check if today is New Year's Day and run the routine\nfunction checkNewYearsDay() {\n    let today = new Date();\n   if (today.getMonth() === 0 && today.getDate() === 1) {\n                console.log('Today is New Year's Day!');\n          newYearsDayRoutine();\n } else {\n              console.log('Today is not New Year's Day.');\n      }\n}\n",
        "accurate_docstring":"to create a festive atmosphere for New Year's Day. It begins by setting the smart lights' color to red, green, blue, and golden in sequence every 15 minutes. Simultaneously, it plays four different New Year's songs every 30 minutes. Additionally, it sends four New Year's greetings messages every hour. The routine also sets the thermostat temperature to a cozy 22°C, starts a countdown timer to midnight, and triggers a fireworks display after an hour. Finally, the code checks if today is New Year's Day (January 1st) and executes the festive routine if it is, logging messages to indicate whether it's New Year's Day or not.",
        "docstring":"Create a cheerful New Year's atmosphere. setting smart lights' color, playing New Year's music, adjusting the thermostat, sending New Year's greetings, starting a countdown timer, and triggering fireworks. The routine includes timed intervals for changing lights, playing songs, and sending greetings. It checks if today is New Year's Day and executes the routine if it is.",
        "general_docstring":"New Year's day, cheerful, music, thermostat, greetings."
    },
    {
        "code":"\n// Function to set smart lights color\nfunction setLightsColor(color) {\n     console.log(`Setting lights color to ${color}.`);\n event.setLightsColor(color);\n}\n\n// Function to play family-related music\nfunction playFamilyMusic(song) {\n     console.log(`Playing family song: ${song}.`);\n event.playMusic(song);\n}\n\n// Function to adjust the thermostat\nfunction setThermostatTemperature(temp) {\n  console.log(`Setting thermostat temperature to ${temp}°C.`);\n  event.setThermostatTemperature(temp);\n}\n\n// Function to send family greetings\nfunction sendFamilyGreetings(message) {\n console.log(`Sending family greetings: ${message}.`);\n     event.sendGreetings(message);\n}\n\n// Function to display family photos on a smart display\nfunction displayFamilyPhotos(photo) {\n        console.log(`Displaying family photo: ${photo}.`);\n        event.displayPhoto(photo);\n}\n\n// Routine to create a warm and welcoming Global Family Day atmosphere\nfunction globalFamilyDayRoutine() {\n const colors = ['warm white', 'soft yellow', 'cool white'];\n    const songs = ['FamilySong1', 'FamilySong2', 'FamilySong3', 'FamilySong4'];\n       const greetings = [\n           'Happy Global Family Day! Cherish the moments with your loved ones.',\n             'Family is the heart of our home. Happy Global Family Day!',\n              'Wishing you a day filled with love, joy, and family. Happy Global Family Day!',\n          'Happy Global Family Day! Together we are stronger.'\n  ];\n    const photos = ['photo1.jpg', 'photo2.jpg', 'photo3.jpg', 'photo4.jpg'];\n\n        // Loop to change lights color every 20 minutes\n   for (let i = 0; i < colors.length; i++) {\n             setTimeout(() => {\n                        setLightsColor(colors[i]);\n            }, i * 1200000); // 20 minutes interval\n   }\n\n   // Loop to play different family-related songs every 40 minutes\n       for (let i = 0; i < songs.length; i++) {\n          setTimeout(() => {\n                    playFamilyMusic(songs[i]);\n                }, i * 2400000); // 40 minutes interval\n       }\n\n   // Loop to send greetings every 1 hour\n    for (let i = 0; i < greetings.length; i++) {\n          setTimeout(() => {\n                        sendFamilyGreetings(greetings[i]);\n            }, i * 3600000); // 1 hour interval\n       }\n\n   // Loop to display family photos every 30 minutes\n     for (let i = 0; i < photos.length; i++) {\n         setTimeout(() => {\n                    displayFamilyPhotos(photos[i]);\n           }, i * 1800000); // 30 minutes interval\n       }\n\n   setThermostatTemperature(22);  // Set a cozy room temperature\n}\n\n// Check if today is Global Family Day (January 1st) and run the routine\nfunction checkGlobalFamilyDay() {\n       let today = new Date();\n       if (today.getMonth() === 0 && today.getDate() === 1) {\n            console.log('Today is Global Family Day!');\n               globalFamilyDayRoutine();\n     } else {\n              console.log('Today is not Global Family Day.');\n   }\n}\n",
        "accurate_docstring":"Create a warm and welcoming atmosphere for Global Family Day. The program should set smart lights to different colors every 20 minutes, play family-related songs every 40 minutes, send family greetings every hour, display family photos every 30 minutes, and adjust the thermostat to a cozy 22°C. It should check if today is January 1st before running the routine.",
        "docstring":"For Global Family Day. This scenario will include setting up family-themed lighting, playing family-related music, adjusting the thermostat for comfort, sending family greetings, and displaying family photos on a smart display.",
        "general_docstring":"Global Family Day, music, thermostat, photos."
    },
    {
        "code":"\n// Function to set smart lights color\nfunction setLightsColor(color) {\n     console.log(`Setting lights color to ${color}.`);\n event.setLightsColor(color);\n}\n\n// Function to play peaceful music\nfunction playPeacefulMusic(song) {\n console.log(`Playing peaceful song: ${song}.`);\n       event.playMusic(song);\n}\n\n// Function to adjust the thermostat\nfunction setThermostatTemperature(temp) {\n  console.log(`Setting thermostat temperature to ${temp}°C.`);\n  event.setThermostatTemperature(temp);\n}\n\n// Function to send peace messages\nfunction sendPeaceMessage(message) {\n      console.log(`Sending peace message: ${message}.`);\n        event.sendMessage(message);\n}\n\n// Function to display peaceful scenes on a smart display\nfunction displayPeacefulScenes(image) {\n      console.log(`Displaying peaceful scene: ${image}.`);\n      event.displayImage(image);\n}\n\n// Routine to create a serene World Day of Peace atmosphere\nfunction worldDayOfPeaceRoutine() {\n const colors = ['blue', 'white', 'light blue', 'soft green'];\n     const songs = ['PeacefulSong1', 'PeacefulSong2', 'PeacefulSong3', 'PeacefulSong4'];\n       const messages = [\n            'May peace prevail on Earth.',\n            'Peace begins with a smile.',\n         'Wishing you peace and serenity on this day.',\n            'Let there be peace on Earth.'\n        ];\n    const images = ['peaceful_scene1.jpg', 'peaceful_scene2.jpg', 'peaceful_scene3.jpg', 'peaceful_scene4.jpg'];\n\n    // Loop to change lights color every 20 minutes\n   for (let i = 0; i < colors.length; i++) {\n             setTimeout(() => {\n                        setLightsColor(colors[i]);\n            }, i * 1200000); // 20 minutes interval\n   }\n\n   // Loop to play different peaceful songs every 30 minutes\n     for (let i = 0; i < songs.length; i++) {\n          setTimeout(() => {\n                    playPeacefulMusic(songs[i]);\n              }, i * 1800000); // 30 minutes interval\n       }\n\n   // Loop to send peace messages every 1 hour\n       for (let i = 0; i < messages.length; i++) {\n           setTimeout(() => {\n                        sendPeaceMessage(messages[i]);\n                }, i * 3600000); // 1 hour interval\n       }\n\n   // Loop to display peaceful scenes every 40 minutes\n   for (let i = 0; i < images.length; i++) {\n         setTimeout(() => {\n                    displayPeacefulScenes(images[i]);\n         }, i * 2400000); // 40 minutes interval\n       }\n\n   setThermostatTemperature(22);  // Set a cozy room temperature\n}\n\n// Check if today is World Day of Peace (September 21st) and run the routine\nfunction checkWorldDayOfPeace() {\n   let today = new Date();\n  if (today.getMonth() === 8 && today.getDate() === 21) { // September is month 8 in JavaScript Date\nconsole.log('Today is World Day of Peace!');\n           worldDayOfPeaceRoutine();\n     } else {\n console.log('Today is not World Day of Peace.');\n       }\n}\n",
        "accurate_docstring":"create a serene atmosphere for the World Day of Peace on September 21st. The program should set smart lights to different peaceful colors every 20 minutes, play peaceful songs every 30 minutes, send peace messages every hour, display peaceful scenes every 40 minutes, and adjust the thermostat to a cozy 22°C. It should check if today is September 21st before running the routine.",
        "docstring":"Create a serene for World Day of Peace. setting up calming lighting, playing peaceful music, displaying peace messages, and adjusting the thermostat for comfort. Additionally, we can display images of peaceful scenes on a smart display.",
        "general_docstring":"World Day of Peace, light, music, peace messages, thermostat, images"
    },
    {
        "code":"\n// Function to set smart lights color for productivity\nfunction setLightsColor(color) {\n    console.log(`Setting lights color to ${color}.`);\n event.setLightsColor(color);\n}\n\n// Function to play background music for focus\nfunction playBackgroundMusic(song) {\n   console.log(`Playing background music: ${song}.`);\n        event.playMusic(song);\n}\n\n// Function to adjust the thermostat\nfunction setThermostatTemperature(temp) {\n      console.log(`Setting thermostat temperature to ${temp}°C.`);\n      event.setThermostatTemperature(temp);\n}\n\n// Function to display informative messages about customs regulations\nfunction displayCustomsMessage(message) {\n      console.log(`Displaying customs message: ${message}.`);\n   event.displayMessage(message);\n}\n\n// Function to display international customs-related images on a smart display\nfunction displayCustomsImage(image) {\n   console.log(`Displaying customs-related image: ${image}.`);\n    event.displayImage(image);\n}\n\n// Routine to create a professional International Customs Day atmosphere in a workplace\nfunction internationalCustomsDayRoutine() {\n const colors = ['cool white', 'daylight'];\n    const songs = ['FocusMusic1', 'FocusMusic2', 'FocusMusic3'];\n      const messages = [\n            'Understanding customs regulations is key to international trade success.',\n               'Customs procedures ensure the safety and compliance of international trade.',\n            'Stay updated with the latest customs regulations to avoid delays.',\n              'Effective customs management enhances global trade efficiency.'\n  ];\n    const images = ['customs_image1.jpg', 'customs_image2.jpg', 'customs_image3.jpg'];\n\n      // Loop to change lights color every 30 minutes\n       for (let i = 0; i < colors.length; i++) {\n         setTimeout(() => {\n                    setLightsColor(colors[i]);\n       }, i * 1800000); // 30 minutes interval\n        }\n\n   // Loop to play different background music every 1 hour\n   for (let i = 0; i < songs.length; i++) {\n              setTimeout(() => {\n       playBackgroundMusic(songs[i]);\n         }, i * 3600000); // 1 hour interval\n   }\n\n   // Loop to display customs messages every 45 minutes\n      for (let i = 0; i < messages.length; i++) {\n      setTimeout(() => {\n                     displayCustomsMessage(messages[i]);\n           }, i * 2700000); // 45 minutes interval\n   }\n\n   // Loop to display customs-related images every 30 minutes\for (let i = 0; i < images.length; i++) {\n              setTimeout(() => {\n                    displayCustomsImage(images[i]);\n           }, i * 1800000); // 30 minutes interval\n       }\n\n   setThermostatTemperature(22);  // Set a comfortable room temperature\n}\n\n// Check if today is International Customs Day (January 26th) and run the routine\nfunction checkInternationalCustomsDay() {\n  let today = new Date();\n        if (today.getMonth() === 0 && today.getDate() === 26) { // January is month 0 in JavaScript Date\n          console.log('Today is International Customs Day!');\n      internationalCustomsDayRoutine();\n      } else {\n              console.log('Today is not International Customs Day.');\n   }\n}\n",
        "accurate_docstring":"create a professional atmosphere for International Customs Day on January 26th in a workplace. The program should set smart lights to cool white and daylight every 30 minutes, play background music for focus every hour, display informative messages about customs regulations every 45 minutes, and show international customs-related images every 30 minutes. It should also adjust the thermostat to a comfortable 22°C and check if today is January 26th before running the routine.",
        "docstring":"Create a professional scene for International Customs Day. setting up lighting for productivity, displaying informative messages about customs regulations, playing background music to enhance focus, adjusting the thermostat for a comfortable working environment, and displaying international customs-related images on smart displays.",
        "general_docstring":"International Customs Day, lights, thermostat, music, messages, images"
    },
    {
        "code":"\n// Function to set smart lights color for a solemn atmosphere\nfunction setLightsColor(color) {\nconsole.log(`Setting lights color to ${color}.`);\n      event.setLightsColor(color);\n}\n\n// Function to play background speeches or music\nfunction playBackgroundAudio(audio) {\n        console.log(`Playing background audio: ${audio}.`);\n       event.playAudio(audio);\n}\n\n// Function to adjust the thermostat\nfunction setThermostatTemperature(temp) {\n     console.log(`Setting thermostat temperature to ${temp}°C.`);\n      event.setThermostatTemperature(temp);\n}\n\n// Function to display informative messages about the Holocaust\nfunction displayInformativeMessage(message) {\n        console.log(`Displaying informative message: ${message}.`);\n       event.displayMessage(message);\n}\n\n// Function to display historical photos on a smart display\nfunction displayHistoricalPhoto(photo) {\n    console.log(`Displaying historical photo: ${photo}.`);\n        event.displayPhoto(photo);\n}\n\n// Routine to create a respectful International Holocaust Remembrance Day atmosphere in a commemorative museum\nfunction holocaustRemembranceDayRoutine() {\n  const colors = ['dim white', 'soft blue'];\n        const audios = ['Speech1.mp3', 'Speech2.mp3', 'Music1.mp3', 'Music2.mp3'];\n    const messages = [\n                'Remembering the victims of the Holocaust.',\n          'Honoring the memory of those who perished.',\n             'Educating future generations about the Holocaust.',\n              'Never forget the atrocities of the Holocaust.'\n       ];\n    const photos = ['photo1.jpg', 'photo2.jpg', 'photo3.jpg', 'photo4.jpg'];\n\n        // Loop to change lights color every 30 minutes\n   for (let i = 0; i < colors.length; i++) {\n             setTimeout(() => {\n       setLightsColor(colors[i]);\n             }, i * 1800000); // 30 minutes interval\n       }\n\n   // Loop to play different background speeches or music every 1 hour\n       for (let i = 0; i < audios.length; i++) {\n         setTimeout(() => {\n                    playBackgroundAudio(audios[i]);\n  }, i * 3600000); // 1 hour interval\n    }\n\n   // Loop to display informative messages every 45 minutes\n  for (let i = 0; i < messages.length; i++) {\n           setTimeout(() => {\n               displayInformativeMessage(messages[i]);\n                }, i * 2700000); // 45 minutes interval\n  }\n\n    // Loop to display historical photos every 30 minutes\n for (let i = 0; i < photos.length; i++) {\n         setTimeout(() => {\n                    displayHistoricalPhoto(photos[i]);\n       }, i * 1800000); // 30 minutes interval\n        }\n\n   setThermostatTemperature(22);  // Set a comfortable room temperature\n}\n\n// Check if today is International Holocaust Remembrance Day (January 27th) and run the routine\nfunction checkHolocaustRemembranceDay() {\n let today = new Date();\n  if (today.getMonth() === 0 && today.getDate() === 27) { // January is month 0 in JavaScript Date\n  console.log('Today is International Holocaust Remembrance Day.');\n              holocaustRemembranceDayRoutine();\n } else {\n              console.log('Today is not International Holocaust Remembrance Day.');\n     }\n}\n",
        "accurate_docstring":"create a respectful atmosphere for International Holocaust Remembrance Day on January 27th in a commemorative museum. The program should set smart lights to dim white and soft blue every 30 minutes, play background speeches or music every hour, display informative messages about the Holocaust every 45 minutes, and show historical photos every 30 minutes. It should also adjust the thermostat to a comfortable 22°C and check if today is January 27th before running the routine.",
        "docstring":"Create a respectful scene for International Holocaust Remembrance Day. setting up appropriate lighting, playing background speeches or music, displaying informative messages and historical photos, and adjusting the thermostat for comfort. The goal is to create an environment that honors the memory of the Holocaust victims and educates visitors.",
        "general_docstring":"Holocaust Remembrance Day, lighting, speeches, music, thermostat, messages."
    },
    {
        "code":"\n// Function to set smart lights color for a presentation atmosphere\nfunction setLightsColor(color) {\n  console.log(`Setting lights color to ${color}.`);\n     event.setLightsColor(color);\n}\n\n// Function to play background music before the speech\nfunction playBackgroundMusic(song) {\n  console.log(`Playing background music: ${song}.`);\n       event.playMusic(song);\n}\n\n// Function to stop the music when the professor starts to speak\nfunction stopMusic() {\n    console.log('Stopping background music.');\n       event.stopMusic();\n}\n\n// Function to adjust the thermostat\nfunction setThermostatTemperature(temp) {\n console.log(`Setting thermostat temperature to ${temp}°C.`);\n     event.setThermostatTemperature(temp);\n}\n\n// Function to display informational messages about data protection\nfunction displayInformativeMessage(message) {\n   console.log(`Displaying informational message: ${message}.`);\n    event.displayMessage(message);\n}\n\n// Function to display slides or relevant information on a smart display\nfunction displaySlide(slide) {\n    console.log(`Displaying slide: ${slide}.`);\n      event.displaySlide(slide);\n}\n\n// Routine to create a Data Protection Day atmosphere in a conference room\nfunction dataProtectionDayRoutine() {\n       const colors = ['cool white', 'soft blue'];\n      const songs = ['AmbientMusic1', 'AmbientMusic2'];\nconst messages = [\n             'Welcome to Data Protection Day.',\n            'Data protection is essential for privacy and security.',\n                'Learn about best practices for data protection.',\n               'Protecting data helps build trust and integrity.'\n    ];\n    const slides = ['slide1.jpg', 'slide2.jpg', 'slide3.jpg', 'slide4.jpg'];\n\n       // Set initial lighting and temperature\n  setLightsColor(colors[0]);  // Set to cool white for the speech\n       setThermostatTemperature(22);  // Set a comfortable room temperature\n\n   // Loop to play background music before the speech\n       for (let i = 0; i < songs.length; i++) {\n              setTimeout(() => {\n                       playBackgroundMusic(songs[i]);\n                }, i * 1800000); // 30 minutes interval\n  }\n\n   // Loop to display informational messages every 15 minutes\n    for (let i = 0; i < messages.length; i++) {\n              setTimeout(() => {\n                    displayInformativeMessage(messages[i]);\n          }, i * 900000); // 15 minutes interval\n        }\n\n   // Loop to display slides every 20 minutes\n       for (let i = 0; i < slides.length; i++) {\n       setTimeout(() => {\n                     displaySlide(slides[i]);\n              }, i * 1200000); // 20 minutes interval\n  }\n}\n\n// Function to handle the event when the professor starts to speak\nfunction professorStartsToSpeak() {\n  console.log('Professor is starting to speak.');\n       stopMusic();\n}\n\n// Check if today is Data Protection Day (January 28th) and run the routine\nfunction checkDataProtectionDay() {\n let today = new Date();\n       if (today.getMonth() === 0 && today.getDate() === 28) { // January is month 0 in JavaScript Date\n         console.log('Today is Data Protection Day!');\n            dataProtectionDayRoutine();\n\n         // Simulate the professor starting to speak after a delay\n                setTimeout(professorStartsToSpeak, 60000); // Professor starts to speak after 1 minute\n   } else {\n              console.log('Today is not Data Protection Day.');\n        }\n}\n",
        "accurate_docstring":"create an atmosphere for Data Protection Day on January 28th in a conference room. The program should set smart lights to cool white and soft blue, play ambient background music before the speech, stop the music when the professor starts speaking, and adjust the thermostat to a comfortable 22°C. It should also display informational messages about data protection every 15 minutes and show relevant slides every 20 minutes. The program should check if today is January 28th before running the routine, and simulate the professor starting to speak after 1 minute.",
        "docstring":"Create a scene for Data Protection Day. lighting adjustments for an appropriate presentation atmosphere, playing background music before the speech, displaying informational messages about data protection, and managing the thermostat for comfort. Additionally, we can display slides or relevant information on a smart display.",
        "general_docstring":"Data Protection Day, lighting, background music track before the speech"
    },
    {
        "code":"\n// Function to set smart lights color for a calm and respectful atmosphere\nfunction setLightsColor(color) {\n   console.log(`Setting lights color to ${color}.`);\n     event.setLightsColor(color);\n}\n\n// Function to adjust the thermostat\nfunction setThermostatTemperature(temp) {\n       console.log(`Setting thermostat temperature to ${temp}°C.`);\n     event.setThermostatTemperature(temp);\n}\n\n// Function to display informative messages about cancer awareness\nfunction displayInformativeMessage(message) {\n       console.log(`Displaying informative message: ${message}.`);\n   event.displayMessage(message);\n}\n\n// Function to display slides or relevant information on a smart display\nfunction displaySlide(slide) {\n       console.log(`Displaying slide: ${slide}.`);\n   event.displaySlide(slide);\n}\n\n// Routine to create a World Cancer Day atmosphere in a hospital setting\nfunction worldCancerDayRoutine() {\n       const colors = ['soft blue', 'gentle white'];\n const messages = [\n               'Welcome to World Cancer Day.',\n               'Early detection of cancer can save lives.',\n             'Learn about the importance of cancer prevention and treatment.',\n                'Support those affected by cancer and spread awareness.'\n      ];\n    const slides = ['slide1.jpg', 'slide2.jpg', 'slide3.jpg', 'slide4.jpg'];\n\n       // Set initial lighting and temperature\n  setLightsColor(colors[0]);  // Set to soft blue for a calm atmosphere\n setThermostatTemperature(22);  // Set a comfortable room temperature\n\n   // Loop to display informative messages every 15 minutes\n for (let i = 0; i < messages.length; i++) {\n           setTimeout(() => {\n                       displayInformativeMessage(messages[i]);\n               }, i * 900000); // 15 minutes interval\n   }\n\n   // Loop to display slides every 20 minutes\n    for (let i = 0; i < slides.length; i++) {\n                setTimeout(() => {\n                    displaySlide(slides[i]);\n         }, i * 1200000); // 20 minutes interval\n       }\n}\n\n// Function to handle the event when the main presentation or talk starts\nfunction presentationStarts() {\n       console.log('Main presentation is starting.');\n   // Additional actions can be added here if needed when the presentation starts\n}\n\n// Check if today is World Cancer Day (February 4th) and run the routine\nfunction checkWorldCancerDay() {\n     let today = new Date();\n       if (today.getMonth() === 1 && today.getDate() === 4) { // February is month 1 in JavaScript Date\n         console.log('Today is World Cancer Day!');\n               worldCancerDayRoutine();\n\n            // Simulate the main presentation starting after a delay\n         setTimeout(presentationStarts, 3600000); // Main presentation starts after 1 hour\n        } else {\n              console.log('Today is not World Cancer Day.');\n   }\n}\n",
        "accurate_docstring":"create a calm and respectful atmosphere for World Cancer Day on February 4th in a hospital setting. The program should set smart lights to soft blue and gentle white, adjust the thermostat to a comfortable 22°C, display informative messages about cancer awareness every 15 minutes, and show relevant slides every 20 minutes. It should check if today is February 4th before running the routine and simulate the main presentation starting after 1 hour.",
        "docstring":"Create a scene for World Cancer Day. setting up appropriate lighting, displaying informative messages about cancer awareness and prevention, and managing the thermostat for comfort. Additionally, we can display slides or relevant information on a smart display.",
        "general_docstring":"World Cancer Day. lighting, messages about cancer, thermostat, slides on a smart display"
    },
    {
        "code":"\n// Function to set smart lights color for an educational atmosphere\nfunction setLightsColor(color) {\n  console.log(`Setting lights color to ${color}.`);\n     event.setLightsColor(color);\n}\n\n// Function to play educational audio about Darwin\nfunction playEducationalAudio(audio) {\n    console.log(`Playing educational audio: ${audio}.`);\n     event.playAudio(audio);\n}\n\n// Function to stop educational audio\nfunction stopAudio() {\n      console.log('Stopping educational audio.');\n      event.stopAudio();\n}\n\n// Function to adjust the thermostat\nfunction setThermostatTemperature(temp) {\n console.log(`Setting thermostat temperature to ${temp}°C.`);\n  event.setThermostatTemperature(temp);\n}\n\n// Function to display informative messages about Darwin and evolution\nfunction displayInformativeMessage(message) {\n   console.log(`Displaying informative message: ${message}.`);\n      event.displayMessage(message);\n}\n\n// Function to display slides or relevant information on a smart display\nfunction displaySlide(slide) {\n    console.log(`Displaying slide: ${slide}.`);\n      event.displaySlide(slide);\n}\n\n// Routine to create a Darwin Day atmosphere in a museum setting\nfunction darwinDayRoutine() {\n const colors = ['soft white', 'warm yellow'];\n const audios = ['DarwinAudio1.mp3', 'DarwinAudio2.mp3', 'DarwinAudio3.mp3'];\n     const messages = [\n               'Welcome to Darwin Day.',\n             'Learn about Charles Darwin and his contributions to science.',\n          'Discover the principles of evolution and natural selection.',\n  'Explore the impact of Darwin's work on modern biology.'\n       ];\n    const slides = ['slide1.jpg', 'slide2.jpg', 'slide3.jpg', 'slide4.jpg'];\n\n       // Set initial lighting and temperature\n setLightsColor(colors[0]);  // Set to soft white for an educational atmosphere\n setThermostatTemperature(22);  // Set a comfortable room temperature\n\n   // Loop to play educational audio about Darwin\n   for (let i = 0; i < audios.length; i++) {\n             setTimeout(() => {\n              playEducationalAudio(audios[i]);\n               }, i * 1800000); // 30 minutes interval\n       }\n\n      // Loop to display informative messages every 15 minutes\n      for (let i = 0; i < messages.length; i++) {\n              setTimeout(() => {\n                    displayInformativeMessage(messages[i]);\n          }, i * 900000); // 15 minutes interval\n        }\n\n   // Loop to display slides every 20 minutes\n       for (let i = 0; i < slides.length; i++) {\n             setTimeout(() => {\n                       displaySlide(slides[i]);\n              }, i * 1200000); // 20 minutes interval\n  }\n}\n\n// Function to handle the event when a special presentation or talk starts\nfunction presentationStarts() {\n      console.log('Special presentation is starting.');\n     stopAudio();\n}\n\n// Check if today is Darwin Day (February 12th) and run the routine\nfunction checkDarwinDay() {\n let today = new Date();\n       if (today.getMonth() === 1 && today.getDate() === 12) { // February is month 1 in JavaScript Date\n                console.log('Today is Darwin Day!');\n             darwinDayRoutine();\n\n         // Simulate the special presentation starting after a delay\n              setTimeout(presentationStarts, 3600000); // Special presentation starts after 1 hour\n     } else {\n              console.log('Today is not Darwin Day.');\n      }\n}\n",
        "accurate_docstring":"create an educational atmosphere for Darwin Day on February 12th in a museum setting. The program should set smart lights to soft white and warm yellow, adjust the thermostat to a comfortable 22°C, play educational audio about Darwin every 30 minutes, display informative messages about Darwin and evolution every 15 minutes, and show relevant slides every 20 minutes. It should check if today is February 12th before running the routine and simulate a special presentation starting after 1 hour.",
        "docstring":"Create a scene for Darwin Day. setting up appropriate lighting, playing educational audio about Charles Darwin and his contributions to science, displaying informative messages and slides about Darwin and evolution, and managing the thermostat for comfort.",
        "general_docstring":"Darwin Day, lighting, educational audio, slides about Darwin and evolution, thermostat for comfort."
    },
    {
        "code":"\n// Function to set smart lights color for a nostalgic atmosphere\nfunction setLightsColor(color) {\n     console.log(`Setting lights color to ${color}.`);\n     event.setLightsColor(color);\n}\n\n// Function to play historic radio broadcasts or music\nfunction playRadioBroadcast(broadcast) {\nconsole.log(`Playing historic radio broadcast: ${broadcast}.`);\n        event.playRadio(broadcast);\n}\n\n// Function to stop radio broadcast\nfunction stopRadio() {\n    console.log('Stopping radio broadcast.');\n        event.stopRadio();\n}\n\n// Function to adjust the thermostat\nfunction setThermostatTemperature(temp) {\n console.log(`Setting thermostat temperature to ${temp}°C.`);\n  event.setThermostatTemperature(temp);\n}\n\n// Function to display information about radio history and significance\nfunction displayRadioInfo(info) {\n      console.log(`Displaying radio information: ${info}.`);\n   event.displayMessage(info);\n}\n\n// Function to display images or videos on a smart display\nfunction displayMedia(media) {\n     console.log(`Displaying media: ${media}.`);\n   event.displayMedia(media);\n}\n\n// Routine to create a World Radio Day atmosphere in a museum setting\nfunction worldRadioDayRoutine() {\n   const colors = ['soft orange', 'warm red'];\n   const broadcasts = ['Broadcast1.mp3', 'Broadcast2.mp3', 'Broadcast3.mp3'];\n       const info = [\n          'Welcome to World Radio Day.',\n         'Explore the history and impact of radio broadcasting.',\n'Listen to historic radio broadcasts that shaped the world.',\n          'Discover how radio continues to connect people globally.'\n       ];\n    const media = ['image1.jpg', 'image2.jpg', 'video1.mp4', 'image3.jpg'];\n\n        // Set initial lighting and temperature\n       setLightsColor(colors[0]);  // Set to soft orange for a nostalgic atmosphere\n     setThermostatTemperature(22);  // Set a comfortable room temperature\n\n   // Loop to play historic radio broadcasts\n     for (let i = 0; i < broadcasts.length; i++) {\n            setTimeout(() => {\n                    playRadioBroadcast(broadcasts[i]);\n               }, i * 1800000); // 30 minutes interval\n       }\n\n   // Loop to display information every 15 minutes\n  for (let i = 0; i < info.length; i++) {\n         setTimeout(() => {\n                     displayRadioInfo(info[i]);\n            }, i * 900000); // 15 minutes interval\n   }\n\n   // Loop to display images or videos every 20 minutes\n  for (let i = 0; i < media.length; i++) {\n         setTimeout(() => {\n                    displayMedia(media[i]);\n          }, i * 1200000); // 20 minutes interval\n       }\n}\n\n// Function to handle the event when a special presentation or talk starts\nfunction presentationStarts() {\n      console.log('Special presentation is starting.');\n        stopRadio();\n}\n\n// Check if today is World Radio Day (February 13th) and run the routine\nfunction checkWorldRadioDay() {\n     let today = new Date();\n  if (today.getMonth() === 1 && today.getDate() === 13) { // February is month 1 in JavaScript Date\n                console.log('Today is World Radio Day!');\n             worldRadioDayRoutine();\n\n                // Simulate the special presentation starting after a delay\n           setTimeout(presentationStarts, 3600000); // Special presentation starts after 1 hour\n     } else {\nconsole.log('Today is not World Radio Day.');\n  }\n}\n",
        "accurate_docstring":"create a nostalgic atmosphere for World Radio Day on February 13th in a museum setting. The program should set smart lights to soft orange and warm red, adjust the thermostat to a comfortable 22°C, play historic radio broadcasts every 30 minutes, display information about radio history and significance every 15 minutes, and show images or videos on a smart display every 20 minutes. It should check if today is February 13th before running the routine and simulate a special presentation starting after 1 hour.",
        "docstring":"Create a scene for World Radio Day. setting up appropriate lighting, playing historic radio broadcasts or music, displaying information about the history and significance of radio, and managing the thermostat for comfort. Additionally, we can use smart displays to show relevant images or videos related to radio broadcasting.",
        "general_docstring":"World Radio Day, lighting, historic radio broadcasts/music, history of radio, images."
    },
    {
        "code":"\n// Function to set smart lights color for an inclusive atmosphere\nfunction setLightsColor(color) {\n     console.log(`Setting lights color to ${color}.`);\n     event.setLightsColor(color);\n}\n\n// Function to play motivational or educational content\nfunction playContent(content) {\n       console.log(`Playing content: ${content}.`);\n      event.playContent(content);\n}\n\n// Function to stop content playback\nfunction stopContent() {\n  console.log('Stopping content playback.');\n    event.stopContent();\n}\n\n// Function to adjust the thermostat\nfunction setThermostatTemperature(temp) {\n    console.log(`Setting thermostat temperature to ${temp}°C.`);\n  event.setThermostatTemperature(temp);\n}\n\n// Function to display messages related to social justice\nfunction displaySocialJusticeMessage(message) {\n        console.log(`Displaying social justice message: ${message}.`);\n   event.displayMessage(message);\n}\n\n// Function to display images or videos on a smart display\nfunction displayMedia(media) {\n    console.log(`Displaying media: ${media}.`);\n   event.displayMedia(media);\n}\n\n// Routine to create a World Day for Social Justice atmosphere in an office setting\nfunction socialJusticeDayRoutine() {\n    const colors = ['soft purple', 'gentle blue'];\n        const content = ['MotivationalSpeech.mp3', 'EducationalTalk.mp3'];\n        const messages = [\n       'Welcome to World Day for Social Justice.',\n            'Promote social justice and equality in the workplace.',\n          'Learn about the importance of diversity and inclusion.',\n             'Take action to support social justice initiatives.'\n      ];\n    const media = ['image1.jpg', 'video1.mp4', 'image2.jpg'];\n\n       // Set initial lighting and temperature\n       setLightsColor(colors[0]);  // Set to soft purple for an inclusive atmosphere\n     setThermostatTemperature(22);  // Set a comfortable room temperature\n\n    // Loop to play motivational or educational content\n   for (let i = 0; i < content.length; i++) {\n                setTimeout(() => {\n                    playContent(content[i]);\n          }, i * 1800000); // 30 minutes interval\n       }\n\n   // Loop to display messages every 15 minutes\n      for (let i = 0; i < messages.length; i++) {\n           setTimeout(() => {\n                        displaySocialJusticeMessage(messages[i]);\n             }, i * 900000); // 15 minutes interval\n    }\n\n   // Loop to display media every 20 minutes\n     for (let i = 0; i < media.length; i++) {\n          setTimeout(() => {\n                    displayMedia(media[i]);\n           }, i * 1200000); // 20 minutes interval\n       }\n}\n\n// Function to handle the event when a special presentation or talk starts\nfunction presentationStarts() {\n       console.log('Special presentation is starting.');\n stopContent();\n}\n\n// Check if today is World Day for Social Justice (February 20th) and run the routine\nfunction checkSocialJusticeDay() {\n    let today = new Date();\n   if (today.getMonth() === 1 && today.getDate() === 20) { // February is month 1 in JavaScript Date\n         console.log('Today is World Day for Social Justice!');\n           socialJusticeDayRoutine();\n\n           // Simulate the special presentation starting after a delay\n               setTimeout(presentationStarts, 3600000); // Special presentation starts after 1 hour\n      } else {\n              console.log('Today is not World Day for Social Justice.');\n    }\n}\n",
        "accurate_docstring":"set an inclusive atmosphere for World Day for Social Justice on February 20th in an office setting. The program should set smart lights to soft purple and gentle blue, adjust the thermostat to a comfortable 22°C, play motivational or educational content every 30 minutes, display messages related to social justice every 15 minutes, and show images or videos on a smart display every 20 minutes. It should check if today is February 20th before running the routine and simulate a special presentation starting after 1 hour.",
        "docstring":" create a scene for world day for Social Justice. setting up appropriate lighting, playing motivational or educational content, displaying messages related to social justice, and managing the thermostat for comfort. Additionally, we can use smart displays to show relevant images or videos promoting social justice and equality.",
        "general_docstring":"World Day for Social Justice, educational content, social justice, thermostat, images/videos."
    },
    {
        "code":"\n// Function to set smart lights color for a cultural atmosphere\nfunction setLightsColor(color) {\n       console.log(`Setting lights color to ${color}.`);\n     event.setLightsColor(color);\n}\n\n// Function to play cultural music\nfunction playCulturalMusic(music) {\n        console.log(`Playing cultural music: ${music}.`);\n event.playMusic(music);\n}\n\n// Function to stop music playback\nfunction stopMusic() {\n  console.log('Stopping music playback.');\n      event.stopMusic();\n}\n\n// Function to adjust the thermostat\nfunction setThermostatTemperature(temp) {\n  console.log(`Setting thermostat temperature to ${temp}°C.`);\n      event.setThermostatTemperature(temp);\n}\n\n// Function to display messages in different languages\nfunction displayMultilingualMessage(message) {\n   console.log(`Displaying multilingual message: ${message}.`);\n   event.displayMessage(message);\n}\n\n// Function to display images or videos on a smart display\nfunction displayMedia(media) {\n   console.log(`Displaying media: ${media}.`);\n       event.displayMedia(media);\n}\n\n// Routine to create an International Mother Tongue Day atmosphere on a campus\nfunction motherTongueDayRoutine() {\n const colors = ['warm yellow', 'soft green'];\n  const music = ['Music1.mp3', 'Music2.mp3'];\n   const messages = [\n                'Welcome to International Mother Tongue Day.',\n                'Celebrate linguistic diversity and cultural heritage.',\n          'Learn about the importance of preserving mother tongues.',\n               'Promote tolerance and understanding through language.'\n  ];\n     const media = ['image1.jpg', 'image2.jpg', 'video1.mp4'];\n\n   // Set initial lighting and temperature\n   setLightsColor(colors[0]);  // Set to warm yellow for a cultural atmosphere\n   setThermostatTemperature(22);  // Set a comfortable room temperature\n\n    // Loop to play cultural music\n    for (let i = 0; i < music.length; i++) {\n              setTimeout(() => {\n               playCulturalMusic(music[i]);\n           }, i * 1800000); // 30 minutes interval\n       }\n\n   // Loop to display messages every 15 minutes\n      for (let i = 0; i < messages.length; i++) {\n      setTimeout(() => {\n                     displayMultilingualMessage(messages[i]);\n              }, i * 900000); // 15 minutes interval\n    }\n\n   // Loop to display media every 20 minutes\n     for (let i = 0; i < media.length; i++) {\n          setTimeout(() => {\n                    displayMedia(media[i]);\n           }, i * 1200000); // 20 minutes interval\n       }\n}\n\n// Function to handle the event when a special presentation or talk starts\nfunction presentationStarts() {\n       console.log('Special presentation is starting.');\n stopMusic();\n}\n\n// Check if today is International Mother Tongue Day (February 21st) and run the routine\nfunction checkMotherTongueDay() {\n    let today = new Date();\n   if (today.getMonth() === 1 && today.getDate() === 21) { // February is month 1 in JavaScript Date\n         console.log('Today is International Mother Tongue Day!');\n        motherTongueDayRoutine();\n\n            // Simulate the special presentation starting after a delay\n               setTimeout(presentationStarts, 3600000); // Special presentation starts after 1 hour\n      } else {\n              console.log('Today is not International Mother Tongue Day.');\n }\n}\n",
        "accurate_docstring":"create a cultural atmosphere for International Mother Tongue Day on February 21st on a campus. The program should set smart lights to warm yellow and soft green, adjust the thermostat to a comfortable 22°C, play cultural music every 30 minutes, display messages in different languages every 15 minutes, and show images or videos on a smart display every 20 minutes. It should check if today is February 21st before running the routine and simulate a special presentation starting after 1 hour.",
        "docstring":"Create a scene for International Mother Tongue Day. setting up appropriate lighting, playing cultural music, displaying messages in different languages, and managing the thermostat for comfort. Additionally, we can use smart displays to show images or videos related to language diversity and cultural heritage.",
        "general_docstring":"International Mother Tongue Day, lighting, cultural music, thermostat,  language diversity, cultural heritage."
    },
    {
        "code":"\n// Function to set smart lights color for an inclusive atmosphere\nfunction setLightsColor(color) {\n     console.log(`Setting lights color to ${color}.`);\n     event.setLightsColor(color);\n}\n\n// Function to play inspirational content\nfunction playInspirationalContent(content) {\n        console.log(`Playing inspirational content: ${content}.`);\n        event.playContent(content);\n}\n\n// Function to stop content playback\nfunction stopContent() {\n  console.log('Stopping content playback.');\n        event.stopContent();\n}\n\n// Function to adjust the thermostat\nfunction setThermostatTemperature(temp) {\n        console.log(`Setting thermostat temperature to ${temp}°C.`);\n  event.setThermostatTemperature(temp);\n}\n\n// Function to display messages promoting diversity and inclusion\nfunction displayDiversityMessage(message) {\n    console.log(`Displaying diversity message: ${message}.`);\n event.displayMessage(message);\n}\n\n// Function to display images or videos on a smart display\nfunction displayMedia(media) {\n   console.log(`Displaying media: ${media}.`);\n   event.displayMedia(media);\n}\n\n// Routine to create a Zero Discrimination Day atmosphere in a college setting\nfunction zeroDiscriminationDayRoutine() {\n    const colors = ['rainbow', 'soft purple'];\nconst content = ['Speech1.mp3', 'Speech2.mp3'];\n        const messages = [\n            'Welcome to Zero Discrimination Day.',\n            'Celebrate diversity and promote inclusion.',\n         'Stand up against discrimination in all its forms.',\n              'Embrace a culture of respect and equality.'\n      ];\n    const media = ['image1.jpg', 'image2.jpg', 'video1.mp4'];\n\n   // Set initial lighting and temperature\n   setLightsColor(colors[0]);  // Set to rainbow for an inclusive atmosphere\n setThermostatTemperature(22);  // Set a comfortable room temperature\n\n        // Loop to play inspirational content\n     for (let i = 0; i < content.length; i++) {\n            setTimeout(() => {\n                        playInspirationalContent(content[i]);\n         }, i * 1800000); // 30 minutes interval\n   }\n\n   // Loop to display messages every 15 minutes\n  for (let i = 0; i < messages.length; i++) {\n               setTimeout(() => {\n                    displayDiversityMessage(messages[i]);\n             }, i * 900000); // 15 minutes interval\n        }\n\n   // Loop to display media every 20 minutes\n for (let i = 0; i < media.length; i++) {\n              setTimeout(() => {\n                        displayMedia(media[i]);\n               }, i * 1200000); // 20 minutes interval\n   }\n}\n\n// Function to handle the event when a special presentation or talk starts\nfunction presentationStarts() {\n       console.log('Special presentation is starting.');\n     stopContent();\n}\n\n// Check if today is Zero Discrimination Day (March 1st) and run the routine\nfunction checkZeroDiscriminationDay() {\n    let today = new Date();\n       if (today.getMonth() === 2 && today.getDate() === 1) { // March is month 2 in JavaScript Date\n             console.log('Today is Zero Discrimination Day!');\n         zeroDiscriminationDayRoutine();\n\n             // Simulate the special presentation starting after a delay\n               setTimeout(presentationStarts, 3600000); // Special presentation starts after 1 hour\n      } else {\n              console.log('Today is not Zero Discrimination Day.');\n     }\n}\n",
        "accurate_docstring":"set an inclusive atmosphere for Zero Discrimination Day on March 1st. The program should set smart lights to rainbow and soft purple, adjust the thermostat to a comfortable 22°C, play inspirational content every 30 minutes, display messages promoting diversity and inclusion every 15 minutes, and show images or videos on a smart display every 20 minutes. It should check if today is March 1st before running the routine and simulate a special presentation starting after 1 hour.",
        "docstring":"Create a scene for Zero Discrimination Day. setting up inclusive lighting, playing inspirational content, displaying messages promoting diversity and inclusion, and managing the thermostat for comfort. Additionally, we can use smart displays to show images or videos related to anti-discrimination and equality.",
        "general_docstring":"Zero Discrimination Day, lighting, messages, thermostat, anti-discrimination and equality."
    },
    {
        "code":"\n// Function to set smart lights color for a celebratory atmosphere\nfunction setLightsColor(color) {\n    console.log(`Setting lights color to ${color}.`);\n     event.setLightsColor(color);\n}\n\n// Function to play empowering music\nfunction playEmpoweringMusic(music) {\n    console.log(`Playing empowering music: ${music}.`);\n       event.playMusic(music);\n}\n\n// Function to stop music playback\nfunction stopMusic() {\n  console.log('Stopping music playback.');\n      event.stopMusic();\n}\n\n// Function to adjust the thermostat\nfunction setThermostatTemperature(temp) {\n  console.log(`Setting thermostat temperature to ${temp}°C.`);\n      event.setThermostatTemperature(temp);\n}\n\n// Function to display messages celebrating women's achievements\nfunction displayAchievementsMessage(message) {\n  console.log(`Displaying achievements message: ${message}.`);\n  event.displayMessage(message);\n}\n\n// Function to display images or videos on a smart display\nfunction displayMedia(media) {\n       console.log(`Displaying media: ${media}.`);\n   event.displayMedia(media);\n}\n\n// Routine to create an International Women's Day atmosphere in a shopping mall\nfunction womensDayRoutine() {\n       const colors = ['pink', 'purple'];\n    const music = ['Music1.mp3', 'Music2.mp3'];\n       const messages = [\n            'Happy International Women's Day!',\n           'Celebrate the achievements and contributions of women.',\n         'Empower and support women in all walks of life.',\n                'Equality for women is progress for all.'\n     ];\n    const media = ['image1.jpg', 'image2.jpg', 'video1.mp4'];\n\n       // Set initial lighting and temperature\n       setLightsColor(colors[0]);  // Set to pink for a celebratory atmosphere\n   setThermostatTemperature(22);  // Set a comfortable room temperature\n\n    // Loop to play empowering music\n      for (let i = 0; i < music.length; i++) {\n          setTimeout(() => {\n                    playEmpoweringMusic(music[i]);\n            }, i * 1800000); // 30 minutes interval\n       }\n\n   // Loop to display messages every 15 minutes\n      for (let i = 0; i < messages.length; i++) {\n           setTimeout(() => {\n                        displayAchievementsMessage(messages[i]);\n              }, i * 900000); // 15 minutes interval\n    }\n\n   // Loop to display media every 20 minutes\n     for (let i = 0; i < media.length; i++) {\n          setTimeout(() => {\n                    displayMedia(media[i]);\n           }, i * 1200000); // 20 minutes interval\n       }\n}\n\n// Function to handle the event when a special presentation or performance starts\nfunction presentationStarts() {\n        console.log('Special presentation is starting.');\n stopMusic();\n}\n\n// Check if today is International Women's Day (March 8th) and run the routine\nfunction checkWomensDay() {\n    let today = new Date();\n   if (today.getMonth() === 2 && today.getDate() === 8) { // March is month 2 in JavaScript Date\n             console.log('Today is International Women's Day!');\n           womensDayRoutine();\n\n             // Simulate the special presentation starting after a delay\n           setTimeout(presentationStarts, 3600000); // Special presentation starts after 1 hour\n      } else {\n         console.log('Today is not International Women's Day.');\n        }\n}\n",
        "accurate_docstring":"set a celebratory atmosphere for International Women's Day. The program should set smart lights to pink and purple, adjust the thermostat to a comfortable 22°C, play empowering music every 30 minutes, display messages celebrating women's achievements every 15 minutes, and show images or videos on a smart display every 20 minutes. It should check if today is March 8th before running the routine and simulate a special presentation starting after 1 hour.",
        "docstring":"Create a scene for International Women's Day. setting up pink and purple lighting, playing empowering music, displaying messages celebrating women's achievements, and managing the thermostat for comfort. Additionally, we can use smart displays to show images or videos highlighting women's contributions to society.",
        "general_docstring":"International Women's Day, lighting, messages, thermostat, images, videos, women contributions"
    },
    {
        "code":"\n// Function to set smart lights color for a calming atmosphere\nfunction setLightsColor(color) {\nconsole.log(`Setting lights color to ${color}.`);\n      event.setLightsColor(color);\n}\n\n// Function to play educational content\nfunction playEducationalContent(content) {\n    console.log(`Playing educational content: ${content}.`);\n  event.playContent(content);\n}\n\n// Function to stop content playback\nfunction stopContent() {\n  console.log('Stopping content playback.');\n    event.stopContent();\n}\n\n// Function to adjust the thermostat\nfunction setThermostatTemperature(temp) {\n   console.log(`Setting thermostat temperature to ${temp}°C.`);\n   event.setThermostatTemperature(temp);\n}\n\n// Function to display messages promoting understanding and tolerance\nfunction displayToleranceMessage(message) {\n        console.log(`Displaying tolerance message: ${message}.`);\n     event.displayMessage(message);\n}\n\n// Function to display images or videos on a smart display\nfunction displayMedia(media) {\n       console.log(`Displaying media: ${media}.`);\n   event.displayMedia(media);\n}\n\n// Routine to create a Fighting Islamic Phobia International Day atmosphere in a museum\nfunction fightingIslamophobiaDayRoutine() {\n const colors = ['soft blue', 'soft green'];\n   const content = ['Documentary1.mp4', 'Documentary2.mp4'];\n const messages = [\n            'Welcome to Fighting Islamic Phobia International Day.',\n          'Promote understanding and tolerance towards Islam.',\n             'Educate about the rich culture and contributions of Muslims.',\n          'Stand against discrimination and prejudice.'\n  ];\n    const media = ['image1.jpg', 'image2.jpg', 'video1.mp4'];\n\n       // Set initial lighting and temperature\n       setLightsColor(colors[0]);  // Set to soft blue for a calming atmosphere\n  setThermostatTemperature(22);  // Set a comfortable room temperature\n\n    // Loop to play educational content\n   for (let i = 0; i < content.length; i++) {\n                setTimeout(() => {\n                    playEducationalContent(content[i]);\n               }, i * 1800000); // 30 minutes interval\n       }\n\n   // Loop to display messages every 15 minutes\n      for (let i = 0; i < messages.length; i++) {\n           setTimeout(() => {\ndisplayToleranceMessage(messages[i]);\n          }, i * 900000); // 15 minutes interval\n        }\n\n       // Loop to display media every 20 minutes\n     for (let i = 0; i < media.length; i++) {\n setTimeout(() => {\n                     displayMedia(media[i]);\n               }, i * 1200000); // 20 minutes interval\n   }\n}\n\n// Function to handle the event when a special presentation or talk starts\nfunction presentationStarts() {\n       console.log('Special presentation is starting.');\nstopContent();\n}\n\n// Check if today is Fighting Islamic Phobia International Day (March 15th) and run the routine\nfunction checkFightingIslamophobiaDay() {\n    let today = new Date();\n       if (today.getMonth() === 2 && today.getDate() === 15) { // March is month 2 in JavaScript Date\n       console.log('Today is Fighting Islamic Phobia International Day!');\n            fightingIslamophobiaDayRoutine();\n\n               // Simulate the special presentation starting after a delay\n      setTimeout(presentationStarts, 3600000); // Special presentation starts after 1 hour\n   } else {\n console.log('Today is not Fighting Islamic Phobia International Day.');\n        }\n}\n",
        "accurate_docstring":"set a calming atmosphere for Fighting Islamic Phobia International Day. The program should set smart lights to soft blue and soft green, adjust the thermostat to a comfortable 22°C, play educational content every 30 minutes, display messages promoting understanding and tolerance every 15 minutes, and show images or videos on a smart display every 20 minutes. It should check if today is March 15th before running the routine and simulate a special presentation starting after 1 hour.",
        "docstring":"Create a scene for Fighting Islamic Phobia International Day. setting up calming lighting, playing educational content, displaying messages promoting understanding and tolerance, and managing the thermostat for comfort. Additionally, we can use smart displays to show images or videos highlighting Islamic culture and contributions to society.",
        "general_docstring":"Fighting Islamic Phobia International Day, calming lighting, educational content, messages, thermostat, Islamic culture"
    },
    {
        "code":"\n// Function to set smart lights color for a vibrant atmosphere\nfunction setLightsColor(color) {\nconsole.log(`Setting lights color to ${color}.`);\n      event.setLightsColor(color);\n}\n\n// Function to play cheerful music\nfunction playCheerfulMusic(music) {\n        console.log(`Playing cheerful music: ${music}.`);\n event.playMusic(music);\n}\n\n// Function to stop music playback\nfunction stopMusic() {\n  console.log('Stopping music playback.');\n      event.stopMusic();\n}\n\n// Function to adjust the thermostat\nfunction setThermostatTemperature(temp) {\n  console.log(`Setting thermostat temperature to ${temp}°C.`);\n      event.setThermostatTemperature(temp);\n}\n\n// Function to display positive messages\nfunction displayPositiveMessage(message) {\n  console.log(`Displaying positive message: ${message}.`);\n  event.displayMessage(message);\n}\n\n// Function to display images or videos on a smart display\nfunction displayMedia(media) {\n   console.log(`Displaying media: ${media}.`);\n       event.displayMedia(media);\n}\n\n// Routine to create an International Day of Happiness atmosphere in a home\nfunction happinessDayRoutine() {\n    const colors = ['yellow', 'orange'];\n      const music = ['Music1.mp3', 'Music2.mp3'];\n   const messages = [\n            'Happy International Day of Happiness!',\n          'Spread joy and positivity today.',\n           'Do something that makes you happy.',\n             'Celebrate the little things in life.'\n        ];\n    const media = ['image1.jpg', 'image2.jpg', 'video1.mp4'];\n\n       // Set initial lighting and temperature\n   setLightsColor(colors[0]);  // Set to yellow for a vibrant atmosphere\n setThermostatTemperature(22);  // Set a comfortable room temperature\n\n    // Loop to play cheerful music\n        for (let i = 0; i < music.length; i++) {\n          setTimeout(() => {\n                    playCheerfulMusic(music[i]);\n              }, i * 1800000); // 30 minutes interval\n       }\n\n   // Loop to display messages every 15 minutes\n      for (let i = 0; i < messages.length; i++) {\n           setTimeout(() => {\n                        displayPositiveMessage(messages[i]);\n          }, i * 900000); // 15 minutes interval\n    }\n\n   // Loop to display media every 20 minutes\n     for (let i = 0; i < media.length; i++) {\n          setTimeout(() => {\n                    displayMedia(media[i]);\n           }, i * 1200000); // 20 minutes interval\n       }\n}\n\n// Function to handle the event when a special activity or event starts\nfunction activityStarts() {\n      console.log('Special activity is starting.');\n     stopMusic();\n}\n\n// Check if today is International Day of Happiness (March 20th) and run the routine\nfunction checkHappinessDay() {\n   let today = new Date();\n  if (today.getMonth() === 2 && today.getDate() === 20) { // March is month 2 in JavaScript Date\n    console.log('Today is International Day of Happiness!');\n               happinessDayRoutine();\n\n // Simulate the special activity starting after a delay\n                setTimeout(activityStarts, 3600000); // Special activity starts after 1 hour\n      } else {\n              console.log('Today is not International Day of Happiness.');\n      }\n}\n",
        "accurate_docstring":"set a vibrant atmosphere for International Day of Happiness. The program should set smart lights to yellow and orange, adjust the thermostat to a comfortable 22°C, play cheerful music every 30 minutes, display positive messages every 15 minutes, and show images or videos on a smart display every 20 minutes. It should check if today is March 20th before running the routine and simulate a special activity starting after 1 hour.",
        "docstring":"create a scene for International Day of Happiness. setting up vibrant and uplifting lighting, playing cheerful music, displaying positive messages, and managing the thermostat for comfort. Additionally, we can use smart displays to show images or videos that evoke happiness and positivity.",
        "general_docstring":"International Day of Happiness， uplifting lighting, cheerful music, positive messages, comfort thermostat."
    },
    {
        "code":"\n// Function to set smart lights color for a cozy atmosphere\nfunction setLightsColor(color) {\n  console.log(`Setting lights color to ${color}.`);\n      event.setLightsColor(color);\n}\n\n// Function to play soothing music\nfunction playSoothingMusic(music) {\n        console.log(`Playing soothing music: ${music}.`);\n event.playMusic(music);\n}\n\n// Function to stop music playback\nfunction stopMusic() {\n  console.log('Stopping music playback.');\n      event.stopMusic();\n}\n\n// Function to adjust the thermostat\nfunction setThermostatTemperature(temp) {\n  console.log(`Setting thermostat temperature to ${temp}°C.`);\n      event.setThermostatTemperature(temp);\n}\n\n// Function to display poetry on a smart display\nfunction displayPoetry(poetry) {\n    console.log(`Displaying poetry: ${poetry}.`);\n     event.displayText(poetry);\n}\n\n// Function to recite poetry using a voice assistant\nfunction recitePoetry(poetry) {\n    console.log(`Reciting poetry: ${poetry}.`);\n   event.recitePoetry(poetry);\n}\n\n// Routine to create a World Poetry Day atmosphere in a home with children\nfunction poetryDayRoutine() {\n   const colors = ['purple', 'blue'];\n    const music = 'Music3.mp3';\n       const poetry = [\n              'A poem is a little path',\n            'That leads you through the trees.',\n              'It takes you to the cliffs and shores,',\n             'To anywhere you please.'\n ];\n\n  // Set initial lighting and temperature\n       setLightsColor(colors[0]);  // Set to purple for a cozy atmosphere\n        setThermostatTemperature(22);  // Set a comfortable room temperature\n\n    // Play soothing music\n        playSoothingMusic(music);\n\n   // Display poetry every 2 minutes\n let index = 0;\n        let poetryInterval = setInterval(() => {\n displayPoetry(poetry[index]);\n          index++;\n              if (index >= poetry.length) {\n    clearInterval(poetryInterval);\n         }\n     }, 120000); // 2 minutes interval\n\n   // Recite poetry using a voice assistant after 5 minutes\n  setTimeout(() => {\n            for (let i = 0; i < poetry.length; i++) {\n                 recitePoetry(poetry[i]);\n              }\n     }, 300000); // 5 minutes delay\n}\n",
        "accurate_docstring":"set a cozy atmosphere for World Poetry Day. The program should set smart lights to purple and blue, adjust the thermostat to a comfortable 22°C, play soothing music, display poetry every 2 minutes, and recite the poetry using a voice assistant after 5 minutes. The poetry should include 'A poem is a little path', 'That leads you through the trees.', 'It takes you to the cliffs and shores,', and 'To anywhere you please.'",
        "docstring":"create a scene for World Poetry Day. setting up cozy lighting, playing soothing music, displaying poetry on smart displays, and managing the thermostat for comfort. Additionally, we can use voice assistants to recite poems and encourage children to create their own poetry.",
        "general_docstring":"World Poetry Day, cozy lighting, soothing music, poetry displaying, thermostat for comfort, voice assistants."
    },
    {
        "code":"\n// Function to set smart lights color for a calming atmosphere\nfunction setLightsColor(color) {\nconsole.log(`Setting lights color to ${color}.`);\n      event.setLightsColor(color);\n}\n\n// Function to play soothing music\nfunction playSoothingMusic(music) {\n        console.log(`Playing soothing music: ${music}.`);\n event.playMusic(music);\n}\n\n// Function to stop music playback\nfunction stopMusic() {\n  console.log('Stopping music playback.');\n      event.stopMusic();\n}\n\n// Function to adjust the thermostat\nfunction setThermostatTemperature(temp) {\n  console.log(`Setting thermostat temperature to ${temp}°C.`);\n      event.setThermostatTemperature(temp);\n}\n\n// Function to display informative content about Down syndrome\nfunction displayDownSyndromeInfo(content) {\n   console.log(`Displaying Down syndrome info: ${content}.`);\n        event.displayText(content);\n}\n\n// Function to display images or videos on a smart display\nfunction displayMedia(media) {\n      console.log(`Displaying media: ${media}.`);\n       event.displayMedia(media);\n}\n\n// Routine to create a World Down Syndrome Day atmosphere in a hospital\nfunction downSyndromeDayRoutine() {\n     const colors = ['blue', 'yellow'];\n        const music = 'Music4.mp3';\n   const info = [\n           'Down syndrome is a genetic disorder caused by the presence of all or part of a third copy of chromosome 21.',\n             'People with Down syndrome have an extra chromosome that impacts their physical and cognitive development.',\n              'Down syndrome is the most common chromosomal condition, affecting approximately 1 in 700 births.'\n        ];\n    const media = ['image1.jpg', 'image2.jpg', 'video1.mp4'];\n\n       // Set initial lighting and temperature\n       setLightsColor(colors[0]);  // Set to blue for a calming atmosphere\n       setThermostatTemperature(22);  // Set a comfortable room temperature\n\n    // Play soothing music\n        playSoothingMusic(music);\n\n   // Display informative content about Down syndrome\n        for (let i = 0; i < info.length; i++) {\n  setTimeout(() => {\n                     displayDownSyndromeInfo(info[i]);\n             }, i * 300000); // Display every 5 minutes\n        }\n\n   // Display media every 10 minutes\n     for (let i = 0; i < media.length; i++) {\n          setTimeout(() => {\n                    displayMedia(media[i]);\n           }, i * 600000); // Display every 10 minutes\n   }\n}\n",
        "accurate_docstring":"set a calming atmosphere for World Down Syndrome Day in a hospital. The program should set smart lights to blue, adjust the thermostat to a comfortable 22°C, play soothing music, display informative content about Down syndrome every 5 minutes, and display images or videos every 10 minutes. The informative content should include 'Down syndrome is a genetic disorder caused by the presence of all or part of a third copy of chromosome 21.', 'People with Down syndrome have an extra chromosome that impacts their physical and cognitive development.', and 'Down syndrome is the most common chromosomal condition, affecting approximately 1 in 700 births.'",
        "docstring":"create a scene for World Down Syndrome Day. setting up calming lighting, playing soothing music, displaying informative content about Down syndrome, and managing the thermostat for comfort. Additionally, we can use smart displays to show images or videos that promote awareness and understanding of Down syndrome. ",
        "general_docstring":"World Down Syndrome Day, calming lighting, soothing music, thermostat for comfort, images/videos"
    },
    {
        "code":"\n// Function to set natural lighting effects\nfunction setNaturalLighting(effect) {\n  console.log(`Setting natural lighting effect: ${effect}.`);\n       event.setLightingEffect(effect);\n}\n\n// Function to play forest sounds\nfunction playForestSounds(sounds) {\n     console.log(`Playing forest sounds: ${sounds}.`);\n event.playSounds(sounds);\n}\n\n// Function to stop sound playback\nfunction stopSounds() {\n       console.log('Stopping sound playback.');\n      event.stopSounds();\n}\n\n// Function to display educational content about forests\nfunction displayForestInfo(content) {\n console.log(`Displaying forest info: ${content}.`);\n       event.displayText(content);\n}\n\n// Function to monitor forest conditions using environmental sensors\nfunction monitorForestConditions() {\n console.log('Monitoring forest conditions.');\n  event.startSensorMonitoring('forest');\n}\n\n// Routine to create an International Day of Forests atmosphere in a forest\nfunction forestDayRoutine() {\n       const lightingEffect = 'Sunlight'; // Natural lighting effect\n const sounds = 'BirdsChirping.mp3'; // Forest sounds\n      const info = [\n                'Forests are vital for biodiversity and provide habitats for countless species.',\n         'Forests play a crucial role in mitigating climate change by absorbing carbon dioxide.',\n          'Trees in forests help to stabilize soils, prevent erosion, and protect watersheds.'\n      ];\n\n  // Set natural lighting effects\n       setNaturalLighting(lightingEffect);\n\n     // Play forest sounds\n playForestSounds(sounds);\n\n   // Display forest information\n     for (let i = 0; i < info.length; i++) {\n               setTimeout(() => {\n                        displayForestInfo(info[i]);\n           }, i * 300000); // Display every 5 minutes\n        }\n\n   // Monitor forest conditions using environmental sensors\n      monitorForestConditions();\n}\n",
        "accurate_docstring":"set a natural atmosphere for International Day of Forests. The program should set natural lighting effects to 'Sunlight', play forest sounds of birds chirping, display educational content about forests every 5 minutes, and monitor forest conditions using environmental sensors.",
        "docstring":"create a scene for International Day of Forests. setting up natural lighting effects, playing forest sounds, displaying educational content about forests, and managing any nearby smart devices for an immersive experience. Additionally, we can use environmental sensors to monitor forest conditions and showcase the beauty and importance of forests.",
        "general_docstring":"International Day of Forests, natural lighting effects, forest sounds, sensors, educational content about forest."
    },
    {
        "code":"\n// Function to set blue lighting effects\nfunction setBlueLighting() {\n      console.log('Setting blue lighting effects.');\n    event.setLightingColor('blue');\n}\n\n// Function to play water-related sounds\nfunction playWaterSounds() {\n      console.log('Playing water-related sounds.');\n event.playSounds('WaterSounds.mp3');\n}\n\n// Function to stop sound playback\nfunction stopSounds() {\nconsole.log('Stopping sound playback.');\n       event.stopSounds();\n}\n\n// Function to display educational content about water conservation\nfunction displayWaterConservationInfo(content) {\n   console.log(`Displaying water conservation info: ${content}.`);\n   event.displayText(content);\n}\n\n// Function to manage interactive exhibits related to water conservation\nfunction manageInteractiveExhibits() {\n    console.log('Managing interactive exhibits.');\n        event.activateExhibits('water-conservation');\n}\n\n// Function to monitor water usage using environmental sensors\nfunction monitorWaterUsage() {\n    console.log('Monitoring water usage.');\n       event.startSensorMonitoring('water');\n}\n\n// Routine to create a World Water Day atmosphere in a museum\nfunction waterDayRoutine() {\n       const info = [\n                'Water is essential for life and is a finite resource that needs to be protected.',\n               'Conserving water helps to ensure there is enough for future generations and for ecosystems.',\n            'Simple actions like fixing leaks and using water-efficient appliances can make a big difference in water conservation.'\n  ];\n\n  // Set blue lighting effects\n      setBlueLighting();\n\n  // Play water-related sounds\n  playWaterSounds();\n\n      // Display water conservation information\n     for (let i = 0; i < info.length; i++) {\n  setTimeout(() => {\n                     displayWaterConservationInfo(info[i]);\n                }, i * 300000); // Display every 5 minutes\n        }\n\n   // Manage interactive exhibits\n        manageInteractiveExhibits();\n\n    // Monitor water usage\n        monitorWaterUsage();\n}\n",
        "accurate_docstring":"set a natural atmosphere for Wldor Water Day in a museum. The program should set blue lighting effects, play water-related sounds, display educational content about water conservation every 5 minutes, manage interactive exhibits related to water conservation, and monitor water usage using environmental sensors.",
        "docstring":"create a scene for Wldor Water Day. setting up blue lighting effects, playing water-related sounds, displaying educational content about water conservation, and managing interactive exhibits related to water conservation. Additionally, we can use environmental sensors to monitor water usage and showcase the importance of water conservation.",
        "general_docstring":"World Water Day, blue lighting, water-related sounds, sensors, water conservation displaying."
    },
    {
        "code":"\n// Function to set dynamic lighting effects for weather simulation\nfunction setWeatherEffects(effect) {\n        console.log(`Setting weather effects: ${effect}.`);\n   event.setLightingEffect(effect);\n}\n\n// Function to play weather-related sounds\nfunction playWeatherSounds(sounds) {\n   console.log(`Playing weather sounds: ${sounds}.`);\n        event.playSounds(sounds);\n}\n\n// Function to stop sound playback\nfunction stopSounds() {\n       console.log('Stopping sound playback.');\n event.stopSounds();\n}\n\n// Function to display educational content about meteorology\nfunction displayMeteorologyInfo(content) {\n console.log(`Displaying meteorology info: ${content}.`);\n      event.displayText(content);\n}\n\n// Function to manage interactive exhibits related to weather phenomena\nfunction manageInteractiveExhibits() {\n     console.log('Managing interactive exhibits.');\n   event.activateExhibits('weather-phenomena');\n}\n\n// Function to monitor indoor weather conditions using environmental sensors\nfunction monitorIndoorWeatherConditions() {\n       console.log('Monitoring indoor weather conditions.');\n     event.startSensorMonitoring('indoor-weather');\n}\n\n// Routine to create a World Meteorological Day atmosphere in a museum\nfunction meteorologicalDayRoutine() {\n    const weatherEffect = 'Rain'; // Dynamic lighting effect for rain simulation\n  const sounds = 'RainSounds.mp3'; // Rain sounds\n   const info = [\n                'Meteorology is the study of the atmosphere and its phenomena, including weather and climate.',\n           'Meteorologists use various instruments and tools to observe and forecast weather patterns.',\n             'Understanding meteorology is crucial for predicting severe weather events and mitigating their impacts.'\n ];\n\n      // Set dynamic lighting effects for weather simulation\n        setWeatherEffects(weatherEffect);\n\n       // Play weather-related sounds\n        playWeatherSounds(sounds);\n\n  // Display meteorology information\n        for (let i = 0; i < info.length; i++) {\n               setTimeout(() => {\n                        displayMeteorologyInfo(info[i]);\n              }, i * 300000); // Display every 5 minutes\n        }\n\n   // Manage interactive exhibits\n        manageInteractiveExhibits();\n\n    // Monitor indoor weather conditions\n  monitorIndoorWeatherConditions();\n}\n",
        "accurate_docstring":"World Meteorological Day in a museum. The program should set dynamic lighting effects for rain simulation, play rain sounds, display educational content about meteorology every 5 minutes, manage interactive exhibits related to weather phenomena, and monitor indoor weather conditions using environmental sensors.",
        "docstring":"create a scene for World Meteorological Day. setting up dynamic lighting effects to simulate weather conditions, playing weather-related sounds, displaying educational content about meteorology, and managing interactive exhibits related to weather phenomena. Additionally, we can use environmental sensors to monitor indoor weather conditions and showcase the role of meteorology in understanding and predicting weather patterns.",
        "general_docstring":"World Meteorological Day, dynamic lighting effects, rain simulation, rain sounds, weather phenomena, environmental sensors"
    },
    {
        "code":"\n// Function to set green lighting effects\nfunction setGreenLighting() {\n    console.log('Setting green lighting effects.');\n   event.setLightingColor('green');\n}\n\n// Function to play environmental sounds\nfunction playEnvironmentalSounds(sounds) {\n       console.log(`Playing environmental sounds: ${sounds}.`);\n  event.playSounds(sounds);\n}\n\n// Function to stop sound playback\nfunction stopSounds() {\n       console.log('Stopping sound playback.');\n      event.stopSounds();\n}\n\n// Function to display educational content about zero waste practices\nfunction displayZeroWasteInfo(content) {\n     console.log(`Displaying zero waste info: ${content}.`);\n       event.displayText(content);\n}\n\n// Function to manage interactive exhibits related to waste reduction\nfunction manageInteractiveExhibits() {\n       console.log('Managing interactive exhibits.');\n        event.activateExhibits('waste-reduction');\n}\n\n// Function to monitor waste generation using environmental sensors\nfunction monitorWasteGeneration() {\n     console.log('Monitoring waste generation.');\n  event.startSensorMonitoring('waste-generation');\n}\n\n// Routine to create an International Zero Waste Day atmosphere in a museum\nfunction zeroWasteDayRoutine() {\n  const sounds = 'BirdsChirping.mp3'; // Environmental sounds\n       const info = [\n                'Zero waste is a philosophy that encourages the redesign of resource life cycles so that all products are reused.',\n               'Reducing waste helps to conserve resources, reduce pollution, and minimize environmental impact.',\n  'Simple actions like recycling, composting, and using reusable products can help achieve zero waste goals.'\n        ];\n\n  // Set green lighting effects\n setGreenLighting();\n\n // Play environmental sounds\n      playEnvironmentalSounds(sounds);\n\n    // Display zero waste information\n     for (let i = 0; i < info.length; i++) {\n           setTimeout(() => {\n                    displayZeroWasteInfo(info[i]);\n            }, i * 300000); // Display every 5 minutes\n    }\n\n   // Manage interactive exhibits\n    manageInteractiveExhibits();\n\n        // Monitor waste generation\n   monitorWasteGeneration();\n}\n",
        "accurate_docstring":"for International Zero Waste Day in a museum. The program should set green lighting effects, play environmental sounds, display educational content about zero waste practices every 5 minutes, manage interactive exhibits related to waste reduction, and monitor waste generation using environmental sensors.",
        "docstring":"create a scene for International Zero Waste Day. setting up green lighting effects, playing environmental sounds, displaying educational content about zero waste practices, and managing interactive exhibits related to waste reduction. Additionally, we can use waste monitoring sensors to showcase the importance of reducing waste and promoting sustainable practices.",
        "general_docstring":"International Zero Waste Day,  green lighting effects, play environmental sounds, waste reduction"
    },
    {
        "code":"\n// Function to set calming lighting effects\nfunction setCalmingLighting() {\n        console.log('Setting calming lighting effects.');\n event.setLightingColor('blue'); // Blue light is often used for calming effects\n}\n\n// Function to play soothing sounds\nfunction playSoothingSounds() {\n   console.log('Playing soothing sounds.');\n       event.playSounds('SoothingSounds.mp3');\n}\n\n// Function to stop sound playback\nfunction stopSounds() {\n console.log('Stopping sound playback.');\n event.stopSounds();\n}\n\n// Function to display educational content about autism\nfunction displayAutismInfo(content) {\n   console.log(`Displaying autism info: ${content}.`);\n   event.displayText(content);\n}\n\n// Function to manage interactive exhibits related to autism awareness\nfunction manageInteractiveExhibits() {\n      console.log('Managing interactive exhibits.');\n        event.activateExhibits('autism-awareness');\n}\n\n// Routine to create a World Autism Awareness Day atmosphere in a museum\nfunction autismAwarenessDayRoutine() {\n    const info = [\n                'Autism spectrum disorder (ASD) is a developmental disorder that affects communication and behavior.',\n       'People with autism may have difficulty with social interaction and communication, and may have restricted and repetitive behaviors.',\n             'Early intervention and support can greatly improve the quality of life for individuals with autism.'\n     ];\n\n  // Set calming lighting effects\n  setCalmingLighting();\n\n        // Play soothing sounds\n       playSoothingSounds();\n\n       // Display autism information\n     for (let i = 0; i < info.length; i++) {\n               setTimeout(() => {\n                        displayAutismInfo(info[i]);\n           }, i * 300000); // Display every 5 minutes\n        }\n\n   // Manage interactive exhibits\n        manageInteractiveExhibits();\n}\n",
        "accurate_docstring":"for World Autism Awareness Day in a museum. The program should set calming lighting effects, play soothing sounds, display educational content about autism every 5 minutes, and manage interactive exhibits related to autism awareness.",
        "docstring":"create a scene that includes setting up calming lighting effects, playing soothing sounds, displaying educational content about autism, and managing interactive exhibits that promote understanding and empathy towards individuals with autism. Additionally, we can use sensory-friendly features and interactive technologies to engage visitors and raise awareness about autism spectrum disorder (ASD).",
        "general_docstring":"World Autism Awareness Day, calming lighting effects, manage interactive exhibits, autism awareness."
    },
    {
        "code":"\n// Function to set introspective lighting effects\nfunction setIntrospectiveLighting() {\n    console.log('Setting introspective lighting effects.');\n   event.setLightingColor('purple'); // Purple light is often associated with introspection and contemplation\n}\n\n// Function to play calming sounds\nfunction playCalmingSounds() {\n   console.log('Playing calming sounds.');\n       event.playSounds('CalmingSounds.mp3');\n}\n\n// Function to stop sound playback\nfunction stopSounds() {\n  console.log('Stopping sound playback.');\n  event.stopSounds();\n}\n\n// Function to display educational content about conscience and ethics\nfunction displayConscienceInfo(content) {\n       console.log(`Displaying conscience info: ${content}.`);\n   event.displayText(content);\n}\n\n// Function to manage interactive exhibits promoting empathy and ethical decision-making\nfunction manageInteractiveExhibits() {\n    console.log('Managing interactive exhibits.');\n        event.activateExhibits('conscience-ethics');\n}\n\n// Routine to create an International Day of Conscience atmosphere in a museum\nfunction conscienceDayRoutine() {\n  const info = [\n                'The International Day of Conscience promotes values of compassion, empathy, and ethical decision-making.',\n               'Conscience is the inner voice that urges us to do what is right and good.',\n              'Reflecting on our actions and their impact on others is an important part of developing a strong conscience.'\n];\n\n   // Set introspective lighting effects\n setIntrospectiveLighting();\n\n // Play calming sounds\n    playCalmingSounds();\n\n        // Display conscience information\n     for (let i = 0; i < info.length; i++) {\n           setTimeout(() => {\n                    displayConscienceInfo(info[i]);\n           }, i * 300000); // Display every 5 minutes\n    }\n\n   // Manage interactive exhibits\n    manageInteractiveExhibits();\n}\n",
        "accurate_docstring":"for the International Day of Conscience in a museum. The program should set introspective lighting effects, play calming sounds, display educational content about conscience and ethics every 5 minutes, and manage interactive exhibits promoting empathy and ethical decision-making.",
        "docstring":"create a scene for International Day of Conscience, using lighting effects, interactive displays, and educational content. The focus should be on promoting values of conscience, compassion, and ethical decision-making.",
        "general_docstring":"International Day of Conscience, set introspective lighting effects, conscience and ethics, ethical decision-making."
    },
    {
        "code":"\n// Function to set health-themed lighting effects\nfunction setHealthLighting() {\n   console.log('Setting health-themed lighting effects.');\n   event.setLightingColor('green'); // Green light is often associated with health and nature\n}\n\n// Function to play soothing sounds\nfunction playSoothingSounds() {\n console.log('Playing soothing sounds.');\n      event.playSounds('SoothingSounds.mp3');\n}\n\n// Function to stop sound playback\nfunction stopSounds() {\n console.log('Stopping sound playback.');\n  event.stopSounds();\n}\n\n// Function to display educational content about health and well-being\nfunction displayHealthInfo(content) {\n   console.log(`Displaying health info: ${content}.`);\n       event.displayText(content);\n}\n\n// Function to manage interactive exhibits promoting healthy lifestyle choices\nfunction manageInteractiveExhibits() {\n  console.log('Managing interactive exhibits.');\n    event.activateExhibits('health-promotion');\n}\n\n// Routine to create a World Health Day atmosphere in a museum\nfunction healthDayRoutine() {\n   const info = [\n           'World Health Day is celebrated to raise awareness about health issues and promote healthy living.',\n               'Regular physical activity, balanced diet, and good hygiene are key to maintaining good health.',\n         'Access to healthcare services and health education are essential for improving global health.'\n   ];\n\n  // Set health-themed lighting effects\n setHealthLighting();\n\n   // Play soothing sounds\n        playSoothingSounds();\n\n       // Display health information\n for (let i = 0; i < info.length; i++) {\n           setTimeout(() => {\n                    displayHealthInfo(info[i]);\n               }, i * 300000); // Display every 5 minutes\n    }\n\n   // Manage interactive exhibits\n    manageInteractiveExhibits();\n}\n",
        "accurate_docstring":"for World Health Day in a museum. The program should set lights green color, play soothing sounds, display educational content about health and well-being every 5 minutes, and manage interactive exhibits promoting healthy lifestyle choices.",
        "docstring":"for World Health Day in a museum. The program should set health-themed lighting effects, play soothing sounds, display educational content about health, and manage interactive exhibits promoting healthy lifestyle choices.",
        "general_docstring":"World Health Day, set health-themed lighting effects, play soothing sounds, display educational content, health and well-being."
    },
    {
        "code":"\n// Function to set colorful and dynamic lighting effects\nfunction setColorfulLighting() {\n  console.log('Setting colorful and dynamic lighting effects.');\n    event.setLightingColor('rainbow'); // Rainbow colors to stimulate creativity\n}\n\n// Function to play playful and inspiring sounds\nfunction playInspiringSounds() {\n console.log('Playing playful and inspiring sounds.');\n event.playSounds('InspiringSounds.mp3');\n}\n\n// Function to stop sound playback\nfunction stopSounds() {\n   console.log('Stopping sound playback.');\n       event.stopSounds();\n}\n\n// Function to display educational content about creativity and innovation\nfunction displayCreativityInfo(content) {\n   console.log(`Displaying creativity info: ${content}.`);\n   event.displayText(content);\n}\n\n// Function to manage interactive activities promoting creativity and innovation\nfunction manageInteractiveActivities() {\n  console.log('Managing interactive activities.');\n      event.activateActivities('creativity-innovation');\n}\n\n// Routine to create a World Creativity and Innovation Day atmosphere in a home for children\nfunction creativityDayRoutine() {\n      const info = [\n                'World Creativity and Innovation Day celebrates creativity and encourages innovative thinking.',\n     'Encouraging children to explore, experiment, and create fosters their creativity and innovation skills.',\n         'Hands-on activities, imaginative play, and problem-solving games can inspire creativity in children.'\n    ];\n\n  // Set colorful and dynamic lighting effects\n  setColorfulLighting();\n\n  // Play playful and inspiring sounds\n  playInspiringSounds();\n\n      // Display creativity information\n for (let i = 0; i < info.length; i++) {\n               setTimeout(() => {\n       displayCreativityInfo(info[i]);\n                }, i * 300000); // Display every 5 minutes\n    }\n\n       // Manage interactive activities\n      manageInteractiveActivities();\n}\n",
        "accurate_docstring":"for World Creativity and Innovation Day in a home for children. The program should set colorful and dynamic lighting effects, play playful and inspiring sounds, display educational content about creativity and innovation every 5 minutes, and manage interactive activities promoting creativity and innovation.",
        "docstring":"create a scene for World Creativity and Innovation Day. It should be on promoting imaginative play, problem-solving skills, and hands-on learning experiences.",
        "general_docstring":"World Creativity and Innovation Day, set colorful and dynamic lighting effects, display educational content, play playful and inspiring sounds, manage interactive activities."
    },
    {
        "code":"\n// Function to set earth-themed lighting effects\nfunction setEarthLighting() {\n     console.log('Setting earth-themed lighting effects.');\n    event.setLightingColor('green'); // Green light is often associated with nature and the environment\n}\n\n// Function to play nature sounds\nfunction playNatureSounds() {\n    console.log('Playing nature sounds.');\n        event.playSounds('NatureSounds.mp3');\n}\n\n// Function to stop sound playback\nfunction stopSounds() {\n   console.log('Stopping sound playback.');\n  event.stopSounds();\n}\n\n// Function to display educational content about environmental protection\nfunction displayEarthDayInfo(content) {\n      console.log(`Displaying Earth Day info: ${content}.`);\n    event.displayText(content);\n}\n\n// Function to manage interactive activities promoting environmental awareness\nfunction manageInteractiveActivities() {\n        console.log('Managing interactive activities.');\n  event.activateActivities('environmental-awareness');\n}\n\n// Routine to create an International Mother Earth Day atmosphere in a home for children\nfunction earthDayRoutine() {\n     const info = [\n                'International Mother Earth Day raises awareness about environmental issues and the need for sustainable living.',\n                'Teaching children to reduce, reuse, and recycle helps protect the planet for future generations.',\n  'Engaging in activities like gardening, composting, and nature walks can foster a love for the environment.'\n       ];\n\n  // Set earth-themed lighting effects\n  setEarthLighting();\n\n // Play nature sounds\n     playNatureSounds();\n\n // Display Earth Day information\n      for (let i = 0; i < info.length; i++) {\n           setTimeout(() => {\n                    displayEarthDayInfo(info[i]);\n             }, i * 300000); // Display every 5 minutes\n    }\n\n   // Manage interactive activities\n  manageInteractiveActivities();\n}\n",
        "accurate_docstring":"for International Mother Earth Day in a home for children. The program should set earth-themed lighting effects, play nature sounds, display educational content about environmental protection every 5 minutes, and manage interactive activities promoting environmental awareness.",
        "docstring":"create a scene for International Mother Earth Day. The focus should be on activities that teach them about the importance of protecting the planet and taking care of the environment.",
        "general_docstring":"International Mother Earth Day, set earth-themed lighting effects, play nature sounds, display educational content, environmental protection."
    },
    {
        "code":"\n// Function to set innovative lighting effects\nfunction setInnovativeLighting() {\n  console.log('Setting innovative lighting effects.');\n      event.setLightingColor('blue'); // Blue light is often associated with innovation and technology\n}\n\n// Function to play inspiring sounds\nfunction playInspiringSounds() {\n console.log('Playing inspiring sounds.');\n     event.playSounds('InspiringSounds.mp3');\n}\n\n// Function to stop sound playback\nfunction stopSounds() {\n        console.log('Stopping sound playback.');\n  event.stopSounds();\n}\n\n// Function to display educational content about intellectual property rights\nfunction displayIPInfo(content) {\n        console.log(`Displaying IP info: ${content}.`);\n   event.displayText(content);\n}\n\n// Function to manage interactive exhibits showcasing innovations\nfunction manageInteractiveExhibits() {\n       console.log('Managing interactive exhibits.');\n    event.activateExhibits('intellectual-property');\n}\n\n// Routine to create a World Intellectual Property Day atmosphere in a museum\nfunction ipDayRoutine() {\n   const info = [\n            'World Intellectual Property Day celebrates innovation and creativity and highlights the importance of intellectual property rights.',\n            'Intellectual property rights protect inventions, artworks, and technological advancements, encouraging further innovation.',\n'Respecting intellectual property rights helps promote a culture of innovation and supports economic growth.'\n      ];\n\n  // Set innovative lighting effects\n    setInnovativeLighting();\n\n    // Play inspiring sounds\n  playInspiringSounds();\n\n      // Display intellectual property information\n      for (let i = 0; i < info.length; i++) {\n               setTimeout(() => {\n               displayIPInfo(info[i]);\n                }, i * 300000); // Display every 5 minutes\n    }\n\n   // Manage interactive exhibits\n    manageInteractiveExhibits();\n}\n",
        "accurate_docstring":"for World Intellectual Property Day in a museum. The program should set innovative lighting effects, play inspiring sounds, display educational content about intellectual property rights every 5 minutes, and manage interactive exhibits showcasing innovations.",
        "docstring":"create a scene for World Intellectual Property Day. The focus should be on showcasing inventions, artworks, and technological advancements while educating visitors about the value of intellectual property.",
        "general_docstring":"World Intellectual Property Day, set innovative lighting effects, play inspiring sounds, display educational content, manage interactive exhibits."
    },
    {
        "code":"\n// Function to set safety-themed lighting effects\nfunction setSafetyLighting() {\n   console.log('Setting safety-themed lighting effects.');\n   event.setLightingColor('yellow'); // Yellow light is often associated with caution and safety\n}\n\n// Function to play safety announcement\nfunction playSafetyAnnouncement() {\n      console.log('Playing safety announcement.');\n  event.playSounds('SafetyAnnouncement.mp3');\n}\n\n// Function to stop sound playback\nfunction stopSounds() {\n     console.log('Stopping sound playback.');\n  event.stopSounds();\n}\n\n// Function to display educational content about workplace safety\nfunction displaySafetyInfo(content) {\n        console.log(`Displaying safety info: ${content}.`);\n       event.displayText(content);\n}\n\n// Function to manage interactive activities promoting workplace safety\nfunction manageInteractiveActivities() {\n       console.log('Managing interactive activities.');\n  event.activateActivities('workplace-safety');\n}\n\n// Routine to create a World Day for Safety and Health at Work atmosphere in an industrial setting\nfunction safetyDayRoutine() {\n const info = [\n                'World Day for Safety and Health at Work raises awareness about workplace safety and health issues.',\n             'Regular safety training, proper use of personal protective equipment, and reporting of hazards are key to preventing accidents.',\n            'Creating a safe work environment is everyone's responsibility. Safety first, always!'\n    ];\n\n  // Set safety-themed lighting effects\n setSafetyLighting();\n\n        // Play safety announcement\n       playSafetyAnnouncement();\n\n   // Display safety information\n for (let i = 0; i < info.length; i++) {\n           setTimeout(() => {\n                    displaySafetyInfo(info[i]);\n               }, i * 300000); // Display every 5 minutes\n    }\n\n   // Manage interactive activities\n  manageInteractiveActivities();\n}\n",
        "accurate_docstring":"for World Day for Safety and Health at Work in an industrial setting. The program should set safety-themed lighting effects, play a safety announcement, display educational content about workplace safety every 5 minutes, and manage interactive activities promoting workplace safety.",
        "docstring":"create a scene for World Day for Safety and Health. The focus should be on promoting safe practices, raising awareness about potential hazards, and encouraging a culture of safety among workers.",
        "general_docstring":"World Day for Safety, set safety-themed lighting effects, play safety announcement, workplace safety."
    },
    {
        "code":"\n// Function to set cozy lighting effects\nfunction setCozyLighting() {\n      console.log('Setting cozy lighting effects.');\n    event.setLightingColor('orange'); // Orange light creates a warm and cozy atmosphere\n}\n\n// Function to play family-themed music\nfunction playFamilyMusic() {\n  console.log('Playing family-themed music.');\n      event.playSounds('FamilyMusic.mp3');\n}\n\n// Function to stop sound playback\nfunction stopSounds() {\n    console.log('Stopping sound playback.');\n event.stopSounds();\n}\n\n// Function to display family-themed quotes or messages\nfunction displayFamilyQuotes(quotes) {\n  console.log('Displaying family quotes.');\n     for (let i = 0; i < quotes.length; i++) {\n         setTimeout(() => {\n                    event.displayText(quotes[i]);\n    }, i * 60000); // Display every minute\n }\n}\n\n// Function to manage interactive activities for the family\nfunction manageInteractiveActivities() {\n     console.log('Managing interactive activities.');\n  event.activateActivities('family-time');\n}\n\n// Routine to create an International Day of Families atmosphere in a home\nfunction familyDayRoutine() {\n  const quotes = [\n              'Family is not an important thing. It's everything. - Michael J. Fox',\n            'In family life, love is the oil that eases friction, the cement that binds closer together, and the music that brings harmony. - Friedrich Nietzsche',\n               'The love of a family is life's greatest blessing.',\n              'Family is where life begins and love never ends.'\n    ];\n\n  // Set cozy lighting effects\n      setCozyLighting();\n\n  // Play family-themed music\n   playFamilyMusic();\n\n  // Display family quotes\n  displayFamilyQuotes(quotes);\n\n        // Manage interactive activities\n manageInteractiveActivities();\n}\n",
        "accurate_docstring":"for International Day of Families in a home. The program should set cozy lighting effects, play family-themed music, display family-themed quotes every minute, and manage interactive activities for the family.",
        "docstring":"create a scene for International Day of Families. The focus should be on activities that foster communication, bonding, and fun among family members.",
        "general_docstring":"International Day of Families, set cozy lighting effects, play family-themed music, display family-themed quotes."
    },
    {
        "code":"\n// Function to set peaceful lighting effects\nfunction setPeacefulLighting() {\n      console.log('Setting peaceful lighting effects.');\n        event.setLightingColor('blue'); // Blue light is often associated with peace and tranquility\n}\n\n// Function to play calming music\nfunction playCalmingMusic() {\n   console.log('Playing calming music.');\n        event.playSounds('CalmingMusic.mp3');\n}\n\n// Function to stop sound playback\nfunction stopSounds() {\n   console.log('Stopping sound playback.');\n  event.stopSounds();\n}\n\n// Function to display quotes or messages promoting peaceful coexistence\nfunction displayPeacefulQuotes(quotes) {\n      console.log('Displaying peaceful quotes.');\n       for (let i = 0; i < quotes.length; i++) {\n             setTimeout(() => {\n       event.displayText(quotes[i]);\n          }, i * 60000); // Display every minute\n        }\n}\n\n// Function to manage interactive activities promoting peaceful coexistence\nfunction manageInteractiveActivities() {\n console.log('Managing interactive activities.');\n      event.activateActivities('peaceful-coexistence');\n}\n\n// Routine to create an International Day of Peaceful Coexistence atmosphere in a school\nfunction peacefulCoexistenceDayRoutine() {\n  const quotes = [\n              'Peace begins with a smile. - Mother Teresa',\n             'An eye for an eye only ends up making the whole world blind. - Mahatma Gandhi',\n          'Together for peace: Respect, safety and dignity for all.'\n        ];\n\n  // Set peaceful lighting effects\n      setPeacefulLighting();\n\n      // Play calming music\n     playCalmingMusic();\n\n // Display peaceful quotes\n    displayPeacefulQuotes(quotes);\n\n  // Manage interactive activities\n      manageInteractiveActivities();\n}\n",
        "accurate_docstring":"for International Day of Peaceful Coexistence in a school. The program should set peaceful lighting effects, play calming music, display peaceful quotes every minute, and manage interactive activities promoting peaceful coexistence.",
        "docstring":"create a scene for International Day of Peaceful Coexistence. The focus should be on activities that encourage empathy, respect for diversity, and conflict resolution skills.",
        "general_docstring":"International Day of Peaceful Coexistence, set peaceful lighting effects, play calming music, display peaceful quotes, peaceful coexistence."
    },
    {
        "code":"\n// Function to set cozy lighting effects\nfunction setCozyLighting() {\n      console.log('Setting cozy lighting effects.');\n    event.setLightingColor('green'); // Green light creates a calming and natural atmosphere\n}\n\n// Function to play soothing tea-themed music\nfunction playTeaMusic() {\n       console.log('Playing soothing tea-themed music.');\n    event.playSounds('TeaMusic.mp3');\n}\n\n// Function to stop sound playback\nfunction stopSounds() {\n       console.log('Stopping sound playback.');\n  event.stopSounds();\n}\n\n// Function to display information about different tea varieties\nfunction displayTeaInfo(teas) {\n       console.log('Displaying tea information.');\n   for (let i = 0; i < teas.length; i++) {\n           setTimeout(() => {\n                    event.displayText(teas[i]);\n               }, i * 60000); // Display every minute\n        }\n}\n\n// Function to manage interactive activities related to tea\nfunction manageInteractiveActivities() {\n     console.log('Managing interactive activities.');\n  event.activateActivities('tea-time');\n}\n\n// Routine to create an International Tea Day atmosphere in a home\nfunction teaDayRoutine() {\n        const teas = [\n            'Black tea: Full-bodied and rich, often enjoyed with milk and sugar.',\n   'Green tea: Light and refreshing, known for its health benefits.',\n             'Herbal tea: Made from herbs, flowers, and spices, caffeine-free and soothing.',\n          'Oolong tea: Semi-oxidized tea with a complex flavor profile.'\n    ];\n\n  // Set cozy lighting effects\n  setCozyLighting();\n\n      // Play soothing tea-themed music\n     playTeaMusic();\n\n     // Display information about different tea varieties\n      displayTeaInfo(teas);\n\n       // Manage interactive activities\n manageInteractiveActivities();\n}\n",
        "accurate_docstring":"for International Tea Day in a home. The program should set cozy lighting effects, play soothing tea-themed music, display information about different tea varieties every minute, and manage interactive activities related to tea.",
        "docstring":"create a scene for International Tea Day. The focus should be on creating a cozy and inviting atmosphere for enjoying tea, learning about different tea varieties, and sharing tea-related experiences.",
        "general_docstring":"International Tea Day, set cozy lighting effects, play soothing music, display tea information."
    },
    {
        "code":".",
        "accurate_docstring":"",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"// Function to control greenhouse temperature\nfunction controlTemperature(temp) {\n    console.log(`Setting greenhouse temperature to ${temp}°C.`);\n    event.controlTemperature(temp);\n}\n\n// Function to control greenhouse humidity\nfunction controlHumidity(humidity) {\n    console.log(`Setting greenhouse humidity to ${humidity}%.`);\n    event.controlHumidity(humidity);\n}\n\n// Function to control greenhouse lighting\nfunction controlLighting(state) {\n    console.log(`Turning lights ${state} in the greenhouse.`);\n    event.controlLighting(state);\n}\n\n// Function to check soil moisture levels\nfunction checkSoilMoisture(zone) {\n    let moistureLevel = event.getSoilMoisture(zone);\n    console.log(`Soil moisture level in ${zone}: ${moistureLevel}%`);\n    return moistureLevel;\n}\n\n// Function to water plants based on soil moisture levels\nfunction waterPlants(zone) {\n    let moistureLevel = checkSoilMoisture(zone);\n    if (moistureLevel < 40) {\n        console.log(`Soil moisture is low in ${zone}. Watering plants.`);\n        event.waterPlants(zone);\n    } else {\n        console.log(`Soil moisture is sufficient in ${zone}. No watering needed.`);\n    }\n}\n\n// Morning routine to prepare greenhouse environment\nfunction morningGreenhouseRoutine() {\n    if (event.morningGreenhouseRoutine) {\n        controlTemperature(25);\n        controlHumidity(60);\n        controlLighting('on');\n        waterPlants('zone1');\n    }\n}\n\n// Afternoon routine to maintain optimal conditions\nfunction afternoonGreenhouseRoutine() {\n    if (event.afternoonGreenhouseRoutine) {\n        controlTemperature(28);\n        waterPlants('zone2');\n    }\n}\n\n// Evening routine to shut down systems and prepare for the night\nfunction eveningGreenhouseRoutine() {\n    if (event.eveningGreenhouseRoutine) {\n        controlTemperature(22);\n        controlHumidity(70);\n        controlLighting('off');\n        waterPlants('zone3');\n    }\n}",
        "accurate_docstring":"The morning routine ensures the greenhouse environment is set up for optimal plant growth by controlling temperature to 25°C, humidity to 60%, turning on the greenhouse lighting, and watering plants in zone 1 where soil moisture is monitored. In the afternoon, adjustments are made to maintain optimal conditions with the temperature increased to 28°C and additional watering of plants in zone 2 based on soil moisture levels. Evening routines focus on preparing the greenhouse for the night, including adjusting temperature to 22°C, increasing humidity to 70%, turning off the lighting, and watering plants in zone 3.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"// Function to lock or unlock doors\nfunction controlDoorLock(door, state) {\n    console.log(`${state} the ${door} door.`);\n    event.controlDoorLock(door, state);\n}\n\n// Function to check security camera feed\nfunction checkCameraFeed(camera) {\n    let feed = event.getCameraFeed(camera);\n    console.log(`Security camera feed from ${camera}: ${feed}`);\n    return feed;\n}\n\n// Function to detect motion\nfunction detectMotion(zone) {\n    let motion = event.detectMotion(zone);\n    console.log(`Motion detected in ${zone}: ${motion}`);\n    return motion;\n}\n\n// Function to activate security alarm\nfunction activateAlarm() {\n    console.log(\"Activating security alarm.\");\n    event.activateAlarm();\n}\n\n// Function to deactivate security alarm\nfunction deactivateAlarm() {\n    console.log(\"Deactivating security alarm.\");\n    event.deactivateAlarm();\n}\n\n// Function to adjust lighting based on security needs\nfunction adjustSecurityLighting(zone, state) {\n    console.log(`${state} security lighting in ${zone}.`);\n    event.adjustSecurityLighting(zone, state);\n}\n\n// Night routine to secure the house\nfunction nightSecurityRoutine() {\n    if (event.nightSecurityRoutine) {\n        controlDoorLock('front', 'lock');\n        controlDoorLock('back', 'lock');\n        adjustSecurityLighting('perimeter', 'on');\n        activateAlarm();\n    }\n}\n\n// Morning routine to prepare for the day\nfunction morningSecurityRoutine() {\n    if (event.morningSecurityRoutine) {\n        controlDoorLock('front', 'unlock');\n        controlDoorLock('back', 'unlock');\n        adjustSecurityLighting('perimeter', 'off');\n        deactivateAlarm();\n    }\n}\n\n// Emergency routine to respond to detected motion\nfunction emergencySecurityRoutine() {\n    if (event.emergencySecurityRoutine) {\n        let motion = detectMotion('living room');\n        if (motion) {\n            activateAlarm();\n            checkCameraFeed('living room');\n        }\n    }\n}",
        "accurate_docstring":"The night security routine includes locking both the front and back doors, activating perimeter security lighting, and activating the security alarm system to ensure comprehensive protection. In the morning, the routine involves unlocking the front and back doors, turning off perimeter security lighting, and deactivating the security alarm system. During emergencies, such as detecting motion in the living room, the alarm is promptly activated, and the security camera feed is checked to assess the situation.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"// Function to turn on the TV\nfunction turnOnTV() {\n    console.log(\"Turning on the TV.\");\n    event.turnOnTV();\n}\n\n// Function to turn off the TV\nfunction turnOffTV() {\n    console.log(\"Turning off the TV.\");\n    event.turnOffTV();\n}\n\n// Function to set the speaker volume\nfunction setSpeakerVolume(volume) {\n    console.log(`Setting speaker volume to ${volume}.`);\n    event.setSpeakerVolume(volume);\n}\n\n// Function to adjust lighting for ambiance\nfunction setAmbianceLighting(scene) {\n    console.log(`Setting ambiance lighting for ${scene} scene.`);\n    event.setAmbianceLighting(scene);\n}\n\n// Function to play a specific movie\nfunction playMovie(movie) {\n    console.log(`Playing movie: ${movie}.`);\n    event.playMovie(movie);\n}\n\n// Movie night routine to set up the perfect viewing experience\nfunction movieNightRoutine(movie) {\n    if (event.movieNightRoutine) {\n        turnOnTV();\n        setSpeakerVolume(30);\n        setAmbianceLighting('movie');\n        playMovie(movie);\n    }\n}\n\n// Party mode routine to set up entertainment for guests\nfunction partyModeRoutine() {\n    if (event.partyModeRoutine) {\n        turnOnTV();\n        setSpeakerVolume(50);\n        setAmbianceLighting('party');\n        event.playMusic('party playlist');\n    }\n}\n\n// Relaxation routine to set up a calm environment\nfunction relaxationRoutine() {\n    if (event.relaxationRoutine) {\n        turnOffTV();\n        setSpeakerVolume(20);\n        setAmbianceLighting('relaxation');\n        event.playMusic('relaxation playlist');\n    }\n}",
        "accurate_docstring":"When in the movieNightRoutine, the system turns on the TV, sets the speaker volume to 30, adjusts the ambiance lighting to a 'movie' scene, and plays the specified movie. When in the partyModeRoutine, the system turns on the TV, sets the speaker volume to 50, adjusts the ambiance lighting to a 'party' scene, and plays the 'party playlist' music. When in the relaxationRoutine, the system turns off the TV, sets the speaker volume to 20, adjusts the ambiance lighting to a 'relaxation' scene, and plays the 'relaxation playlist' music.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"// Function to arm the security system\nfunction armSystem() {\n    console.log(\"Arming the security system.\");\n    event.armSystem();\n}\n\n// Function to disarm the security system\nfunction disarmSystem() {\n    console.log(\"Disarming the security system.\");\n    event.disarmSystem();\n}\n\n// Function to check the status of a specific sensor\nfunction checkSensorStatus(sensor) {\n    let status = event.getSensorStatus(sensor);\n    console.log(`Status of ${sensor} sensor: ${status}`);\n    return status;\n}\n\n// Function to activate the alarm\nfunction activateAlarm() {\n    console.log(\"Activating the alarm.\");\n    event.activateAlarm();\n}\n\n// Function to check the status of multiple sensors and activate the alarm if any are triggered\nfunction comprehensiveSensorCheck() {\n    const sensors = ['door', 'window', 'motion'];\n    for (let sensor of sensors) {\n        let status = checkSensorStatus(sensor);\n        if (status === 'triggered') {\n            activateAlarm();\n            break;\n        }\n    }\n}\n\n// Night routine that arms the system and checks all sensors\nfunction nightRoutine() {\n    if(event.nightRoutine) {\n        armSystem();\n        comprehensiveSensorCheck();\n    }\n}\n\n// Away routine that arms the system and sets an alert if any sensor is triggered\nfunction awayRoutine() {\n    if(event.awayRoutine) {\n        armSystem();\n        if (comprehensiveSensorCheck()) {\n            activateAlarm();\n        }\n    }\n}",
        "accurate_docstring":"When in the nightRoutine, the system arms and checks the status of all sensors (door, window, motion). If any sensor is triggered, the alarm activates. When in the awayRoutine, the system arms and checks the status of all sensors. If any sensor is triggered, the alarm activates.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"// Function to open the blinds\nfunction openBlinds() {\n    console.log(\"Opening the blinds.\");\n    event.openBlinds();\n}\n\n// Function to close the blinds\nfunction closeBlinds() {\n    console.log(\"Closing the blinds.\");\n    event.closeBlinds();\n}\n\n// Function to adjust blinds based on sunlight intensity\nfunction adjustBlinds(sunlightIntensity) {\n    if (sunlightIntensity > 70) {\n        console.log(\"It's very sunny. Closing the blinds halfway.\");\n        event.setBlindsPosition(50); // 50% closed\n    } else if (sunlightIntensity > 30) {\n        console.log(\"Moderate sunlight. Adjusting blinds to 75% open.\");\n        event.setBlindsPosition(75);\n    } else {\n        console.log(\"Low sunlight. Opening the blinds fully.\");\n        event.setBlindsPosition(100);\n    }\n}\n\n// Morning routine to open the blinds gradually\nfunction morningBlindsRoutine() {\n    if(event.morningBlindsRoutine) {\n        console.log(\"Good morning! Opening the blinds gradually.\");\n        let position = 0;\n        let interval = setInterval(() => {\n            position += 10;\n            event.setBlindsPosition(position);\n            if (position >= 100) {\n                clearInterval(interval);\n            }\n        }, 1000);\n    }\n}\n\n// Evening routine to close the blinds\nfunction eveningBlindsRoutine() {\n    if(event.eveningBlindsRoutine) {\n        closeBlinds();\n    }\n}",
        "accurate_docstring":"When in the morningBlindsRoutine, the system opens the blinds gradually, increasing their position by 10% every second until fully open. When in the eveningBlindsRoutine, the system closes the blinds. The system also adjusts the blinds based on sunlight intensity: if the intensity is above 70%, the blinds close halfway; if between 30% and 70%, the blinds are 75% open; if below 30%, the blinds are fully open.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"\n// Function to lock the door\nfunction lockDoor() {\n console.log(\"Locking the door.\");\n event.lockDoor();\n}\n\n// Function to unlock the door\nfunction unlockDoor() {\n        console.log(\"Unlocking the door.\");\n        event.unlockDoor();\n}\n\n// Function to check the status of the door lock\nfunction checkLockStatus() {\n   let status = event.getLockStatus();\nconsole.log(`Door lock status: ${status}`);\n    return status;\n}\n\n// Function to automatically lock the door after a certain time interval\nfunction autoLockDoor(delay) {\n      console.log(`The door will be locked in ${delay} seconds.`);\n       setTimeout(() => {\n        lockDoor();\n    }, delay * 1000);\n}\n\n// Function to unlock the door when a recognized person is detected\nfunction unlockForRecognizedPerson(person) {\n  if (event.isPersonRecognized(person)) {\n            console.log(`Recognized ${person}. Unlocking the door.`);\n         unlockDoor();\n  } else {\n              console.log(`Unrecognized person: ${person}. Door remains locked.`);\n       }\n}\n\n// Routine to lock the door every night at a specific time\nfunction nightlyLockRoutine() {\n        if(event.nightlyLockRoutine) {\n                lockDoor();\n        }\n}\n\n// Routine to unlock the door when the user arrives home\nfunction arrivalRoutine(person) {\n        if(event.arrivalRoutine) {\n            unlockForRecognizedPerson(person);\n }\n}\n",
        "accurate_docstring":"When in the nightlyLockRoutine, the system locks the door. It also automatically locks the door after a specified delay. When in the arrivalRoutine, the system checks if the person is recognized; if so, it unlocks the door. Otherwise, the door remains locked. The system can also manually lock or unlock the door and check the status of the door lock.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"\n// Function to start the fan\nfunction startFan() {\n console.log(\"Starting fan.\");\n event.startFan();\n}\n\n// Function to stop the fan\nfunction stopFan() {\n  console.log(\"Stopping fan.\");\n      event.stopFan();\n}\n\n// Function to adjust the speed of the fan\n// Checks if the speed level is between 0 and 100\nfunction adjustFanSpeed(level) {\n     if (level < 0 || level > 100) {\n            console.log(\"Invalid speed level. Must be between 0 and 100.\");\n            return;\n       }\n     console.log(`Setting fan speed to ${level}%.`);\n   event.setFanSpeed(level);\n}\n\n// Function to set the mode of the fan\n// Validates if the chosen mode is in the list of allowed modes\nfunction setFanMode(mode) {\n        const validModes = ['normal', 'natural', 'sleep', 'turbo'];\n        if (!validModes.includes(mode)) {\n console.log(\"Invalid mode. Please choose from \" + validModes.join(\", \") + \".\");\n            return;\n        }\n     console.log(`Changing fan mode to ${mode}.`);\n event.setFanMode(mode);\n}\n\n// Function to dynamically adjust the fan speed based on the temperature\n// Faster speed for higher temperatures, moderate for comfortable temperatures, and slower for lower temperatures\nfunction dynamicSpeedControl(temperature) {\n       let speed = 0;\n\n      if (temperature >= 30) {\n           speed = 100; // Hot temperature speed\n } else if (temperature >= 20 && temperature < 30) {\n                speed = 75; // Comfortable temperature speed\n       } else {\n              speed = 50; // Cool temperature speed\n }\n     \n      adjustFanSpeed(speed);\n}\n\n// Hot day routine that starts the fan, adjusts speed, and sets mode\nfunction hotDayRoutine() {\n   if(event.hotDayRoutine) {\n             startFan();\n       dynamicSpeedControl(35); // Example temperature for hot day\n            setFanMode('turbo');\n       }\n}\n\n// Normal day routine that starts the fan and sets speed to moderate\nfunction normalDayRoutine() {\n        if(event.normalDayRoutine) {\n          startFan();\n       adjustFanSpeed(75);\n            setFanMode('normal');\n }\n}\n",
        "accurate_docstring":"When in the hotDayRoutine, start the fan. Adjust the speed according to the temperature, when temperature is above 30, set the speed to 100, when temperature is between 20-30, set the speed to 75, when temperature is below 20, set the speed to 50. Set the mode to turbo. When in the normalDayRoutine, start the fan, set the speed to 75, and set the mode to normal.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"\n// Function to start watering the garden\nfunction startWatering() {\n        console.log(\"Starting watering.\");\n event.startWatering();\n}\n\n// Function to stop watering the garden\nfunction stopWatering() {\n    console.log(\"Stopping watering.\");\n    event.stopWatering();\n}\n\n// Function to check soil moisture level\nfunction checkSoilMoisture() {\n       let moistureLevel = event.getSoilMoisture();\n       console.log(`Soil moisture level: ${moistureLevel}%`);\n     return moistureLevel;\n}\n\n// Function to set a watering schedule\nfunction setWateringSchedule(time) {\n   console.log(`Setting watering schedule to ${time}.`);\n event.setWateringSchedule(time);\n}\n\n// Function to adjust watering based on soil moisture\nfunction adjustWatering(moistureLevel) {\n  if (moistureLevel < 30) {\n             console.log(\"Soil is dry. Increasing watering duration.\");\n         event.increaseWateringDuration(30); // Increase by 30 minutes\n      } else {\n              console.log(\"Soil moisture is sufficient. Standard watering duration.\");\n           event.setStandardWateringDuration();\n  }\n}\n\n// Routine to water the garden in the morning\nfunction morningWateringRoutine() {\n if(event.morningWateringRoutine) {\n         startWatering();\n              setWateringSchedule('06:00');\n              let moistureLevel = checkSoilMoisture();\n              adjustWatering(moistureLevel);\n             stopWatering();\n       }\n}\n\n// Routine to check soil moisture and adjust watering in the evening\nfunction eveningWateringRoutine() {\n  if(event.eveningWateringRoutine) {\n         let moistureLevel = checkSoilMoisture();\n              adjustWatering(moistureLevel);\n     }\n}\n",
        "accurate_docstring":"When in the morningWateringRoutine, the system starts watering the garden, sets the watering schedule to 06:00, checks the soil moisture level, adjusts the watering duration based on the moisture level, and stops watering. If the soil is dry (moisture level < 30%), the watering duration is increased by 30 minutes. If the soil moisture is sufficient, the standard watering duration is set. When in the eveningWateringRoutine, the system checks the soil moisture level and adjusts the watering duration based on the moisture level.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"\n// Function to start watering the garden\nfunction startWatering() {\n        console.log(\"Starting watering.\");\n event.startWatering();\n}\n\n// Function to stop watering the garden\nfunction stopWatering() {\n    console.log(\"Stopping watering.\");\n    event.stopWatering();\n}\n\n// Function to set a watering schedule\nfunction setWateringSchedule(time) {\n   console.log(`Setting watering schedule to ${time}.`);\n      event.setWateringSchedule(time);\n}\n\n// Function to adjust the water flow level\nfunction adjustWaterFlow(level) {\n       console.log(`Adjusting water flow to level ${level}.`);\n    event.adjustWaterFlow(level);\n}\n\n// Function to control water flow based on soil moisture and weather forecast\nfunction adaptiveWaterFlowControl(soilMoisture, forecast) {\n  let flowLevel;\n        if (forecast === 'rain') {\n         flowLevel = 1; // Minimal watering\n    } else if (soilMoisture < 30) {\n   flowLevel = 5; // High watering for dry soil\n   } else {\n              flowLevel = 3; // Moderate watering\n        }\n\n   adjustWaterFlow(flowLevel);\n}\n\n// Garden routine that starts watering, sets the schedule, and adjusts the water flow\nfunction gardenRoutine(soilMoisture, forecast) {\n       if(event.gardenRoutine) {\n             startWatering();\n          setWateringSchedule('06:00');\n          adaptiveWaterFlowControl(soilMoisture, forecast);\n }\n}\n\n// Evening garden routine that stops watering and sets a low water flow\nfunction eveningGardenRoutine() {\n  if(event.eveningGardenRoutine) {\n              stopWatering();\n   adjustWaterFlow(2);\n    }\n}\n",
        "accurate_docstring":"When in the gardenRoutine, the system starts watering the garden, sets the watering schedule to 06:00, and adjusts the water flow based on soil moisture and weather forecast. If the forecast is 'rain', sets water flow to level 1; if soil moisture is below 30, sets water flow to level 5; otherwise, sets water flow to level 3. When in the eveningGardenRoutine, the system stops watering and sets water flow to level 2.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"\nfunction setHVACTemperature(temp) {\n console.log(`Setting HVAC temperature to ${temp}°C.`);\n     event.setHVACTemperature(temp);\n}\n\n// Function to control the fan speed\nfunction setFanSpeed(speed) {\n  console.log(`Setting fan speed to ${speed}.`);\n        event.setFanSpeed(speed);\n}\n\n// Function to check the current room temperature\nfunction checkRoomTemperature() {\n    let temperature = event.getRoomTemperature();\n console.log(`Current room temperature: ${temperature}°C`);\n return temperature;\n}\n\n// Function to adjust the HVAC system based on room temperature and outside weather\nfunction adaptiveHVACControl(outsideTemp) {\n      let roomTemp = checkRoomTemperature();\n        if (roomTemp < 20) {\n          console.log(\"Room is cold. Switching to heating mode.\");\n           event.switchToHeating();\n  } else if (roomTemp > 25) {\n            console.log(\"Room is hot. Switching to cooling mode.\");\n            event.switchToCooling();\n      } else {\n              console.log(\"Room temperature is comfortable. Maintaining current mode.\");\n }\n}\n\n// Routine to optimize HVAC settings in the morning based on outside temperature\nfunction morningHVACRoutine(outsideTemp) {\n    if(event.morningHVACRoutine) {\n                adaptiveHVACControl(outsideTemp);\n setHVACTemperature(22);\n                setFanSpeed(3);\n       }\n}\n\n// Routine to optimize HVAC settings in the evening for energy saving\nfunction eveningHVACRoutine(outsideTemp) {\n       if(event.eveningHVACRoutine) {\n                adaptiveHVACControl(outsideTemp);\n setHVACTemperature(20);\n                setFanSpeed(2);\n       }\n}\n\n// Night routine to ensure HVAC is set to a comfortable sleep temperature\nfunction nightHVACRoutine() {\n   if(event.nightHVACRoutine) {\n               setHVACTemperature(18);\n               setFanSpeed(1);\n    }\n}\n",
        "accurate_docstring":"When in the morningHVACRoutine, the system checks the current room temperature and adjusts the HVAC mode based on both the room and outside temperatures. If the room temperature is below 20°C, it switches to heating mode, and if it is above 25°C, it switches to cooling mode. The HVAC temperature is set to 22°C and the fan speed to 3. When in the eveningHVACRoutine, the system performs a similar check and adjustment based on the outside temperature, sets the HVAC temperature to 20°C, and the fan speed to 2. When in the nightHVACRoutine, the system sets the HVAC temperature to 18°C and the fan speed to 1 for comfortable sleep.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"\n// Function to start the sprinkler system\nfunction startSprinklers() {\n     console.log(\"Starting sprinklers.\");\n       event.startSprinklers();\n}\n\n// Function to stop the sprinkler system\nfunction stopSprinklers() {\n       console.log(\"Stopping sprinklers.\");\n  event.stopSprinklers();\n}\n\n// Function to set a watering schedule\nfunction setWateringSchedule(time) {\n      console.log(`Setting watering schedule to ${time}.`);\n event.setWateringSchedule(time);\n}\n\n// Function to adjust watering based on weather forecast\nfunction adjustWatering(forecast) {\n    if (forecast === 'rain') {\n            console.log(\"Rain in the forecast. Skipping watering.\");\n           event.cancelWatering();\n       } else if (forecast === 'sunny') {\n         console.log(\"Sunny weather. Increasing watering duration.\");\n      event.increaseWateringDuration(30); // Increase by 30 minutes\n  } else {\n              console.log(\"Normal weather. Setting standard watering duration.\");\n                event.setStandardWateringDuration();\n       }\n}\n\n// Lawn care routine to water the lawn early in the morning\nfunction morningLawnRoutine() {\n       if(event.morningLawnRoutine) {\n            startSprinklers();\n             setWateringSchedule('06:00');\n         adjustWatering('sunny');\n   }\n}\n\n// Evening routine to check the weather and adjust the next day's watering schedule\nfunction eveningLawnRoutine(forecast) {\n       if(event.eveningLawnRoutine) {\n    adjustWatering(forecast);\n              setWateringSchedule('06:00');\n }\n}\n",
        "accurate_docstring":"When in the morningLawnRoutine, the system starts the sprinklers, sets the watering schedule to 06:00, and adjusts the watering based on the weather forecast. If the forecast is 'sunny', it increases the watering duration by 30 minutes. When in the eveningLawnRoutine, the system adjusts the next day's watering based on the weather forecast and sets the watering schedule to 06:00. If rain is forecasted, it cancels watering.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"\n// Function to set the brightness of the lights\nfunction setBrightness(level) {\n    console.log(`Setting brightness to ${level}%.`);\n   event.setBrightness(level);\n}\n\n// Function to set the color temperature of the lights\nfunction setColorTemperature(temp) {\n     console.log(`Setting color temperature to ${temp}K.`);\n     event.setColorTemperature(temp);\n}\n\n// Function to turn the lights on\nfunction turnLightsOn() {\n        console.log(\"Turning lights on.\");\n event.turnLightsOn();\n}\n\n// Function to turn the lights off\nfunction turnLightsOff() {\n console.log(\"Turning lights off.\");\n   event.turnLightsOff();\n}\n\n// Function to adjust lights based on motion detection\nfunction adjustLightsOnMotion(detected) {\n if (detected) {\n                console.log(\"Motion detected. Turning lights on.\");\n       turnLightsOn();\n        } else {\n              console.log(\"No motion detected. Turning lights off.\");\n            turnLightsOff();\n      }\n}\n\n// Morning routine to set the lights for the start of the day\nfunction morningLightingRoutine() {\n if (event.morningLightingRoutine) {\n                turnLightsOn();\n               setBrightness(75);\n            setColorTemperature(4000);\n }\n}\n\n// Evening routine to set the lights for winding down\nfunction eveningLightingRoutine() {\n if (event.eveningLightingRoutine) {\n           setBrightness(50);\n         setColorTemperature(2700);\n    }\n}\n\n// Night routine to turn off lights and enable motion detection\nfunction nightLightingRoutine() {\n if (event.nightLightingRoutine) {\n          turnLightsOff();\n              adjustLightsOnMotion(event.detectMotion());\n}\n}\n",
        "accurate_docstring":"When in morningLightingRoutine, turns on the lights, sets the brightness to 75%, and adjusts the color temperature to 4000K to create a bright and energetic environment for starting the day. The eveningLightingRoutine sets the brightness to 50% and adjusts the color temperature to 2700K for a warm and relaxing ambiance to wind down the day. When in nightLightingRoutine, turns off the lights and enables motion detection. If motion is detected, the lights turn on; otherwise, they remain off.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"\n// Function to dispense food for the pet\nfunction dispenseFood(amount) {\n   console.log(`Dispensing ${amount} grams of food.`);\n        event.dispenseFood(amount);\n}\n\n// Function to check the current food level in the feeder\nfunction checkFoodLevel() {\n   let foodLevel = event.getFoodLevel();\n      console.log(`Current food level: ${foodLevel}%`);\n     return foodLevel;\n}\n\n// Function to set a feeding schedule\nfunction setFeedingSchedule(time) {\n      console.log(`Setting feeding schedule to ${time}.`);\n  event.setFeedingSchedule(time);\n}\n\n// Function to adjust feeding based on pet activity\nfunction adjustFeeding(activityLevel) {\n      let amount;\n   if (activityLevel === 'high') {\n               amount = 100; // grams\n     } else if (activityLevel === 'moderate') {\n            amount = 75; // grams\n      } else {\n              amount = 50; // grams\n }\n     console.log(`Pet activity level is ${activityLevel}. Dispensing ${amount} grams of food.`);\n        dispenseFood(amount);\n}\n\n// Morning routine to check food level and dispense food\nfunction morningFeedingRoutine(activityLevel) {\n   if(event.morningFeedingRoutine) {\n             let foodLevel = checkFoodLevel();\n          if (foodLevel < 20) {\n                 console.log(\"Food level is low. Refilling the feeder.\");\n                   event.refillFeeder();\n         }\n         adjustFeeding(activityLevel);\n  }\n}\n\n// Evening routine to set feeding schedule and check food level\nfunction eveningFeedingRoutine(activityLevel) {\n   if(event.eveningFeedingRoutine) {\n          setFeedingSchedule('18:00');\n          let foodLevel = checkFoodLevel();\n if (foodLevel < 20) {\n                  console.log(\"Food level is low. Refilling the feeder.\");\n                   event.refillFeeder();\n         }\n             adjustFeeding(activityLevel);\n      }\n}\n",
        "accurate_docstring":"When in the morningFeedingRoutine, the system checks the current food level in the feeder. If the food level is below 20%, it refills the feeder. Based on the pet's activity level, it dispenses 100 grams of food for high activity, 75 grams for moderate activity, or 50 grams for low activity. When in the eveningFeedingRoutine, the system sets the feeding schedule to 18:00, checks the food level, refills the feeder if the food level is below 20%, and adjusts the feeding amount based on the pet's activity level in the same way as in the morning.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"\n// Function to set the refrigerator temperature\nfunction setFridgeTemperature(temp) {\n  console.log(`Setting refrigerator temperature to ${temp}°C.`);\n event.setFridgeTemperature(temp);\n}\n\n// Function to set the freezer temperature\nfunction setFreezerTemperature(temp) {\n      console.log(`Setting freezer temperature to ${temp}°C.`);\n     event.setFreezerTemperature(temp);\n}\n\n// Function to check if a specific item is in the refrigerator\nfunction checkInventory(item) {\n        let isInStock = event.isItemInStock(item);\n    console.log(`${item} is ${isInStock ? 'in stock' : 'not in stock'} in the refrigerator.`);\n return isInStock;\n}\n\n// Function to add an item to the shopping list if it's out of stock\nfunction addToShoppingList(item) {\n        if (!checkInventory(item)) {\n          console.log(`Adding ${item} to the shopping list.`);\n               event.addToShoppingList(item);\n        }\n}\n\n// Function to check the overall inventory and restock critical items\nfunction restockInventory() {\n    const criticalItems = ['milk', 'eggs', 'butter'];\n     criticalItems.forEach(item => addToShoppingList(item));\n}\n\n// Morning routine to set ideal temperatures and check for breakfast items\nfunction morningFridgeRoutine() {\n     if(event.morningFridgeRoutine) {\n           setFridgeTemperature(4);\n              setFreezerTemperature(-18);\n       checkInventory('milk');\n                checkInventory('eggs');\n       }\n}\n\n// Evening routine to restock critical items and set night temperatures\nfunction eveningFridgeRoutine() {\n      if(event.eveningFridgeRoutine) {\n              restockInventory();\n           setFridgeTemperature(5);\n           setFreezerTemperature(-17);\n   }\n}\n",
        "accurate_docstring":"When in the morningFridgeRoutine, the system sets the refrigerator temperature to 4°C and the freezer temperature to -18°C. It also checks if milk and eggs are in stock. When in the eveningFridgeRoutine, the system restocks critical items (milk, eggs, butter) and sets the refrigerator temperature to 5°C and the freezer temperature to -17°C. Additionally, the system can add items to the shopping list if they are out of stock.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"\n// Function to set the temperature of the thermostat\nfunction setTemperature(temp) {\n   console.log(`Setting temperature to ${temp}°C.`);\n      event.setTemperature(temp);\n}\n\n// Function to switch the thermostat to heating mode\nfunction switchToHeating() {\n       console.log(\"Switching to heating mode.\");\n event.switchToHeating();\n}\n\n// Function to switch the thermostat to cooling mode\nfunction switchToCooling() {\n  console.log(\"Switching to cooling mode.\");\n event.switchToCooling();\n}\n\n// Function to schedule a temperature change at a specific time\nfunction scheduleTemperatureChange(time, temp) {\n   console.log(`Scheduling temperature change to ${temp}°C at ${time}.`);\n     event.scheduleTemperatureChange(time, temp);\n}\n\n// Function to control the thermostat adaptively based on the outside temperature\nfunction adaptiveThermostatControl(outsideTemp) {\n let desiredTemp;\n\n    if (outsideTemp < 10) {\n            desiredTemp = 22; // Warm setting for cold weather\n            switchToHeating();\n } else if (outsideTemp > 25) {\n                desiredTemp = 20; // Cool setting for hot weather\n          switchToCooling();\n    } else {\n              desiredTemp = 21; // Moderate setting for mild weather\n     }\n\n   setTemperature(desiredTemp);\n}\n\n// Morning routine that adjusts the thermostat based on the outside temperature and schedules a change\nfunction morningRoutine(outsideTemp) {\n       if(event.morningRoutine) {\n        adaptiveThermostatControl(outsideTemp);\n                scheduleTemperatureChange('08:00', 18);\n    }\n}\n\n// Evening routine that sets a comfortable temperature for the evening\nfunction eveningRoutine() {\n        if(event.eveningRoutine) {\n            setTemperature(21);\nswitchToHeating();\n     }\n}\n",
        "accurate_docstring":"When in the morningRoutine, the thermostat adjusts based on the outside temperature: if below 10°C, sets to 22°C and switches to heating; if above 25°C, sets to 20°C and switches to cooling; otherwise, sets to 21°C. It also schedules a temperature change to 18°C at 08:00. When in the eveningRoutine, sets the temperature to 21°C and switches to heating.",
        "docstring":"",
        "general_docstring":""
    }
       

]