[
    {
        "code":"function backHome() {\n\tif(event.lightON && event.doorOpen) {\n\t\tevent.CloseDoor;\n\t\tevent.OnTV;\n\t} else if(event.doorOpen) {\n\t\tevent.closeDoor;\n\t}\n}",
        "accurate_docstring":"When the light is on and the door is open, turn on the TV and close the door. Or if the door is open, close the door.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"\nlet Invitetimes=0;\nlet Rejecttimes=0;\nfunction sendEmail() {\nif(event.Date==Friday){\nevent.sendEmail();\n      Invitetimes++;\nif(event.Noreply) Rejecttimes--;\nif (Invitetimes==Rejecttimes){\n event.sendEmail();\n}\n}\n}\n",
        "accurate_docstring":"When it is Friday, send my friend an email and plus the invite times. If he doesn't reply, plus the reject time and if the reject time equal the invite time, send he another email.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"\nfunction lightsOff() {\n      if(event.buttonPress){\n                event.OffLights;\n              }\n}\n",
        "accurate_docstring":"Turn off your lights when one tap on your phone button.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"\nfunction forecastWeather(id){\n       event.turnOnVoiceAssistant(id);\n       event.broadcast(id,getWeather());\n}\neventBus.on('EntranceMovement',()=>{\n        forecastWeather(1);\n});\nfunction setupForecastScene(){\n  eventBus.emit('EntranceMovement');\n}\nsetupForecastScene();\n",
        "accurate_docstring":"When there is movement at the entrance, turn on the voice assistant and broadcast the weather.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"\nfunction turnOnFragranceMachine() {\n event.turnOnFragranceMachine();\n}\nfunction setAirConditionerTemperature(temperature) {\n  console.log(`Setting air conditioner temperature to ${temperature}℃`);\n    event.setAirConditionerTemperature(temperature);\n}\nfunction adjustLighting(lightIds, temperature) {\n     lightIds.forEach(id => {\n              event.turnOnlight(id);\n                event.changelight(id, temperature);\n       });\n}\nfunction playHappyBirthday(){\n event.playMusic('happy birthday');\n}\nfunction displayPhotos(){\n  event.turnOnScreen();\n getphoto().forEach(photo=>{setTimeout(()=>{event.display(photo)},1000);})                         \n}\neventBus.on('fontDoorMovement',()=>{\n        adjustLighting(getLightId(),1000);\n    playHappyBirthday();\n      displayPhotos();\n})\nfunction  setupBirthdayScene(){\n setAirConditionerTemperature(23);\nturnOnFragranceMachine();\n      setTimeout(()=>eventBus.emit('fontDoorMovement'),1000);\n}\n ",
        "accurate_docstring":"When there is movement at the front door, adjust the lighting, play happy birthday music and display photos.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"\nfunction controlChristmasLights(){\n  while(1){\n             turnOnChristmasLights();\n         setTimeout(() => {\n                     event.turnOffChristmasLights();\n               }, duration * 1000);\n      }\n\n}\nfunction playMerryChristmas(){\n        event.playMusic('Merry Christmas');\n}\nfunction ChangeAmbianceLights(){\n  event.turnOnAmbianceLights();\n lightIds.forEach(id => {\n event.changelight(id, 1000);\n   });\n}\nfunction controlProjectors(){\n event.turnOnProjectors();\nevent.ProjectorsDisplay(\"Santa Claus.jpeg\");\n   getProjects().action=\"rotate\";\n}\n",
        "accurate_docstring":"Control the Christmas lights, play Merry Christmas music, change the ambiance lights and control the projectors.",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":"\nfunction adjustLighting(lightIds, temperature) {\nlightIds.forEach(id => {\n  event.changelight(id, temperature);\n});\n}\n\nfunction playMusic(track, duration) {\nevent.playMusic(track);\nsetTimeout(() => {\n     event.stopMusic(track);\n}, duration * 1000);\n}\n\nfunction controlGroundLights(duration) {\nevent.turnOnGroundLights();\nsetTimeout(() => {\n     event.turnOffGroundLights();\n}, duration * 1000);\n}\n\nfunction setAirConditionerTemperature(temperature) {\nconsole.log(`Setting air conditioner temperature to ${temperature}℃`);\nevent.setAirConditionerTemperature(temperature);\n}\n\nfunction turnOnFragranceMachine() {\nevent.turnOnFragranceMachine();\n}\n",
        "accurate_docstring":"If movement is detected at the side door (groom’s entrance), adjust the top lights 1, 2, 3 to 4500K, control the sound system to play the music ‘Love so sweet’ for 10 seconds; if movement is detected at the main door (bride’s entrance), adjust the top lights 4, 5, 6 to 3500K, control the sound system to play the music ‘Ave Maria’ for 10 seconds; whenever the hallway sensor detects movement, turn on the floor lights, and turn them off after 2 seconds; maintain the air conditioning temperature at 23°C; 5) turn on the fragrance diffuser",
        "docstring":"A romantic Western-style wedding featuring cool-toned lighting. Different music accompanies the entrance of the groom and bride. Lights change with movement, maintaining a comfortable temperature and introducing fragrance.",
        "general_docstring":"A romantic Western-style scene with the entrance of the groom and bride"
    },
    {
        "code":"\nfunction setAirConditionerTemperature(temperature) {\n        console.log(`Setting air conditioner temperature to ${temperature}℃`);\n  event.setAirConditionerTemperature(temperature);\n}\nfunction controlCurtains(command){\n if(command=='close')\n          event.closeCurtains();\n        else if(command=='open') \nevent.openCurtains();\n}\nfunction controlLights(command){\n     if(command=='open')\n           event.turnOnLights();\n   else if(command=='close')\n             event.turnOffLights();\n}\nfunction playMovie(name){\n    event.playMovie(name);\n}\neventBus.on('movieNightStart', () => {\n     playMusic(\"Cinematic Soundtrack\", 120);\n controlLights('close');\n       controlCurtains('close');\n});\neventBus.on('movieNightEnd', () => {\n    stopMusic(\"Cinematic Soundtrack\");\n    controlLights('open');\n        controlCurtains('open');\n});\nfunction setupMovieScene(){\n      setAirConditionerTemperature(23);\n     eventBus.emit('movieNightStart');\n       playMovie('The Shawshank Redemption');\n        eventBus.emit('movieNightEnd');\n}\nsetupMovieScene();\n",
        "accurate_docstring":"At the beginning of the home theater scene, play the movie soundtrack ‘Cinematic Soundtrack’ and turn off the lights and curtains. When the home theater scene ends, stop playing the movie soundtrack and turn on the lights and curtains.",
        "docstring":"In the home theater scene, start by playing the movie soundtrack, turning off the lights and closing the curtains. At the end, stop playing the soundtrack and turn on the lights and open the curtains.",
        "general_docstring":"In the home theater scene, play the soundtrack and control the lighting and curtains."
    },
    {
        "code":"\nfunction turnOnLight(){\n     event.turnOnLight();\n}\nfunction turnOffLight(){\n     event.turnOffLight();\n}\nfunction controlFans(speed) {\n console.log(`Setting fan speed to ${speed}`);\n event.controlFan(speed);\n}\nfunction turnOnAirCleaner(){\n       event.turnOnAirCleaner();\n}\nfunction turnOnSmartOutlets(){\n    event.turnOnOutlets();\n}\nfunction turnOffSmartOutlets(){\n    event.turnOffOutlets();\n}\nfunction broadcast(text) {\n  event.broadcast(track);\n}\nvar number=0;\neventBus.on('EntranceDoorMovement', () => {\n  if(number==0)\n {\n             turnOnLight();\n                turnOnSmartOutlets();\n         controlFans(1000);\n              number++;\n     }\n     broadcast(\"Welcome\");\n});\neventBus.on('exitDoorMovement', () => {\n     if(number==1)\n {\n             turnOffLight();\n               turnOffSmartOutlets();\n          number--;\n     }\n     broadcast(\"Have a good day\");\n});\nfunction setupWeddingScene() {\n      turnOnAirCleaner()\n    eventBus.emit('EntranceDoorMovement');\n        eventBus.emit('exitDoorMovement');\n}\n",
        "accurate_docstring":"When the entrance sensor detects someone entering and there is no one in the gym, turn on the lights, activate the smart sockets for the gym equipment, set the fan to 1000 rpm, and broadcast ‘Welcome’. Increase the people counter. When the exit sensor detects someone leaving and there is only one person in the gym, turn off the lights and deactivate the smart sockets for the gym equipment, and broadcast ‘Have a good day’. Decrease the people counter. Turn on the air purifier.",
        "docstring":"In the gym scenario, upon entry, the lights, smart sockets, and fan are turned on, along with playing a welcome message. When leaving, the lights and smart sockets are turned off, and a farewell message is played. The air purifier remains on.",
        "general_docstring":"In the gym, an automated system controls the lighting, equipment, and ventilation. It welcomes visitors with voice prompts upon entry and bids them farewell when they leave."
    },
    {
        "code":"\nfunction playMusic(track, duration) {\n       console.log(`Playing music: ${track} for ${duration} seconds`);\n event.playMusic(track);\n       setTimeout(() => {\n            event.stopMusic(track);\n       }, duration * 1000);\n}\n\n\nfunction openCurtains() {\n  console.log(\"Opening curtains\");\n      event.openCurtains();\n}\n\n\nfunction startCoffeeMaker() {\n     console.log(\"Starting coffee maker\");\n event.startCoffeeMaker();\n}\n\n\nfunction adjustLighting(temperature) {\n        console.log(`Adjusting lighting to ${temperature}K`);\n   event.adjustLighting(temperature);\n}\n\n\nfunction turnOnAirCleaner() {\n      console.log(\"Turning on air cleaner\");\n  event.turnOnAirCleaner();\n}\n\n\neventBus.on('AM7:00', () => {\nplayMusic(\"Morning Melody\", 300);\n      openCurtains();\n       startCoffeeMaker();\n   adjustLighting(3000);\n   turnOnAirCleaner();\n});\n\nfunction setupMorningScene() {\n    console.log(\"Setting up morning wake-up scene\");\n        eventBus.emit('morningWakeUp');\n}\n",
        "accurate_docstring":"Play the gentle music “Morning Melody” for 5 minutes at the specified time.Open the curtains to let natural light in.Start the coffee machine to prepare coffee.Adjust the lighting to a soft color temperature of 3000K.Turn on the air purifier.",
        "docstring":"In the morning wake-up scene, play gentle music, open the curtains, start the coffee machine, adjust the soft lighting, and turn on the air purifier.",
        "general_docstring":"The morning wake-up scene in a smart home includes playing music, opening curtains, brewing coffee, adjusting lighting, and activating air purification."
    },
    {
        "code":"\nfunction turnOffLights() {\n  console.log(\"Turning off lights\");\n    event.turnOffLights();\n}\nfunction closeCurtains() {\n   console.log(\"Closing curtains\");\n      event.closeCurtains();\n}\nfunction playSoothingMusic(track, duration) {\n        console.log(`Playing soothing music: ${track} for ${duration} minutes`);\n        event.playMusic(track);\n       setTimeout(() => {\n            event.stopMusic(track);\n}, duration * 60 * 1000);\n}\nfunction setAirConditionerTemperature(temperature) {\n     console.log(`Setting air conditioner temperature to ${temperature}℃`);\n  event.setAirConditionerTemperature(temperature);\n}\nfunction turnOnNightLight() {\n      console.log(\"Turning on night light\");\n        event.turnOnNightLight();\n}\n",
        "accurate_docstring":"At the specified time, automatically turn off all lights. Close the curtains. Play 30 minutes of soothing music “Soothing Sounds” to aid sleep. Adjust the air conditioning temperature to 22°C for optimal sleep conditions. Turn on the night light.",
        "docstring":"In night mode, turn off the lights and close the curtains, play soothing music, adjust the air conditioning to 22°C, and turn on the night light.",
        "general_docstring":"Smart home night mode: Turn off lights, play soothing music, adjust the air conditioning, and activate the night light."
    },
    {
        "code":"function playBackgroundMusic(track, duration) {\n    console.log(`Playing background music: ${track} for ${duration} minutes`);\n    event.playMusic(track);\n    setTimeout(() => {\n        event.stopMusic(track);\n    }, duration * 60 * 1000);\n}\nfunction adjustLighting(temperature) {\n    console.log(`Adjusting lighting to ${temperature}K`);\n    event.adjustLighting(temperature);\n}\n\nfunction preheatOven(temperature) {\n    console.log(`Preheating oven to ${temperature}℃`);\n    event.preheatOven(temperature);\n}\n\nfunction turnOnAirCleaner() {\n    console.log(\"Turning on air cleaner\");\n    event.turnOnAirCleaner();\n}\n\neventBus.on(\"dinnerTime\", () => {\n    playBackgroundMusic(\"Dinner Jazz\", 120);\n    adjustLighting(2700);\n    preheatOven(180);\n    turnOnAirCleaner();\n});\n\nfunction setupDinnerScene() {\n    console.log(\"Setting up dinner scene\");\n    eventBus.emit(\"dinnerTime\");\n}\n\nsetupDinnerScene();",
        "accurate_docstring":"At the specified time, play 2 hours of background music, \"Dinner Jazz.\"Adjust the lighting to a soft 2700K color temperature to create a dinner atmosphere.Preheat the oven to 180°C.Turn on the air purifier.",
        "docstring":"Dinner mode scene: play background music, adjust lights to a soft color temperature, preheat the oven, and turn on the air purifier.",
        "general_docstring":"Smart home dinner mode: background music, soft lighting, preheat oven, air purification."
    },
     {   "code":"function startWatering(){\n    console.log(\"Soil is dry. Starting watering system.\");\n    event.startWatering();\n}\n\nfunction stopWatering(){\n    console.log(\"Soil is moist. Stopping watering system.\");\n    event.stopWatering();\n}\nfunction environmentalMonitoring() {\n    setInterval(() => {\n        const lightIntensity = getLightIntensity();\n        const temperature = getTemperature();\n        const humidity = getHumidity();\n        console.log(`Light intensity: ${lightIntensity} Lux, Temperature: ${temperature}°C, Humidity: ${humidity}%`);\n        event.show('Light intensity: '+lightIntensity +'Lux ,Temperature:'+temperature+'°C, Humidity:'+humidity);\n    }, 300000);\n}\n\nfunction playNatureSounds() {\n    console.log(\"Playing nature sounds (birds chirping, water flowing, etc.)\");\n    event.playMusic(\"Nature Sounds\");\n}\n\nfunction trackPlantGrowth() {\n    setInterval(() => {\n        var plantGraphics = getPlantGraphics();\n        event.sendGraphics(plantGraphics);\n    }, 86400000);\n}\n\nfunction adjustThermostat(temperature){\n    event.adjustThermostate(temperature);\n}\n\nfunction turnOnFillLights(){\n    event.turnOnFillLights();\n}\n\nfunction turnOnLights(){\n    event.turnOnLights();\n}\n\neventBus.on('dry', () => {\n    startWatering();\n});\neventBus.on('moist', () => {\n    stopWatering();\n});\neventBus.on('night',()=>{\n    turnOnFillLights();\n})\n\neventBus.on('doorMovement', () => {\n    turnOnLights();\n    playNatureSounds();\n});\n\nfunction setupGardenScene() {\n    trackPlantGrowth();\n    environmentalMonitoring();\n    adjustThermostat();\n     eventBus.emit('doorMovement');\n\n}\n\nsetupGardenScene();",
         "accurate_docstring":"Automatic watering system: Monitor soil moisture, and if the soil is too dry, start the watering system; if the soil is too wet, stop the watering.Environmental monitoring: Periodically monitor light intensity, temperature, and humidity, and display the data on an electronic screen.Play nature sounds: When there is movement at the garden gate, play nature sounds like bird chirping and flowing water.Plant growth tracking: Every 24 hours, capture images of plants using a smart camera and send the images to a mobile phone.Smart control: Turn on the supplementary lights at night and activate lights when there is movement at the garden gate.",
         "docstring":"Smart garden scene: Automatically water based on soil moisture, monitor environment and display data on an electronic screen, play nature sounds, track plant growth, and smartly control supplementary lights and garden lights.",
         "general_docstring":"Smart garden: automatic watering, environmental monitoring, nature sounds, plant growth tracking, smart light control."
    },
    {
        "code":"function preheatOven(temperature) {\n    console.log(`Preheating oven to ${temperature}°C`);\n    event.preheatOven(temperature);\n}\n\nfunction playCookingGuide(guide) {\n    console.log(`Playing cooking guide: ${guide}`);\n    event.playCookingGuide(guide);\n}\n\n\nfunction adjustLighting() {\n    const lightIntensity = getLightIntensity();\n    if (lightIntensity < 300) {\n        console.log(\"Adjusting kitchen lighting to brighter setting\");\n        event.adjustLighting(\"brighter\");\n    } else {\n        console.log(\"Adjusting kitchen lighting to dimmer setting\");\n        event.adjustLighting(\"dimmer\");\n    }\n}\n\nfunction controlFan() {\n    const temperature = getKitchenTemperature();\n    if (temperature > 25) {\n        console.log(\"Kitchen is too hot. Turning on fan.\");\n        event.turnOnFan();\n    } else {\n        console.log(\"Kitchen temperature is normal. Turning off fan.\");\n        event.turnOffFan();\n    }\n}\n\nfunction adjustFotile(speed){\n    if(speed!=0)\n    event.adjustfotile(speed);\n    else\n    event.turnOfffotile();\n}\neventBus.on('startCooking', () => {\n    adjustFotile(1000);\n    preheatOven(180);\n    playCookingGuide(\"Step-by-step cooking instructions\");\n    monitorEnvironment();\n    adjustLighting();\n    controlFan();\n});\neventBus.on('endCooking', () => {\n    adjustFotile(0);\n    event.turnOffOven();\n    event.turnOffScreen();\n    adjustLighting();\n    controlFan();\n});\n\nfunction setupKitchenScene() {\n    eventBus.emit('startCooking');\n    eventBus.emit('endCooking');\n}\n\nsetupKitchenScene();",
        "accurate_docstring":"Start the oven: Automatically preheat the oven to 180°C when cooking begins.Play cooking instructions: Play detailed cooking instructions when cooking starts.Smart lighting: Automatically adjust the kitchen lighting brightness based on ambient light intensity.Smart fan: Automatically turn the fan on or off based on the kitchen temperature to maintain a comfortable environment.Control the extractor hood: Turn on the extractor hood when cooking starts and turn it off when cooking ends.End of cooking: Turn off the oven and cooking instructions display, and adjust lighting and fan settings.",
        "docstring":"Smart kitchen scene: Automatically preheat the oven, play cooking instructions, adjust lighting based on environment, smartly control the fan and extractor hood.",
        "general_docstring":"Smart kitchen: automatic oven, cooking instructions, environmental monitoring, smart lighting, fan, and extractor hood."
    },
    {
        "code":"function startRecording() {\n    console.log(\"Starting camera recording.\");\n    event.startRecording();\n}\n\n\nfunction stopRecording() {\n    console.log(\"Stopping camera recording.\");\n    event.stopRecording();\n}\n\n\nfunction sendAlert() {\n    console.log(\"Sending alert to security company.\");\n    event.sendAlert();\n}\n\n\nfunction checkDoorsAndWindows() {\n    const allClosed = event.checkDoorsAndWindows();\n    if (!allClosed) {\n        console.log(\"Some doors or windows are open. Sending alert.\");\n        event.sendWarning(\"Some doors or windows are open.\");\n    }\n}\n\n\nfunction playWarningSound() {\n    console.log(\"Playing warning sound.\");\n    event.playWarningSound();\n}\n\n\neventBus.on('intrusionDetected', () => {\n    event.turnOnLights();\n    playWarningSound();\n    startRecording();\n    sendAlert();\n    checkDoorsAndWindows();\n});\n\neventBus.on('safeConfirmed', () => {\n    event.turnOffLights();\n    stopRecording();\n    event.stopWarningSound();\n});\n\n\nfunction setupSecurityScene() {\n    checkDoorsAndWindows();\n\n    eventBus.emit('intrusionDetected');\n    eventBus.emit('safeConfirmed');\n}\n\n\nsetupSecurityScene();",
        "accurate_docstring":"Intrusion detection: When abnormal movement is detected in the house, trigger the alarm system, turn on all lights, and play a warning sound through the smart speaker system.Security cameras: Activate the cameras to record and send real-time video streams to the homeowner's mobile phone.Door and window detection: Check if all doors and windows are closed; if any are open, issue a warning alert.Alarm system: Connect with the alarm company, automatically sending an alert message to the company.Reset security system: After the homeowner confirms safety, turn off the alarm system, restore normal lighting, and stop camera recording.",
        "docstring":"Smart home security scene: Detect abnormal movement and trigger alarm, activate camera recording, check door and window status, notify alarm company, and reset system after safety confirmation.",
        "general_docstring":"Smart home security: automatic detection, alarm, recording, door/window check, and notify alarm company."
    },
    {
        "code":"function startWorkMode() {\n    console.log(\"Starting work mode.\");\n    event.turnOnWorkLights();\n    event.startComputer();\n    event.startMonitor();                   \n    adjustEnvironment();\n}\n\nfunction adjustEnvironment() {\n    const lightIntensity = getLightIntensity();\n    const temperature = getTemperature();\n    const airQuality = getAirQuality();\n\n    if (lightIntensity < 300) {\n        console.log(\"Adjusting office lighting to brighter setting\");\n        event.adjustLighting(\"brighter\");\n    } else {\n        console.log(\"Adjusting office lighting to dimmer setting\");\n        event.adjustLighting(\"dimmer\");\n    }\n\n    if (temperature > 25) {\n        console.log(\"Room is too hot. Turning on air conditioner.\");\n        event.turnOnAirConditioner();\n    } else {\n        console.log(\"Room temperature is comfortable. Turning off air conditioner.\");\n        event.turnOffAirConditioner();\n    }\n\n    if (airQuality < 50) {\n        console.log(\"Air quality is poor. Turning on air purifier.\");\n        event.turnOnAirPurifier();\n    } else {\n        console.log(\"Air quality is good. Turning off air purifier.\");\n        event.turnOffAirPurifier();\n    }\n}\n\n\nfunction playBackgroundMusic() {\n    console.log(\"Playing background music.\");\n    event.playMusic(\"Background Music\");\n}\n\n\nfunction startPomodoroTimer() {\n    console.log(\"Starting pomodoro timer.\");\n    event.startPomodoro();\n}\n\n\nfunction startVideoConference() {\n    console.log(\"Starting video conference mode.\");\n    event.adjustCamera(\"optimal\");\n    event.optimizeLighting(\"video\");\n    event.stopMusic();\n}\n\n\nfunction healthReminders() {\n    setInterval(() => {\n        console.log(\"Time to take a break and stretch.\");\n        event.sendReminder(\"Take a break and stretch.\");\n    }, 3600000); \n}\n\n\nfunction endWorkMode() {\n    console.log(\"Ending work mode.\");\n    event.turnOffWorkLights();\n    event.stopComputer();\n    event.stopMonitor();\n    event.adjustLighting(\"comfortable\");\n    event.playMusic(\"Relaxing Music\");\n}\n\n\neventBus.on('startWork', () => {\n    startWorkMode();\n    playBackgroundMusic();\n    startPomodoroTimer();\n    healthReminders();\n});\n\neventBus.on('startMeeting', () => {\n    startVideoConference();\n});\n\neventBus.on('endWork', () => {\n    endWorkMode();\n});\n\n\nfunction setupWorkScene() {\n    \n    eventBus.emit('startWork'); \n    eventBus.emit('startMeeting'); \n    setTimeout(() => eventBus.emit('endWork'), 28800000); \n}\n\n\nsetupWorkScene();",
        "accurate_docstring":"Start office mode: When the user enters the home office, automatically activate office mode by turning on work lights, starting the computer and monitor, and adjusting the room temperature.Real-time environment monitoring: Use sensors to monitor indoor light, temperature, and air quality, and automatically adjust lighting, air conditioning, and the air purifier as needed.Focused work time: Play soft background music, start the Pomodoro timer to remind the user to work and take breaks.Video conference mode: When a video conference begins, automatically adjust the camera angle, optimize background lighting, and turn off background music.Break reminders: Based on work duration and health recommendations, regularly remind the user to stand up, move around, and do eye exercises.End office mode: When work ends, automatically turn off work equipment, adjust lighting to a comfortable mode, and play relaxing music.",
        "docstring":"Smart home office scene: Automatically start work equipment, monitor the environment in real-time, play background music, optimize for video conferences, provide health break reminders, and end office mode",
        "general_docstring":"Smart office: automatic equipment, environment monitoring, conference optimization, health reminders."
    },
    {
        "code":"function automaticFeeder() {\n    console.log(\"Activating automatic feeder.\");\n    event.feedPet();\n\n    function automaticWatering() {\n        console.log(\"Activating automatic watering.\");\n        event.waterPet();\n    }\n\n    function activityMonitoring() {\n        setInterval(() => {\n            const activityLevel = getActivityLevel();\n            event.sendmessage(`Pet activity level: ${activityLevel}`);\n            if (activityLevel < 3) {\n                console.log(\"Pet needs more activity.\");\n            }\n        }, 60000);\n    }\n\n    function adjustEnvironment() {\n        const temperature = getTemperature();\n        const humidity = getHumidity();\n        console.log(`Temperature: ${temperature}°C, Humidity: ${humidity}%`);\n        if (temperature > 25) {\n            console.log(\"Turning on air conditioning.\");\n            event.turnOnAirConditioning();\n        }\n        if (humidity < 40) {\n            console.log(\"Turning on humidifier.\");\n            event.turnOnHumidifier();\n        }\n    }\n\n    function remoteInteraction() {\n        console.log(\"Remote interaction activated.\");\n        event.activateRemoteControl();\n    }\n\n    eventBus.on('startPetCare', () => {\n        activityMonitoring();\n        adjustEnvironment();\n    });\n    eventBus.on('remoteInteraction', () => {\n        remoteInteraction();\n    });\n    eventBus.on('NeedFeed', () => {\n        automaticFeeder();\n    });\n    eventBus.on('NeedWater', () => {\n        automaticWatering();\n    });\n\n    function setupPetCareScene() {\n        eventBus.emit('startPetCare');\n        eventBus.emit('NeedFeed');\n        eventBus.emit('NeedWater');\n        eventBus.emit('remoteInteraction');\n    }\n\n    setupPetCareScene();\n}",
        "accurate_docstring":"Start office mode: When the user enters the home office, automatically activate office mode by turning on work lights, starting the computer and monitor, and adjusting the room temperature.Real-time environment monitoring: Use sensors to monitor indoor light, temperature, and air quality, and automatically adjust lighting, air conditioning, and the air purifier as needed.Focused work time: Play soft background music, start the Pomodoro timer to remind the user to work and take breaks.Video conference mode: When a video conference begins, automatically adjust the camera angle, optimize background lighting, and turn off background music.Break reminders: Based on work duration and health recommendations, regularly remind the user to stand up, move around, and do eye exercises.End office mode: When work ends, automatically turn off work equipment, adjust lighting to a comfortable mode, and play relaxing music.",
        "docstring":"Smart home office scene: Automatically start work equipment, monitor the environment in real-time, play background music, optimize for video conferences, provide health break reminders, and end office mode.",
        "general_docstring":"Smart office: automatic equipment, environment monitoring, conference optimization, health reminders."
    },
    {
        "code":"function turnOnLights(){\n   event.turnOnLights();\n}\nfunction turnOffLights(){\n    event.turnOffLights();\n}\nfunction turnOnDeskLamp(){\n    event.turnOnDeskLamp()\n}\nfunction turnOffDeskLamp(){\n    event.turnOffDeskLamp()\n}\nfunction playWhiteNoise(name){\n        event.playWhiteNoise(name);\n}\nfunction stopWhiteNoise(name){\n    event.stopWhiteNoise();\n}\nfunction trackLearning(){\n    setInterval(() => {\n        let graphics=getGraphics();\n        event.sendMessage(graphics)\n    }, 3600000); \n}\nfunction healthReminders() {\n    setInterval(() => {\n        console.log(\"Time to take a break and stretch.\");\n        event.sendReminder(\"Take a break and stretch.\");\n    }, 3600000); \n}\neventBus.on('StartLearning', () => {\n    turnOnLights();\n    turnOnDeskLamp();\n    playWhiteNoise('rain');\n    trackLearning();\n    healthReminders();\n});\neventBus.on('EndLearning', () => {\n    turnOffLights();\n    turnOffDeskLamp();\n    stopWhiteNoise();\n});\nfunction setupLearningScene() {\n    eventBus.emit('StartLearning'); \n    setTimeout(() => eventBus.emit('EndLearning'), 10800000); \n}\nsetupsetupLearningScene",
        "accurate_docstring":"When the study session starts, the lights and desk lamp will automatically turn on, soothing white noise will play, the study progress will be tracked and study status pictures will be sent at regular intervals, while reminders for eye exercises will be given.At the end of the study session, the lights and desk lamp will automatically turn off, and the white noise will stop playing",
        "docstring":"Automatically activate study mode, providing a comfortable environment and study support, and automatically deactivate when study ends.",
        "general_docstring":"Automatic study, comfortable environment."
    },
    {
        "code":"function turnOnReadingLight() {\n    console.log(\"Turning on reading light.\");\n    event.turnOnReadingLight();\n}\nfunction turnOffReadingLight() {\n    console.log(\"Turning off reading light.\");\n    event.turnOffReadingLight();\n}\nfunction playSoftMusic() {\n    console.log(\"Playing soft background music.\");\n    event.playMusic(\"Soft Music\");\n}\nfunction stopSoftMusic() {\n    console.log(\"Stopping soft background music.\");\n    event.stopMusic();\n}\nfunction adjustTemperature(temp) {\n    console.log(`Adjusting room temperature to ${temp}°C`);\n    event.adjustTemperature(temp);\n}\nfunction monitorEnvironment() {\n    setInterval(() => {\n        const lightIntensity = getLightIntensity();\n        const temperature = getTemperature();\n        console.log(`Light intensity: ${lightIntensity} Lux, Temperature: ${temperature}°C`);\n        event.show(`Light intensity: ${lightIntensity} Lux, Temperature: ${temperature}°C`);\n    }, 300000); \n}\neventBus.on('startReading', () => {\n    turnOnReadingLight();\n    playSoftMusic();\n    adjustTemperature(22); \n    monitorEnvironment();\n});\neventBus.on('endReading', () => {\n    turnOffReadingLight();\n    stopSoftMusic();\n});\nfunction setupReadingScene() {\n    eventBus.emit('startReading'); \n    setTimeout(() => eventBus.emit('endReading'), 7200000); \n}\nsetupReadingScene();",
        "accurate_docstring":"Activate Reading Mode: When reading begins, the reading light will automatically turn on, gentle background music will play, and the room temperature will adjust to a comfortable 22°C.Real-time Environment Monitoring: Sensors will monitor light intensity and temperature every 5 minutes and display the environmental parameters on an electronic screen.End Reading Mode: After 2 hours, the reading light will automatically turn off and the background music will stop playing.",
        "docstring":"Automatically activate reading mode, adjust lighting and temperature, play background music, and monitor environmental parameters in real-time.",
        "general_docstring":"Smart reading, comfortable environment, automatic monitoring."
    },
    {
        "code":"function adjustLighting(lightIds, temperature) {\n    lightIds.forEach(id => {\n        console.log(`Adjusting light ${id} to ${temperature}K`);\n        event.changelight(id, temperature);\n    });\n}\nfunction playMusic(track, duration) {\n    console.log(`Playing music track: ${track} for ${duration} seconds`);\n    event.playMusic(track);\n    setTimeout(() => {\n        event.stopMusic(track);\n    }, duration * 1000);\n}\nfunction setAirConditionerTemperature(temperature) {\n    console.log(`Setting air conditioner temperature to ${temperature}℃`);\n    event.setAirConditionerTemperature(temperature);\n}\nfunction startSmartMirror() {\n    console.log(\"Starting smart mirror with yoga guidance\");\n    event.showdata();\n}\nfunction startAirPurifier() {\n    console.log(\"Starting air purifier\");\n    event.startAirPurifier();\n}\nfunction startFitnessTracker() {\n    console.log(\"Starting fitness tracker\");\n    event.startFitnessTracker();\n}\neventBus.on('yogaSessionStart', () => {\n    adjustLighting([1, 2, 3], 2700); \n    playMusic(\"Yoga Playlist\", 3600); \n    setAirConditionerTemperature(22);\n    startSmartMirror();\n    startAirPurifier();\n    startFitnessTracker();\n});\neventBus.on('MirrorExistPerson', () => {\n    startSmartMirror();\n});\nfunction setupYogaScene() {\n    eventBus.emit('yogaSessionStart'); \n    eventBus.emit('MirrorExistPerson'); \n}\nsetupYogaScene();",
        "accurate_docstring":"Activate Yoga Mode: When the yoga session begins, relaxing yoga music will automatically play, the room temperature will adjust to 24°C, and the lighting will switch to a relaxing mode.Real-time Environment Monitoring: Sensors will monitor light intensity and temperature every 5 minutes and display the environmental parameters on an electronic screen.End Yoga Mode: After 1 hour, the yoga music will automatically stop playing and the lighting will return to normal mode.",
        "docstring":"Automatically activate yoga mode, adjust lighting and temperature, play yoga music, and monitor environmental parameters in real-time.",
        "general_docstring":"Smart yoga, comfortable environment, automatic monitoring"
    },
    {
        "code":"function adjustLighting(lightIds, temperature, brightness) {\n    lightIds.forEach(id => {\n        console.log(`Adjusting light ${id} to ${temperature}K and ${brightness}% brightness`);\n        event.changelight(id, temperature, brightness);\n    });\n}\nfunction playMusic(track, duration) {\n    console.log(`Playing music track: ${track} for ${duration} seconds`);\n    event.playMusic(track);\n    setTimeout(() => {\n        event.stopMusic(track);\n    }, duration * 1000);\n}\nfunction stopMusic(track) {\n    console.log(`Stopping music track: ${track}`);\n    event.stopMusic(track);\n}\nfunction setAirConditionerTemperature(temperature) {\n    console.log(`Setting air conditioner temperature to ${temperature}℃`);\n    event.setAirConditionerTemperature(temperature);\n}\nfunction startFragranceMachine() {\n    console.log(\"Starting fragrance machine\");\n    event.startFragranceMachine();\n}\nfunction stopFragranceMachine() {\n    console.log(\"Stopping fragrance machine\");\n    event.stopFragranceMachine();\n}\nfunction adjustCurtains(action) {\n    console.log(`Adjusting curtains to ${action}`);\n    event.adjustCurtains(action);\n}\neventBus.on('existPressure', () => {\n    adjustLighting([1, 2, 3], 2700, 50); \n    playMusic(\"Relaxing Music\", 1800); \n    setAirConditionerTemperature(22);\n    startFragranceMachine();\n    adjustCurtains('close'); \n});\neventBus.on('NoPressure', () => {\n    stopMusic(\"Relaxing Music\");\n    stopFragranceMachine();\n    adjustLighting([1, 2, 3], 3500, 100); \n    adjustCurtains('open'); \n});\nfunction setupMeditationScene() {\n     eventBus.emit('existPressure'); \n    eventBus.emit('NoPressure'); \n}\nsetupMeditationScene();",
        "accurate_docstring":"Activate Meditation Mode: When the meditation session begins, relaxing nature sounds will automatically play, the lights will dim, and the misting system will activate to increase air humidity.Real-time Environment Monitoring: Sensors will monitor light intensity, temperature, and humidity every 5 minutes and display the environmental parameters on an electronic screen.End Meditation Mode: After 1 hour, the nature sounds will automatically stop, the lighting will return to normal mode, and the misting system will shut off.",
        "docstring":"Automatically activate meditation mode, play nature sounds, dim the lights, activate the misting system, and monitor environmental parameters in real-time.",
        "general_docstring":"Smart meditation, comfortable environment, automatic monitoring"
    },
    {
        "code":"function playPartyMusic() {\n    console.log(\"Playing party music.\");\n    event.playMusic(\"Party Playlist\");\n}\nfunction stopPartyMusic() {\n    console.log(\"Stopping party music.\");\n    event.stopMusic();\n}\nfunction controlPartyLights(mode) {\n    console.log(`Setting lights to ${mode} mode.`);\n    event.setLights(mode);\n}\nfunction controlFogMachine(action) {\n    console.log(`${action} fog machine.`);\n    if (action === \"Starting\") {\n        event.startFogMachine();\n    } else {\n        event.stopFogMachine();\n    }\n}\nfunction controlLaserLights(action) {\n    console.log(`${action} laser lights.`);\n    if (action === \"Starting\") {\n        event.startLaserLights();\n    } else {\n        event.stopLaserLights();\n    }\n}\nlet number=0;\neventBus.on('entranceDoorMovement', () => {\n    if(number==0){\n        playPartyMusic();\n        controlPartyLights(\"party\");\n        controlFogMachine(\"Starting\");\n        controlLaserLights(\"Starting\");\n        number++;\n    }\n});\neventBus.on('exitDoorMovement', () => {\n    if(number==1){\n        stopPartyMusic();\n        controlPartyLights(\"normal\");\n        controlFogMachine(\"Stopping\");\n        controlLaserLights(\"Stopping\");\n        number--;\n    }\n});\nfunction setupPartyScene() {\n    eventBus.emit('entranceDoorMovement'); \n    eventBus.emit('exitDoorMovement'); \n}\nsetupPartyScene();",
        "accurate_docstring":"When the number of people indoors is greater than 0: When the party begins, party music will automatically play, the lighting will switch to party mode, and the smoke machine and laser lights will activate.When the number of people indoors is equal to 0: After 4 hours, the party music will automatically stop, the lighting will return to normal mode, and the smoke machine and laser lights will turn off.",
        "docstring":"Automatically activate party mode, play party music, set party lighting, and activate the smoke machine and laser lights.",
        "general_docstring":"Smart party, automatic music, party lighting, smoke machine, and laser lights"
    },
        {
        "code":"function startCleaningRobot() {\n    console.log(\"Starting cleaning robot.\");\n    event.startCleaningRobot();\n}\nfunction stopCleaningRobot() {\n    console.log(\"Stopping cleaning robot.\");\n    event.stopCleaningRobot();\n}\nfunction turnOnAirPurifier() {\n    console.log(\"Turning on air purifier.\");\n    event.turnOnAirPurifier();\n}\nfunction turnOffAirPurifier() {\n    console.log(\"Turning off air purifier.\");\n    event.turnOffAirPurifier();\n}\nfunction playRelaxingMusic() {\n    console.log(\"Playing relaxing music.\");\n    event.playMusic(\"Relaxing Music\");\n}\nfunction stopMusic() {\n    console.log(\"Stopping music.\");\n    event.stopMusic();\n}\neventBus.on('needCleaning', () => {\n    startCleaningRobot();\n    turnOnAirPurifier();\n    playRelaxingMusic();\n});\neventBus.on('endCleaning', () => {\n    stopCleaningRobot();\n    turnOffAirPurifier();\n    stopMusic();\n    feedPet();\n});\nfunction setupHomeCleaningScene() {\n    eventBus.emit('needCleaning'); \n     eventBus.emit('endCleaning'); \n}\nsetupHomeCleaningScene();",
        "accurate_docstring":"When the camera detects the need for cleaning:The automatic cleaning robot starts and begins cleaning the entire house.The air purifier turns on to clean the air.Soothing music plays to create a relaxing atmosphere.When the camera detects sufficient cleanliness:After 2 hours, the cleaning robot automatically stops.The air purifier turns off.The music stops playing.The pets are fed to ensure their needs are met.",
        "docstring":"Smart home cleaning scene: activate the cleaning robot and air purifier, play soothing music. After cleaning, turn off devices and feed pets.",
        "general_docstring":"Smart cleaning: automatic cleaning, air purification, music playing; after cleaning, devices turn off and pets are fed."
    },
        {
        "code":"function startTimer() {\n    console.log(\"Starting the race timer.\");\n    event.startRaceTimer();\n}\nfunction stopTimer() {\n    console.log(\"Stopping the race timer.\");\n    event.stopRaceTimer();\n}\nfunction updateScoreboard(score,team) {\n    console.log(`Updating steam${team} scoreboard with score: ${score}`);\n    event.updateScoreboard(score,team);\n}\nfunction playRaceMusic() {\n    console.log(\"Playing race background music.\");\n    event.playMusic(\"Race Playlist\");\n}\nfunction stopRaceMusic() {\n    console.log(\"Stopping race background music.\");\n    event.stopMusic();\n}\nfunction startLiveStream() {\n    console.log(\"Starting the live stream.\");\n    event.startLiveStream();\n}\nfunction stopLiveStream() {\n    console.log(\"Stopping the live stream.\");\n    event.stopLiveStream();\n}\neventBus.on('startRace', () => {\n    startTimer();\n    playRaceMusic();\n    startLiveStream();\n});\neventBus.on('aScore', (score) => {\n    updateScoreboard(score,a);\n});\neventBus.on('bScore', (score) => {\n    updateScoreboard(score,b);\n});\neventBus.on('endRace', () => {\n    stopTimer();\n    stopRaceMusic();\n    stopLiveStream();\n});\nfunction setupRaceScene() {\n    eventBus.emit('startRace'); \n    eventBus.emit('ascore'); \n    eventBus.emit('bscore'); \n    setTimeout(() => eventBus.emit('endRace'), 7200000); \n}\nsetupRaceScene();",
        "accurate_docstring":"Start the Competition:The competition timer starts, recording the competition time.Background music plays to create a competitive atmosphere.The competition live stream begins, allowing viewers to watch online.Automatic Score Updates:The scoreboard updates in real-time according to the progress of the competition.End the Competition:After 2 hours, the competition timer automatically stops.The background music stops playing.The live stream ends, concluding the competition broadcast.",
        "docstring":"Smart competition scene: start the competition timer, background music, and live stream; update the scoreboard in real-time; stop the timer, music, and live stream after the competition ends.",
        "general_docstring":"Smart competition: automatic timing, background music, live streaming, score updates; all functions stop after the competition."
      },
        {
        "code":"function openCurtains() {\n    console.log(\"Opening curtains.\");\n    event.openCurtains();\n}\nfunction closeCurtains() {\n    console.log(\"Closing curtains.\");\n    event.closeCurtains();\n}\nfunction turnOnLights() {\n    console.log(\"Turning on lights.\");\n    event.turnOnLights();\n}\nfunction turnOffLights() {\n    console.log(\"Turning off lights.\");\n    event.turnOffLights();\n}\nfunction playRomanticMusic() {\n    console.log(\"Playing romantic music.\");\n    event.playMusic(\"Romantic Playlist\");\n}\nfunction stopMusic() {\n    console.log(\"Stopping music.\");\n    event.stopMusic();\n}\nfunction setTemperature(temp) {\n    console.log(`Setting temperature to ${temp}°C.`);\n    event.setTemperature(temp);\n}\nfunction prepareDinner() {\n    console.log(\"Preparing dinner.\");\n    event.prepareDinner();\n}\neventBus.on('startDateNight', () => {\n    openCurtains();\n    turnOnLights();\n    playRomanticMusic();\n    setTemperature(22);\n    prepareDinner();\n});\neventBus.on('endDateNight', () => {\n    closeCurtains();\n    turnOffLights();\n    stopMusic();\n});\nfunction setupDateNightScene() {\n    eventBus.emit('startDateNight'); \n    setTimeout(() => eventBus.emit('endDateNight'), 10800000); \n}\nsetupDateNightScene();",
        "accurate_docstring":"Start Date Night:Open the curtains to create an open atmosphere.Turn on the lights and adjust them to a soft illumination.Play romantic music to set a romantic mood.Set the indoor temperature to a comfortable 22°C.Prepare dinner and ensure everything is ready.End Date Night:After 3 hours, automatically close the curtains.Turn off the lights to create a quiet nighttime atmosphere.Stop playing the music.",
        "docstring":"Smart date night scene: open curtains and lights, play romantic music, set temperature, prepare dinner; after 3 hours, close curtains and lights, stop music.",
        "general_docstring":"Smart date night: open curtains and lights, play music, set temperature, prepare dinner; close all after 3 hours."
       },
        {
        "code":"function activateAutonomousDriving() {\n    console.log(\"Activating autonomous driving mode.\");\n    event.activateAutonomousDriving();\n}\nfunction activateParkingAssistance() {\n    console.log(\"Activating parking assistance.\");\n    event.activateParkingAssistance();\n}\nfunction playTrafficReport() {\n    console.log(\"Playing traffic report.\");\n    event.playTrafficReport();\n}\nfunction updateWeather() {\n    console.log(\"Updating weather information.\");\n    event.updateWeather();\n}\nfunction adjustCarTemperature(temp) {\n    console.log(`Setting car temperature to ${temp}°C.`);\n    event.adjustCarTemperature(temp);\n}\neventBus.on('startJourney', () => {\n    activateAutonomousDriving();\n    playTrafficReport();\n    updateWeather();\n    adjustCarTemperature(22);\n});\neventBus.on('startParking', () => {\n    activateParkingAssistance();\n});\neventBus.on('endJourney', () => {\n    console.log(\"Journey ended. Turning off autonomous driving mode.\");\n    event.deactivateAutonomousDriving();\n    console.log(\"Stopping traffic report.\");\n    event.stopTrafficReport();\n});\nfunction setupTransportScene() {\n    eventBus.emit('startJourney'); \n    setTimeout(() => eventBus.emit('startParking'), 1800000); \n    setTimeout(() => eventBus.emit('endJourney'), 3600000); \n}\nsetupTransportScene();",
        "accurate_docstring":"Start the Journey:Activate the autonomous driving mode to ensure safe travel.Play traffic reports to receive the latest traffic conditions and route suggestions.Update real-time weather information to stay informed about road conditions and driving environments.Adjust the car's interior temperature to 22°C to provide a comfortable driving experience.Parking:After 30 minutes, activate parking assistance to help with safe parking.End the Journey:After 1 hour, automatically end the journey and deactivate the autonomous driving mode.Stop playing traffic reports.",
        "docstring":"Smart transportation scene: autonomous driving, traffic reports, weather updates, temperature adjustment, parking assistance, end journey.",
        "general_docstring":"Smart transportation: autonomous driving, traffic reports, weather updates, temperature control, parking, end."
    },
        {
        "code":"function controlGarageLights(state) {\n    console.log(`Turning ${state} garage lights.`);\n    event.controlGarageLights(state);\n}\nfunction updateParkingAvailability() {\n    const availability = getParkingAvailability();\n    console.log(`Updating parking availability: ${availability} spaces available.`);\n    event.updateParkingAvailability(availability);\n}\nfunction recognizeLicensePlate() {\n    const licensePlate = getLicensePlate();\n    console.log(`Recognized license plate: ${licensePlate}`);\n    event.recognizeLicensePlate(licensePlate);\n}\nfunction processPayment(licensePlate) {\n    console.log(`Processing payment for license plate: ${licensePlate}`);\n    event.processPayment(licensePlate);\n}\neventBus.on('carEntering', () => {\n    controlGarageLights('on');\n    recognizeLicensePlate();\n    updateParkingAvailability();\n});\neventBus.on('carExiting', () => {\n    const licensePlate = getLicensePlate();\n    processPayment(licensePlate);\n    updateParkingAvailability();\n    controlGarageLights('off');\n});\nfunction setupParkingGarageScene() {\n    eventBus.emit('carEntering'); \n    eventBus.emit('carExiting'); \n}\nsetupParkingGarageScene();",
        "accurate_docstring":"Vehicle Enters the Parking Lot:Control the lighting in the underground parking lot, turning lights on or off as needed.The license plate recognition system activates, identifying and recording the license plate number.Update the vacant parking space display, showing the current number of available spaces.Vehicle Leaves the Parking Lot:When the vehicle leaves, automatically process the parking fee based on the license plate number.Update the vacant parking space display, showing the current number of available spaces.Control the lighting in the underground parking lot, turning lights on or off as needed.",
        "docstring":"Smart parking lot scene: license plate recognition, lighting control, vacant space display, automatic fee processing.",
        "general_docstring":"Smart parking: license plate recognition, lighting control, vacant space display, automatic fee processing."
    },
        {
        "code":"function startRace() {\n    console.log(\"Race started!\");\n    event.startRace(new Date(),getIds());\n}\nfunction endRace(id) {\n    console.log(\"Race ended!\");\n    event.endRace(new Date(),id);\n}\nfunction celebration(){\n    event.playMusic('champion');\n}\nfunction deploySafetyCar() {\n    console.log(\"Safety car deployed!\");\n    event.deploySafetyCar();\n}\neventBus.on('raceStart', () => {\n    startRace();\n});\nvar champion=1;\neventBus.on('raceEnd', () => {\n    if(champion){\n        celebration();\n        champion=0;\n    }\n    endRace(getid());\n});\neventBus.on('safetyCarDeployed', () => {\n    deploySafetyCar();\n});\nfunction setupRaceTrackScene() {\n    eventBus.emit('raceStart'); \n    eventBus.emit('safetyCarDeployed'); \n    eventBus.emit('raceEnd'); \n}\nsetupRaceTrackScene();\n",
        "accurate_docstring":"Vehicle Enters the Parking Lot:Control the lighting in the underground parking lot: Automatically turn on or off the parking lot lights based on the lighting conditions when a vehicle enters to ensure sufficient illumination.License plate recognition system activation: When a vehicle enters, the license plate recognition system automatically starts, identifying the vehicle's license plate number, and recording relevant information.Update the vacant parking space display: Real-time updates of available parking spaces on the display screen based on vehicle entry to ensure drivers can promptly understand the parking availability.Vehicle Leaves the Parking Lot:Automatic processing of parking fees: When a vehicle is ready to leave, the system automatically calculates the parking fee based on the license plate number and processes payment.Update the vacant parking space display: After the vehicle leaves, real-time updates of available parking spaces on the display screen to ensure drivers can promptly understand the parking availability.Control the lighting in the underground parking lot: Automatically turn on or off the parking lot lights based on the lighting conditions when a vehicle leaves to conserve energy.",
        "docstring":"Smart parking lot scene: license plate recognition, lighting control, vacant space display, automatic fee processing.",
        "general_docstring":"Smart parking: license plate recognition, lighting control, vacant space display, automatic fee processing."
    },
        {
        "code":"function detectTrafficFlow() {\n    const trafficFlow = getTrafficFlowData();\n    console.log(`Traffic flow detected: ${trafficFlow}.`);\n    event.detectTrafficFlow(trafficFlow);\n}\nfunction adjustTrafficLights(duration) {\n    console.log(`Adjusting traffic lights to ${duration} seconds.`);\n    event.adjustTrafficLights(duration);\n}\nfunction detectTrafficAccident() {\n    if (isAccidentDetected()) {\n        console.log(\"Traffic accident detected. Triggering warning.\");\n        event.triggerAccidentWarning();\n    }\n}\nfunction detectEmergencyVehicle() {\n    if (isEmergencyVehicleDetected()) {\n        console.log(\"Emergency vehicle detected. Adjusting traffic lights for priority passage.\");\n        event.adjustTrafficLightsForEmergency();\n    }\n}\nfunction detectPedestrians() {\n    if (arePedestriansDetected()) {\n        console.log(\"Pedestrians detected. Adjusting traffic lights for safe crossing.\");\n        event.adjustTrafficLightsForPedestrians();\n        event.playCrossingSignal();\n    }\n}\nfunction calculateLightDuration() {\n    return getflow() > 50 ? 30 : 60;\n}\neventBus.on('trafficFlowDetected', () => {\n    detectTrafficFlow();\n    adjustTrafficLights(calculateLightDuration());\n});\neventBus.on('pedestrian', () => {\n    detectPedestrians();\n});\neventBus.on('Emergency', () => {\n    detectEmergencyVehicle();\n});\neventBus.on('TrafficAccident', () => {\n    detectTrafficAccident();\n});\nfunction setupTrafficControlScene() {\n    setInterval(() => {\n        eventBus.emit('trafficFlowDetected');\n    }, 5000); \n    eventBus.emit('pedestrian');                     \n    eventBus.emit('Emergency');                     \n    eventBus.emit('TrafficAccident');                \n}\nsetupTrafficControlScene();",
        "accurate_docstring":"Automatic Traffic Flow Detection: Real-time detection of traffic flow data using cameras and sensors to assess the current traffic conditions at intersections.Adjustment of Signal Light Duration: Based on real-time traffic flow, intelligently adjust the duration of red and green lights to optimize traffic flow and reduce waiting times.Traffic Accident Detection and Warning: Immediate triggering of alarms and notification to nearby vehicles if a traffic accident is detected, along with adjustments to signal lights to ensure safety.Emergency Vehicle Priority Passage:Emergency Vehicle Detection: Using audio and video detection technology to identify approaching emergency vehicles (such as ambulances, fire trucks, etc.).Adjustment of Signal Lights for Priority Passage: Providing a green corridor for emergency vehicles by temporarily adjusting the sequence of signal lights to ensure quick passage.Restoration of Normal Signal Control: Automatic restoration of normal signal light control after emergency vehicles have passed through.Pedestrian Crosswalk Protection:Pedestrian Detection: Detection of pedestrian quantity and location using cameras to determine if a pedestrian signal is required.Signal Light Adjustment: Intelligent adjustment of signal lights when pedestrians are detected in the waiting area, providing safe crossing time.Voice Prompts: Playback of voice prompts when signal lights change to remind pedestrians to cross safely.",
        "docstring":"Smart Traffic Control Scenario: Traffic flow detection, signal light duration adjustment, accident warning, emergency vehicle priority, pedestrian protection.",
        "general_docstring":"Smart Traffic: Flow detection, signal adjustment, accident warning, emergency priority, pedestrian protection."
    },
        {
        "code":"function updateFlightInfo(flightInfo) {\n    console.log(`Updating flight info: ${JSON.stringify(flightInfo)}.`);\n    event.updateFlightInfo(flightInfo);\n}\nfunction sendSecurityCheckReminder() {\n    console.log(\"Sending security check reminder.\");\n    event.sendSecurityCheckReminder();\n}\nfunction sendBoardingNotification() {\n    console.log(\"Sending boarding notification.\");\n    event.sendBoardingNotification();\n}\nfunction sendBaggageDropReminder() {\n    console.log(\"Sending baggage drop reminder.\");\n    event.sendBaggageDropReminder();\n}\nfunction trackBaggage(baggageStatus) {\n    console.log(`Tracking baggage: ${baggageStatus}.`);\n    event.trackBaggage(baggageStatus);\n}\nfunction sendBaggageArrivalNotification() {\n    console.log(\"Sending baggage arrival notification.\");\n    event.sendBaggageArrivalNotification();\n}\nfunction monitorAndAdjustEnvironment(environmentData) {\n    const { temperature, humidity, airQuality } = environmentData;\n    console.log(`Temperature: ${temperature}°C, Humidity: ${humidity}%, Air Quality: ${airQuality}.`);\n    event.monitorEnvironment(environmentData);\n}\nfunction playBackgroundMusic(music) {\n    console.log(`Playing background music: ${music}.`);\n    event.playBackgroundMusic(music);\n}\nfunction sendChargingStationReminder() {\n    console.log(\"Sending charging station reminder.\");\n    event.sendChargingStationReminder();\n}\neventBus.on('flightInfoUpdate', (flightInfo) => {\n    updateFlightInfo(flightInfo);\n    sendSecurityCheckReminder();\n    sendBoardingNotification();\n});\neventBus.on('baggageHandling', (baggageStatus) => {\n    sendBaggageDropReminder();\n    trackBaggage(baggageStatus);\n    sendBaggageArrivalNotification();\n});\neventBus.on('environmentMonitoring', (environmentData) => {\n    monitorAndAdjustEnvironment(environmentData);\n});\neventBus.on('passengerComfortService', (music) => {\n    playBackgroundMusic(music);\n    sendChargingStationReminder();\n});\nfunction setupAirportScene() {\n    const flightInfo = { flightNumber: \"AB123\", status: \"On Time\", gate: \"A1\" };\n    const baggageStatus = \"Baggage loaded on flight AB123.\";\n    const environmentData = { temperature: 22, humidity: 50, airQuality: \"Good\" };\n    const music = \"Classical\";\n    eventBus.emit('flightInfoUpdate', flightInfo); \n    eventBus.emit('baggageHandling', baggageStatus); \n    eventBus.emit('environmentMonitoring', environmentData); \n    eventBus.emit('passengerComfortService', music); \n}\nsetupAirportScene();",
        "accurate_docstring":"Pre-flight Preparations:Flight Information Updates: Real-time retrieval of flight information via the airline's API to update the display screens with flight status and boarding gate information.Security Check Reminders: Sending security check reminders to passengers to ensure they have sufficient time to pass through security.Boarding Notifications: Sending boarding notifications when boarding begins to remind passengers to proceed to the boarding gate.Baggage Handling:Checked Baggage Reminders: Reminding passengers to check their baggage early to avoid boarding delays.Baggage Tracking: Real-time tracking of baggage location and providing passengers with baggage status updates.Baggage Arrival Notifications: Sending baggage arrival notifications to passengers when baggage reaches the destination.Airport Environment Monitoring:Temperature and Humidity Regulation: Automatically adjusting airport terminal air conditioning and humidifiers based on real-time temperature and humidity data.Air Quality Monitoring: Monitoring air quality within the airport to ensure freshness and activating air purifiers when necessary.Passenger Comfort Services:Background Music Playback: Playing appropriate background music based on time of day and passenger flow to enhance passenger comfort.Charging Station Alerts: Notifying passengers of the location of charging stations within the airport for convenient device charging.",
        "docstring":"Smart Airport Scenario: Flight information updates, security check reminders, boarding notifications, baggage handling, environment monitoring, passenger comfort services.",
        "general_docstring":"Smart Airport: Flight updates, security check reminders, boarding notifications, baggage tracking, environment monitoring, passenger services."
    },
        {
        "code":"function scanTicket(ticketInfo) {\n    console.log(`Scanning ticket: ${JSON.stringify(ticketInfo)}.`);\n    event.scanTicket(ticketInfo);\n}\nfunction sendWelcomeMessage(visitorInfo) {\n    console.log(`Sending welcome message to ${visitorInfo.name}.`);\n    event.sendWelcomeMessage(visitorInfo);\n}\nfunction displayExhibitInfo(exhibitInfo) {\n    console.log(`Displaying info for exhibit: ${JSON.stringify(exhibitInfo)}.`);\n    event.displayExhibitInfo(exhibitInfo);\n}\nfunction startAudioGuide(exhibitInfo) {\n    console.log(`Starting audio guide for exhibit: ${exhibitInfo.name}.`);\n    event.startAudioGuide(exhibitInfo);\n}\nfunction adjustEnvironment(environmentData) {\n    const { temperature, humidity } = environmentData;\n    console.log(`Adjusting environment - Temperature: ${temperature}°C, Humidity: ${humidity}%.`);\n    event.adjustEnvironment(environmentData);\n}\nfunction adjustLighting(lightingData) {\n    console.log(`Adjusting lighting to ${lightingData.level} level.`);\n    event.adjustLighting(lightingData);\n}\nfunction sendRestAreaReminder() {\n    event.sendRestAreaReminder(visitorInfo);\n}\nfunction sendSafetyAlert(visitorInfo) {\n    console.log(`Sending safety alert to ${visitorInfo.name}.`);\n    event.sendSafetyAlert(visitorInfo);\n}\neventBus.on('visitorEnter', (visitorInfo) => {\n    scanTicket(visitorInfo.ticket);\n    sendWelcomeMessage(visitorInfo);\n});\neventBus.on('exhibitInteraction', (exhibitInfo) => {\n    displayExhibitInfo(exhibitInfo);\n    startAudioGuide(exhibitInfo);\n});\neventBus.on('environmentControl', (environmentData) => {\n    adjustEnvironment(environmentData);\n    adjustLighting(environmentData.lighting);\n});\neventBus.on('visitorComfortService', (visitorInfo) => {\n    sendRestAreaReminder(visitorInfo);\n});\neventBus.on('safetyAlert', (visitorInfo) => {\n    sendSafetyAlert(visitorInfo);\n});\nfunction setupMuseumScene() {\n    const visitorInfo = getvisitorInfo();\n    const exhibitInfo = getexhibitInfo();\n    const environmentData = environmentData();\n    eventBus.emit('visitorEnter', visitorInfo); \n     eventBus.emit('exhibitInteraction', exhibitInfo); \n    eventBus.emit('environmentControl', environmentData); \n     eventBus.emit('visitorComfortService', visitorInfo); \n     eventBus.emit('safetyAlert', visitorInfo); \n}\nsetupMuseumScene();",
        "accurate_docstring":"Museum Entry Preparation:Ticket Scanning: As visitors enter the museum, the system scans their tickets to confirm their identity and record entry time.Welcome Messages: Sending welcome messages and guide maps to visitors upon entry to help them understand the layout and exhibition content of the museum.Interactive Exhibits:Exhibit Information Display: When visitors approach a particular exhibit, the system automatically displays detailed information about the exhibit on their devices, including historical background and related videos.Audio Guide: Visitors can choose to activate an audio guide, with the system playing audio explanations about the exhibit.Environmental Control:Temperature and Humidity Regulation: The system continuously monitors the temperature and humidity within the museum and adjusts air conditioning and humidifiers as needed to maintain a suitable environment.Lighting Control: Adjusting lighting brightness intelligently based on visitor activity and exhibition requirements to ensure the best viewing experience.Visitor Comfort Services:Rest Area Reminders: If visitors stay in the museum for an extended period, the system will remind them of nearby rest areas for their convenience.Safety Alerts: In emergency situations, the system sends safety alert messages to guide visitors to evacuate quickly to safe zones.",
        "docstring":"Smart Museum Scenario: Ticket scanning, welcome messages, interactive exhibit information, audio guides, environmental control, visitor comfort services.",
        "general_docstring":"Smart Museum: Ticket scanning, welcome messages, exhibit interaction, environmental control, visitor services."
    },
        {
        "code":"function recognizeCustomer() {\n    const customerId = getCustomerId();\n    console.log(`Customer recognized: ${customerId}`);\n    event.recognizeCustomer(customerId);\n}\nfunction showPersonalizedRecommendations(customerId) {\n    const recommendations = getRecommendations(customerId);\n    console.log(`Showing recommendations for customer ${customerId}: ${recommendations}`);\n    event.showRecommendations(recommendations);\n}\nfunction queryProductInfo(productId) {\n    const productInfo = getProductInfo(productId);\n    console.log(`Product info for ${productId}: ${productInfo}`);\n    event.showProductInfo(productInfo);\n}\nfunction selfCheckout() {\n    const totalAmount = calculateTotal();\n    console.log(`Total amount: ${totalAmount}`);\n    event.processPayment(totalAmount);\n}\nfunction sendElectronicReceipt(customerId) {\n    const receipt = generateReceipt(customerId);\n    console.log(`Sending electronic receipt to customer ${customerId}`);\n    event.sendReceipt(receipt);\n}\nfunction monitorInventory() {\n    const inventoryStatus = getInventoryStatus();\n    console.log(`Inventory status: ${inventoryStatus}`);\n    event.updateInventoryStatus(inventoryStatus);\n}\nfunction autoRestock() {\n    const restockOrder = generateRestockOrder();\n    console.log(`Generating restock order: ${restockOrder}`);\n    event.sendRestockOrder(restockOrder);\n}\nfunction getCustomerId() {\n    return \"C12345\";\n}\nfunction generateReceipt(customerId) {\n    return { customerId: customerId, items: [\"Product A\", \"Product B\"], total: 200 };\n}\nfunction getInventoryStatus() {\n    return { \"Product A\": 10, \"Product B\": 5 };\n}\nfunction generateRestockOrder() {\n    return { \"Product A\": 20, \"Product B\": 15 };\n}\neventBus.on('customerEnter', () => {\n    const customerId = getCustomerId();\n    recognizeCustomer(customerId);\n    showPersonalizedRecommendations(customerId);\n});\neventBus.on('productQuery', (productId) => {\n    queryProductInfo(productId);\n});\neventBus.on('checkout', () => {\n    selfCheckout();\n    const customerId = getCustomerId();\n    sendElectronicReceipt(customerId);\n});\neventBus.on('inventoryCheck', () => {\n    monitorInventory();\n    autoRestock();\n});\nfunction setupSmartRetailScene() {\n    eventBus.emit('customerEnter'); \n    eventBus.emit('productQuery', \"P123\"); \n    eventBus.emit('checkout'); \n    eventBus.emit('inventoryCheck'); \n}\nsetupSmartRetailScene();",
        "accurate_docstring":"Customer Entry into the Store:    Customer Recognition: Upon entering the store, the system automatically identifies customers using facial recognition technology through cameras, welcoming returning customers and recording new ones.Personalized Recommendations: Based on customers' shopping history and preferences, the system displays personalized product recommendations on screens within the store.Interactive Shopping Experience:Smart Shopping Cart: Equipped with scanners and displays, the smart shopping cart allows customers to view the prices and total amount of items in their cart at any time, and receive personalized promotional messages.Product Information Inquiry: Customers can scan product barcodes to view detailed information, including prices, ingredients, and usage instructions, on the smart shopping cart or in-store displays.Checkout Process:Self-Service Checkout: Self-service checkout terminals are provided where customers can scan item barcodes themselves, and the system automatically calculates the total amount and offers multiple payment methods.Express Checkout: For registered members, the system enables express checkout via their smartphones or facial recognition, deducting payments directly from their member accounts without scanning items.After-Sales Services:Electronic Receipts: Upon checkout, the system generates electronic receipts and sends them to customers' email addresses or mobile apps.Customer Feedback: Satisfaction survey questionnaires are sent to customers after checkout to collect feedback on their shopping experiences.Inventory Management:Real-Time Inventory Monitoring: The system continuously monitors the inventory status of all products in the store and automatically alerts staff when inventory levels are low.Automatic Restocking: Based on sales data and inventory levels, the system generates restocking orders and sends them to suppliers to ensure timely replenishment of goods.",
        "docstring":"Smart Retail Scenario: Customer recognition and personalized recommendations, smart shopping cart, product information inquiry, self-service and express checkout, electronic receipts and feedback, real-time inventory monitoring and automatic restocking.",
        "general_docstring":"Smart Retail: Customer recognition, interactive shopping, self-checkout, electronic receipts, inventory management."
    },
     {
        "code":"function activateSmartWalker() {\n    console.log(\"Activating smart walker.\");\n    event.activateSmartWalker();\n}\n\nfunction sendMedicationReminder() {\n    console.log(\"Sending medication reminder.\");\n    event.MedicationReminder();\n}\n\nfunction sendActivityReminder() {\n    console.log(\"Sending activity reminder.\");\n    event.ActivityReminder();\n}\n\nfunction monitorVitalSigns() {\n    const vitalSigns = getVitalSigns();\n    console.log(`Monitoring vital signs: ${JSON.stringify(vitalSigns)}`);\n    event.sendvitalSignsReport(vitalSigns);\n}\n\nfunction monitorActivity() {\n    const activityData = getActivityData();\n    console.log(`Monitoring activity: ${JSON.stringify(activityData)}`);\n    event.sendActivityReport(activityData);\n}\n\nfunction adjustEnvironment() {\n    const environmentSettings = getEnvironmentSettings();\n    event.adjustEnvironment(environmentSettings);\n}\n\nfunction emergencyPanicButton() {\n    console.log(\"Panic button pressed. Notifying emergency services.\");\n    event.emergencyPanicButton();\n}\n\nfunction detectFall() {\n    console.log(\"Fall detected. Notifying caregivers and emergency services.\");\n    event.remindNurse();\n}\n\nfunction remoteVideoAssistance() {\n    console.log(\"Providing remote video assistance.\");\n    event.remoteVideoAssistance();\n}\n\neventBus.on('startCare', () => {\n    activateSmartWalker();\n    sendMedicationReminder();\n    sendActivityReminder();\n    monitorVitalSigns();\n    monitorActivity();\n    adjustEnvironment();\n});\n\neventBus.on('emergency', () => {\n    emergencyPanicButton();\n    detectFall();\n    remoteVideoAssistance();\n});\n\nfunction setupCaregivingScene() {\n    eventBus.emit('startCare');\n    eventBus.emit('emergency')\n}\nsetupCaregivingScene();\n\nfunction getVitalSigns() {\n    return { heartRate: 72, bloodPressure: \"120/80\", glucose: 100 };\n}\n\nfunction getActivityData() {\n    return { steps: 3000, caloriesBurned: 200 };\n}\n\nfunction getEnvironmentSettings() {\n    return { temperature: 22, humidity: 50, lighting: \"bright\" };\n}",
        "accurate_docstring":"Smart Walker Activation:Automatic Activation: The system automatically activates the smart walker, providing real-time guidance and stability support for elderly and disabled individuals.Guided Assistance: The smart walker offers guided assistance through voice commands and alerts, helping users navigate their environment safely.Daily Schedule Management:Medication Reminders: The system sends reminders to take medication at scheduled times, ensuring adherence to medical routines.Activity Reminders: The system provides reminders for meals, exercise, and appointments, helping users maintain a structured daily routine.Home Monitoring and Health Tracking:Vital Signs Monitoring: The system continuously monitors vital signs such as heart rate, blood pressure, and glucose levels, alerting caregivers of any anomalies.Activity Monitoring: The system tracks daily activities and movement patterns to detect any unusual behavior or falls, notifying caregivers immediately if any issues arise.Environmental Control: The system adjusts home environment settings, including lighting, temperature, and humidity, to ensure comfort and safety.Emergency Response:Panic Button: Users have access to a panic button that, when pressed, immediately notifies caregivers and emergency services.Automatic Fall Detection: The system detects falls and automatically contacts caregivers and emergency services with the user’s location and status.Remote Assistance: Caregivers can provide remote assistance through video calls, offering guidance and assessing situations before arriving on-site.",
        "docstring":"Smart caregiving scenario: smart walker activation, medication and activity reminders, health and activity monitoring, environment control, emergency response with panic button and fall detection, remote video assistance.",
        "general_docstring":"Smart care: walker activation, schedule reminders, health/activity monitoring, environment control, emergency response, remote assistance."
    },
    {
        "code":"function verifyCustomerIdentity(customerId) {\n    if (customerId === 'valid') {\n        event.openSecurityGate(); \n        event.sendNotification('Welcome to Smart Bank!'); \n    } else {\n        event.sendNotification('Access Denied! Invalid Customer ID.'); \n    }\n}\nfunction processWithdrawal(amount) {\n    if (amount <= event.getAccountBalance()) {\n        event.dispenseCash(amount); \n        event.updateAccountBalance(-amount); \n        event.sendNotification(`Withdrawal of ${amount} CNY processed.`); \n    } else {\n        event.sendNotification('Insufficient funds!'); \n    }\n}\nfunction processDeposit(amount) {\n    event.acceptDeposit(amount); \n    event.updateAccountBalance(amount); \n    event.sendNotification(`Deposit of ${amount} CNY processed.`); \n}\neventBus.on('customerServiceRequest', (customerId, serviceType, amount) => {\n    verifyCustomerIdentity(customerId); \n    if (serviceType === 'withdrawal') {\n        processWithdrawal(amount); \n    } else if (serviceType === 'deposit') {\n        processDeposit(amount); \n    }\n});\neventBus.on('alarmTriggered', () => {\n    event.closeSecurityGate(); \n    event.playAlarm(); \n});\nfunction setupSmartBankScene() {\n    event.turnOnSecuritySystem(); \n    event.turnOnBankLights(); \n    eventBus.emit('customerServiceRequest');\n    eventBus.emit('alarmTriggered');\n}\nsetupSmartBankScene();",
        "accurate_docstring":"The security system is activated to ensure safety.Bank lights illuminate the area.Customers are welcomed with identity verification at the security gate. Valid customers receive access and a welcome notification, while invalid IDs trigger a denial notification.Service requests from customers trigger actions such as withdrawals or deposits, with notifications sent accordingly.In case of an alarm trigger, the security gate closes, and an alarm sounds.",
        "docstring":"The bank operates securely with activated security systems and well-lit premises. Customers are verified upon entry, transactions are processed promptly, and in the event of an alarm, security measures are implemented.",
        "general_docstring":"The bank operates securely with verified access, transaction processing, and alarm response protocols."
    },
    {
        "code":"function startSafeHouseScene() {\n    event.turnOnSecuritySystem(); \n    event.turnOnSurveillanceCameras(); \n    event.turnOnSmokeDetectors(); \n    event.sendNotification('Safe House Scene started.'); \n    event.emit('smokeDetected');\n    event.emit('intrusionDetected');\n}\neventBus.on('smokeDetected', () => {\n    event.activateSmokeAlarm(); \n    event.sendNotification('Smoke detected! Evacuate immediately!'); \n    event.openAllDoors(); \n    event.openWindows();\n    event.turnOnEmergencyLights(); \n    event.callEmergencyServices(); \n});\neventBus.on('intrusionDetected', () => {\n    event.activateIntrusionAlarm(); \n    event.sendNotification('Intrusion detected! Security breach detected!'); \n    event.callSecurityServices(); \n});\nstartSafeHouseScene();",
        "accurate_docstring":"The Safe House Scene initiates by activating the security system, surveillance cameras, and smoke detectors. Simulated events of smoke detection and intrusion are emitted to simulate emergency situations. Upon smoke detection, the smoke alarm activates, prompting an immediate evacuation notification. All doors and windows are opened, emergency lights are activated, and emergency services are notified. In case of intrusion detection, the intrusion alarm activates, and security services are notified.",
        "docstring":"The Safe House Scene is activated, triggering the security system, surveillance cameras, and smoke detectors. Smoke and intrusion events are simulated, prompting immediate action. Upon smoke detection, doors and windows are opened, emergency lights are activated, and emergency services are notified. In case of intrusion detection, security services are alerted.",
        "general_docstring":"The Safe House Scene activates security measures, including surveillance cameras and smoke detectors. Simulated smoke and intrusion events prompt immediate response, including opening doors and windows, activating emergency lights, and notifying emergency services."
    },
     {
        "code":,
        "accurate_docstring":"",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":,
        "accurate_docstring":"",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":,
        "accurate_docstring":"",
        "docstring":"",
        "general_docstring":""
    },
    {
        "code":,
        "accurate_docstring":"",
        "docstring":"",
        "general_docstring":""
    },
    
]
